{"version":3,"file":"js/400.1650985108786.d51aebc933a1fc59efd0.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js","webpack:///./src/SmartComponents/Drift/DriftDropDown.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/sort-up-icon.js","webpack:///./src/SmartComponents/Drift/DriftEmptyState.js","webpack:///./src/SmartComponents/Drift/DriftCard.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretDownIcon = createIcon(CaretDownIconConfig);\n\nexport default CaretDownIcon;","\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { translateDriftDropdownItems } from './utils';\n\nimport {\n    Dropdown,\n    DropdownToggle,\n    DropdownItem\n} from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\n\nexport const DriftDropDown = ({ fetchDriftData, selectedFilter }) => {\n\n    const intl = useIntl();\n    const dropdownItems = useRef([]);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        dropdownItems.current = translateDriftDropdownItems(intl);\n    }, []);\n\n    const onItemClick = (item, itemRef) => {\n        fetchDriftData(item);\n        setIsOpen((prevOpen) => !prevOpen);\n        itemRef.focus();\n    };\n\n    return <Dropdown\n        toggle={\n            <DropdownToggle onToggle={setIsOpen} toggleIndicator={CaretDownIcon}>\n                {selectedFilter.description}\n            </DropdownToggle>\n        }\n        isOpen={isOpen}\n        dropdownItems={dropdownItems.current.map((item, key) => (\n            <DropdownItem\n                key={key}\n                ref={(el) => dropdownItems.current[key].el = el}\n                onClick={() => onItemClick(item, dropdownItems.current[key].el)}>\n                {item.description}\n            </DropdownItem>\n        ))}\n    />;\n};\n\nDriftDropDown.propTypes = {\n    fetchDriftData: PropTypes.func,\n    selectedFilter: PropTypes.shape({\n        description: PropTypes.string\n    })\n};\n","import { createIcon } from '../createIcon';\n\nexport const SortUpIconConfig = {\n  name: 'SortUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SortUpIcon = createIcon(SortUpIconConfig);\n\nexport default SortUpIcon;","import { Button, EmptyState, EmptyStateBody, Text, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport * as ActionTypes from '../../AppConstants';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nexport const DriftEmptyState = () => {\n\n    const intl = useIntl();\n    const navigateTo = useChromePush();\n\n    return (\n        <EmptyState>\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.driftEmptyStateTitle)}\n            </Title>\n            <EmptyStateBody>\n                <Text>\n                    {intl.formatMessage(messages.driftEmptyStateBodyCreateBaseline)}\n                </Text>\n                <Text>\n                    {intl.formatMessage(messages.driftEmptyStateBodyEnableNotif)}\n                </Text>\n            </EmptyStateBody>\n            <Button\n                href={`${ActionTypes.DRIFT_BASELINES_URL}`}\n                onClick={(e) => navigateTo(e, ActionTypes.DRIFT_BASELINES_URL)}\n                variant=\"primary\">Go to Baselines\n            </Button>\n        </EmptyState>\n    );\n};\n","import './DriftCard.scss';\n\nimport * as AppActions from '../../AppActions';\nimport * as ActionTypes from '../../AppConstants';\nimport { getDate, buildCompareUrl } from './utils';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { DriftDropDown } from './DriftDropDown';\nimport messages from '../../Messages';\nimport SortUpIcon from '@patternfly/react-icons/dist/esm/icons/sort-up-icon';\nimport {\n    TextContent,\n    Divider,\n    DataList,\n    DataListItem,\n    DataListItemRow,\n    DataListCell,\n    DataListItemCells,\n    DataListWrapModifier,\n    Button,\n    TextVariants,\n    Text,\n    Bullseye,\n    Spinner,\n    Tooltip\n} from '@patternfly/react-core';\nimport { DriftEmptyState } from './DriftEmptyState';\nimport { useDispatch } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst DriftCard = () => {\n\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const navigateTo = useChromePush();\n    const [activeDrift, setActiveDrift] = useState({\n        id: 'hours-24',\n        description: intl.formatMessage(messages.driftDropDown24hours),\n        startDate: getDate(1),\n        endDate: getDate(0)\n    });\n    const [isCardExpanded, setIsCardExpanded] = useState(true);\n    const driftEvents = useSelector(({ DashboardStore }) => DashboardStore.driftEvents);\n    const driftEventFetchStatus = useSelector(({ DashboardStore }) => DashboardStore.driftEventFetchStatus);\n    const fetchDriftData = useCallback((dropDownItem) => {\n        dispatch(AppActions.fetchDrift({\n            appIds: ActionTypes.DRIFT_EVENTS_APP_ID,\n            startDate: dropDownItem.startDate,\n            endDate: dropDownItem.endDate,\n            includePayload: true\n        }));\n        setActiveDrift(dropDownItem);\n    }, [dispatch]);\n\n    useEffect(() => {\n        fetchDriftData(activeDrift);\n    }, [fetchDriftData, activeDrift.id]);\n\n    return (\n        <ExpandableCardTemplate\n            className='insd-m-toggle-right-on-md'\n            appName='Drift'\n            isExpanded={isCardExpanded}\n            isExpandedCallback={setIsCardExpanded}\n            title={\n                <Flex>\n                    <FlexItem>\n                        {intl.formatMessage(messages.driftCardTitle)}\n                    </FlexItem>\n                    {isCardExpanded ? (\n                        <FlexItem\n                            className='ins-c-drift__drop_down'\n                            align={{ default: 'alignRight' }}>\n                            <DriftDropDown fetchDriftData={fetchDriftData} selectedFilter={activeDrift} />\n                        </FlexItem>) : null}\n                </Flex>}\n            body={\n                <React.Fragment>\n                    {driftEventFetchStatus === 'pending' ?\n                        (\n                            <React.Fragment>\n                                <Bullseye>\n                                    <Spinner className='ins-c-drift__drift_spinner' />\n                                </Bullseye>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                {driftEvents.baselineDetail?.length > 0 ?\n                                    (<TemplateCardBody>\n                                        <Flex\n                                            direction={{ default: 'column' }}\n                                            alignItems={{ default: 'alignItemsCenter' }}>\n                                            <FlexItem>\n                                                <Flex\n                                                    alignItems={{ default: 'alignItemsFlexCenter' }}\n                                                    justifyContent={{ default: 'justifyContentCenter' }}>\n                                                    <span className='pf-u-font-size-2xl pf-u-text-align-center pf-u-font-weight-normal'>\n                                                        {driftEvents.numEvents}\n                                                    </span>\n                                                </Flex>\n                                                <TextContent\n                                                    className='insd-c-width-limiter pf-u-text-align-center'>\n                                                    <p className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.driftNumberOfEvents)}\n                                                    </p>\n                                                </TextContent>\n                                            </FlexItem>\n                                            <Button\n                                                variant=\"secondary\"\n                                                component='a'\n                                                className='ins-c-drift__investigate_button'\n                                                onClick={e => navigateTo(e, ActionTypes.DRIFT_URL)}\n                                                href={ActionTypes.DRIFT_URL}>\n                                                {intl.formatMessage(messages.driftInventigateButtton)}\n                                            </Button>\n                                        </Flex>\n                                        <Divider />\n                                        <TextContent\n                                            className='insd-c-width-limiter ins-c-drift__top_5'>\n                                            <p className='pf-u-font-size-sm pf-u-font-weight-bold'>\n                                                {intl.formatMessage(messages.driftTop5)}\n                                            </p>\n                                        </TextContent>\n                                        <DataList className='insd-m-no-padding insd-m-no-top-border insd-m-no-bottom-border' isCompact>\n                                            {driftEvents.baselineDetail.slice(0, ActionTypes.TOP_BASELINES).map((baseline, index) =>\n                                                <DataListItem key={index}>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <React.Fragment key={index}>\n                                                                    <DataListCell key={index} wrapModifier={DataListWrapModifier.truncate}>\n                                                                        <Text\n                                                                            component={TextVariants.a}\n                                                                            href={`${ActionTypes.DRIFT_BASELINES_URL}/${baseline.baselineId}`}\n                                                                            onClick={(e) => navigateTo(\n                                                                                e,\n                                                                                `${ActionTypes.DRIFT_BASELINES_URL}/${baseline.baselineId}`\n                                                                            )}\n                                                                        >\n                                                                            {baseline.baselineName}\n                                                                        </Text>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={index} className='ins-c-drift__data_list_cell_system_len'>\n                                                                        <span className='pf-u-font-weight-normal ins-c-drift__system_len'>\n                                                                            <SortUpIcon  color='black'/>\n                                                                            {intl.formatMessage(messages.driftSystems,\n                                                                                { systems: baseline.systems.length })}\n                                                                        </span>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={index} className='ins-c-drift__data_list_cell_compare'>\n                                                                        <Tooltip\n                                                                            content={\n                                                                                <div>\n                                                                                    {intl.formatMessage(messages.driftCompareTooltip)}\n                                                                                </div>}>\n                                                                            <Text\n                                                                                component={TextVariants.a}\n                                                                                href={buildCompareUrl(baseline.baselineId, baseline.systems)}\n                                                                                className='ins-c-drift__text_compare'\n                                                                                onClick={(e) => navigateTo(\n                                                                                    e,\n                                                                                    buildCompareUrl(baseline.baselineId, baseline.systems)\n                                                                                )}\n                                                                            >\n                                                                                {intl.formatMessage(messages.driftCompare)}\n                                                                            </Text>\n                                                                        </Tooltip>\n                                                                    </DataListCell>\n                                                                </React.Fragment>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                    </TemplateCardBody>)\n                                    : (<DriftEmptyState />)\n                                }\n                            </React.Fragment>\n                        )}\n                </React.Fragment>\n            }\n        />\n    );\n};\n\nDriftCard.propTypes = {\n    fetchDrift: PropTypes.func,\n    driftEvents: PropTypes.object,\n    driftEventFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default routerParams(DriftCard);\n"],"names":["name","height","width","svgPath","yOffset","xOffset","DriftDropDown","fetchDriftData","selectedFilter","intl","useIntl","dropdownItems","useRef","useState","isOpen","setIsOpen","useEffect","current","translateDriftDropdownItems","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","description","map","item","key","DropdownItem","ref","el","onClick","itemRef","prevOpen","focus","onItemClick","propTypes","PropTypes","DriftEmptyState","navigateTo","useChromePush","EmptyState","Title","headingLevel","size","formatMessage","messages","EmptyStateBody","Text","Button","href","ActionTypes","e","variant","DriftCard","dispatch","useDispatch","id","startDate","getDate","endDate","activeDrift","setActiveDrift","isCardExpanded","setIsCardExpanded","driftEvents","useSelector","DashboardStore","driftEventFetchStatus","useCallback","dropDownItem","AppActions","appIds","includePayload","ExpandableCardTemplate","className","appName","isExpanded","isExpandedCallback","title","Flex","FlexItem","align","default","body","Bullseye","Spinner","baselineDetail","length","TemplateCard","direction","alignItems","justifyContent","numEvents","TextContent","component","Divider","DataList","isCompact","slice","baseline","index","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","wrapModifier","DataListWrapModifier","TextVariants","baselineId","baselineName","color","systems","Tooltip","content","buildCompareUrl","fetchDrift","routerParams"],"sourceRoot":""}