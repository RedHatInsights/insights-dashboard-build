{"version":3,"file":"js/7935.426237031318c5950231.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/in-progress-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/question-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js","webpack:///./src/SmartComponents/Remediations/RemediationsEmptyState.js","webpack:///./src/Icons/QuestionIcon.js","webpack:///./src/PresentationalComponents/TimeStamp/TimeStamp.js","webpack:///./src/SmartComponents/Remediations/RunStatus.js","webpack:///./src/SmartComponents/Remediations/RemediationsCard.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CheckCircleIcon = createIcon(CheckCircleIconConfig);\n\nexport default CheckCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const InProgressIconConfig = {\n  name: 'InProgressIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const InProgressIcon = createIcon(InProgressIconConfig);\n\nexport default InProgressIcon;","import { createIcon } from '../createIcon';\n\nexport const QuestionCircleIconConfig = {\n  name: 'QuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const QuestionCircleIcon = createIcon(QuestionCircleIconConfig);\n\nexport default QuestionCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const TimesCircleIconConfig = {\n  name: 'TimesCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TimesCircleIcon = createIcon(TimesCircleIconConfig);\n\nexport default TimesCircleIcon;","import './RemediationsEmptyState.scss';\n\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { EmptyState, EmptyStateHeader, EmptyStateVariant } from '@patternfly/react-core';\n\nexport const RemediationsEmptyState = () => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState variant={ EmptyStateVariant.sm }>\n            <EmptyStateHeader titleText={<>{ intl.formatMessage(messages.remediationsNoDataTitle)}</>} headingLevel='h6' />\n            <EmptyStateBody>\n                { intl.formatMessage(messages.remediationsNoDataBody)}\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRemediationsEmptyState.propTypes = {\n    intl: PropTypes.any\n};\n","import './Icons.scss';\n\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport React from 'react';\n\nconst QuestionIcon = () => <QuestionCircleIcon className=\"insd-c-dashboard__icon-question\"/>;\n\nexport default QuestionIcon;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './TimeStamp.scss';\n\nexport const TimeStamp = ({ timestamp }) => (\n    <p className=\"insd-c-dashboard__time-stamp\">\n        { timestamp }\n    </p>\n);\n\nTimeStamp.propTypes = {\n    timestamp: propTypes.oneOfType([propTypes.string, propTypes.node])\n};\n\nexport default TimeStamp;\n","import './RunStatus.scss';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\nimport QuestionIcon from './../../Icons/QuestionIcon';\nimport TimeStamp from './../../PresentationalComponents/TimeStamp/TimeStamp';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\n// Normalize the status so we don't show all API statuses\nconst normalizeStatus = (status) => ({\n    running: 'running',\n    pending: 'running',\n    acked: 'running',\n    failure: 'failure',\n    canceled: 'failure',\n    success: 'success'\n})[status];\n\n// Render the correct icon based on normalized status\nconst statusIconClass = 'insd-c-remediation__status-icon';\nconst renderStatusIcon = (status) => ({\n    running: <InProgressIcon\n        className={ `${statusIconClass} ${statusIconClass}--running` }\n        aria-label=\"Remediation in progress\" />,\n    success: <CheckCircleIcon\n        className={ `${statusIconClass} ${statusIconClass}--passed` }\n        aria-label=\"Remediation passed\" />,\n    failure: <TimesCircleIcon\n        className={ `${statusIconClass} ${statusIconClass}--failed` }\n        aria-label=\"Remediation failed\" />\n})[status];\n\nconst RunStatus = ({ id, name, index, playbook_runs: playbookRuns }) => {\n    const hasData = playbookRuns ? playbookRuns.data?.length > 0 : false;\n    const intl = useIntl();\n\n    return <div className=\"insd-c-remediations-container\">\n        <div className=\"insd-c-remediation__status\">\n            { hasData ?\n                <React.Fragment>\n                    {renderStatusIcon(normalizeStatus(playbookRuns.data[0].status))}\n                    <p className='insd-c-remediation__status-text'>\n                        { intl.formatMessage(messages.remediationsPlaybookStatus, { status: normalizeStatus(playbookRuns.data[0].status) }) }\n                    </p>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <QuestionIcon />\n                    <p>{intl.formatMessage(messages.remediationsPlaybookNoActivity)}</p>\n                </React.Fragment>\n            }\n        </div>\n        <div className=\"insd-c-remediation__timestamp\">\n            {name.length > 65 ? <Tooltip content={ name }>\n                <InsightsLink app='remediations' to={ `/${id}` } className=\"pf-v5-c-button pf-m-inline pf-m-link\" id={ `remediation-link-${index}` }>\n                    {name}\n                </InsightsLink>\n            </Tooltip> :\n                <InsightsLink app='remediations' to={ `/${id}` } className=\"pf-v5-c-button pf-m-inline pf-m-link\" id={ `remediation-link-${index}` }>\n                    {name}\n                </InsightsLink>\n            }\n            { hasData\n                ? <TimeStamp timestamp={ <DateFormat type='exact' date={ playbookRuns.data[0].created_at } /> } />\n                : null\n            }\n        </div>\n    </div>;\n};\n\nRunStatus.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    intl: PropTypes.any,\n    index: PropTypes.any,\n    playbook_runs: PropTypes.any\n};\n\nexport default RunStatus;\n","import './RemediationsCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport {\n    TemplateCardActions,\n    TemplateCardBody\n} from '../../PresentationalComponents/Template/TemplateCard';\n\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport PropTypes from 'prop-types';\nimport { RemediationsEmptyState } from './RemediationsEmptyState';\nimport RunStatus from './RunStatus';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst RemediationsCard = ({\n    fetchRemediations, remediationsFetchStatus, remediations\n}) => {\n\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRemediations();\n    }, [fetchRemediations]);\n\n    return (\n        <ExpandableCardTemplate\n            appName='remediations'\n            className='ins-c-card__remediations insd-m-toggle-right-on-md'\n            title={ intl.formatMessage(messages.remediationsCardHeader) }\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_remediations') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_remediations', isExpanded)}\n            header={\n                <TemplateCardActions />\n            }\n            body={\n                <TemplateCardBody>\n                    {remediationsFetchStatus === 'fulfilled' &&\n                        (Array.isArray(remediations.data) &&\n                            (remediations.data.length > 0 ?\n                                <React.Fragment>\n                                    {remediations.data.map((element, index) =>\n                                        <RunStatus\n                                            id={ element.id }\n                                            name={ element.name }\n                                            key={ element.id }\n                                            index={ index + 1 }\n                                            playbook_runs={ element.playbook_runs }\n                                        />\n                                    )}\n                                    {remediations.meta.total > remediations.meta.count &&\n                                        <div className='insd-c-remediations-container'>\n                                            <div className='insd-c-remediation__status'>\n                                            </div>\n                                            <div className='insd-c-remediation__timestamp'>\n                                                <InsightsLink\n                                                    app='remediations'\n                                                    to='/'\n                                                    className=\"pf-v5-c-button pf-m-link pf-m-inline\"\n                                                    id='remediations-link-more'>\n                                                    {intl.formatMessage(messages.remediationsTotal,\n                                                        { total: remediations.meta.total - remediations.meta.count }\n                                                    )}\n                                                </InsightsLink>\n                                            </div>\n                                        </div>\n                                    }\n                                </React.Fragment>\n                                : <RemediationsEmptyState />)\n                        )\n                    }\n                    {remediationsFetchStatus === 'rejected' &&\n                        <FailState appName='Remediations' />\n                    }\n                </TemplateCardBody>\n            }\n        />\n    );\n};\n\nRemediationsCard.propTypes = {\n    fetchRemediations: PropTypes.func,\n    remediations: PropTypes.object,\n    remediationsFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    remediations: state.DashboardStore.remediations,\n    remediationsFetchStatus: state.DashboardStore.remediationsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRemediations: () => dispatch(AppActions.fetchRemediations())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps)\n(RemediationsCard);\n"],"names":["CheckCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","CheckCircleIcon","InProgressIconConfig","InProgressIcon","QuestionCircleIconConfig","QuestionCircleIcon","TimesCircleIconConfig","TimesCircleIcon","RemediationsEmptyState","intl","useIntl","React","EmptyState","variant","EmptyStateVariant","sm","EmptyStateHeader","titleText","formatMessage","messages","remediationsNoDataTitle","headingLevel","EmptyStateBody","remediationsNoDataBody","propTypes","PropTypes","className","TimeStamp","_ref","timestamp","normalizeStatus","status","running","pending","acked","failure","canceled","success","statusIconClass","RunStatus","_playbookRuns$data","id","index","playbookRuns","playbook_runs","hasData","data","length","concat","remediationsPlaybookStatus","QuestionIcon","remediationsPlaybookNoActivity","Tooltip","content","InsightsLink","app","to","DateFormat","type","date","created_at","RemediationsCard","fetchRemediations","remediationsFetchStatus","remediations","useEffect","ExpandableCardTemplate","appName","title","remediationsCardHeader","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","header","TemplateCardActions","body","TemplateCardBody","Array","isArray","map","element","key","meta","total","count","remediationsTotal","FailState","connect","state","ownProps","_objectSpread","DashboardStore","dispatch","AppActions"],"sourceRoot":""}