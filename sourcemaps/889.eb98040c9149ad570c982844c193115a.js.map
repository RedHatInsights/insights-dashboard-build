{"version":3,"file":"js/889.35b6679eb81fc817fcf7.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Advisor/Constants.js","webpack:///./src/SmartComponents/Advisor/Advisor.js"],"sourcesContent":["export const INCIDENT_URL = `/advisor/recommendations?reports_shown=true&impacting=true&offset=0&limit=10&sort=-publish_date&incident=true`;\n\nexport const SEVERITY_MAP = {\n    critical: 4,\n    important: 3,\n    moderate: 2,\n    low: 1\n};\n","/* eslint-disable react/display-name */\nimport './Advisor.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    Divider,\n    TextContent,\n    Title,\n    Tooltip,\n    TooltipPosition\n} from '@patternfly/react-core/dist/esm/components';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport React, { useEffect, useState } from 'react';\nimport { SEVERITY_MAP, UI_BASE } from '../../AppConstants';\nimport { capitalize, sapFilter } from '../../Utilities/Common';\nimport {\n    global_disabled_color_100,\n    global_palette_blue_100,\n    global_palette_blue_200,\n    global_palette_blue_300,\n    global_palette_blue_400\n} from '@patternfly/react-tokens/dist/esm/';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CompoundCard } from '../../PresentationalComponents/Template/CompoundCard';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport { INCIDENT_URL } from './Constants';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { PieChart } from '../../ChartTemplates/PieChart/PieChartTemplate';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst Advisor = () => {\n    const colors = [global_palette_blue_100.value, global_palette_blue_200.value, global_palette_blue_300.value, global_palette_blue_400.value];\n    const intl = useIntl();\n    const [trData, setTRData] = useState([]);\n    const [categoryData, setCategoryData] = useState([]);\n    const [colorScale, setColorScale] = useState();\n    const dispatch = useDispatch();\n    const recStats = useSelector(({ DashboardStore }) => DashboardStore.advisorStatsRecs);\n    const recStatsStatus = useSelector(({ DashboardStore }) => DashboardStore.advisorStatsRecsStatus);\n    const advisorIncidents = useSelector(({ DashboardStore }) => DashboardStore.advisorIncidents);\n    const advisorIncidentsStatus = useSelector(({ DashboardStore }) => DashboardStore.advisorIncidentsStatus);\n    const selectedTags = useSelector(({ DashboardStore }) => DashboardStore.selectedTags);\n    const workloads = useSelector(({ DashboardStore }) => DashboardStore.workloads);\n    const SID = useSelector(({ DashboardStore }) => DashboardStore.SID);\n\n    const urlRest = `&reports_shown=true&impacting=true&offset=0&limit=10${selectedTags?.length ?\n        `&tags=${selectedTags?.join()}` : ''}${workloads?.SAP ? '&sap_system=true' : ''}${SID?.length ? `&sap_sids=${SID?.join()}` : ''}`;\n    const totalRiskUrl = risk => `${UI_BASE}/advisor/recommendations?total_risk=${risk}${urlRest}`;\n    const pieLegendData = categoryData.map(item => ({\n        name: `${item.y} ${item.x} `, fill: `${item.fill}`,\n        url: `${UI_BASE}/advisor/recommendations?category=${item.value}${urlRest}`\n    }));\n    const iconTooltip = text => <Tooltip\n        key={text}\n        position={TooltipPosition.top}\n        content={<div>{text}</div>}>\n        <span aria-label='Action' className='insd-c-info-icon'>\n            <InfoIcon />\n        </span>\n    </Tooltip>;\n    const pieChartPadding = { bottom: 0, left: 0, right: 0, top: 0 };\n\n    useEffect(() => {\n        const advisorFetchStatsRecs = options => dispatch(AppActions.advisorFetchStatsRecs(options));\n        const advisorFetchStatsSystems = options => dispatch(AppActions.advisorFetchStatsSystems(options));\n        const advisorFetchIncidents = options => dispatch(AppActions.advisorFetchIncidents(options));\n        const options = { ...sapFilter(workloads, SID), ...selectedTags?.length > 0 && { tags: selectedTags } };\n        advisorFetchStatsRecs(options);\n        advisorFetchStatsSystems(options);\n        advisorFetchIncidents(options);\n    }, [selectedTags, workloads, SID, dispatch]);\n\n    useEffect(() => {\n        if (recStatsStatus === 'fulfilled') {\n            const { total_risk, category } = recStats;\n            const categoryCount = category.Stability + category.Availability + category.Performance + category.Security;\n            setTRData([\n                {\n                    title: `${capitalize(intl.formatMessage(messages.critical))} `,\n                    risk: `${total_risk[SEVERITY_MAP.critical]}`,\n                    value: SEVERITY_MAP.critical\n                },\n                {\n                    title: `${capitalize(intl.formatMessage(messages.important))} `,\n                    risk: `${total_risk[SEVERITY_MAP.important]}`,\n                    value: SEVERITY_MAP.important\n                },\n                {\n                    title: `${capitalize(intl.formatMessage(messages.moderate))} `,\n                    risk: `${total_risk[SEVERITY_MAP.moderate]}`,\n                    value: SEVERITY_MAP.moderate\n                },\n                {\n                    title: `${capitalize(intl.formatMessage(messages.low))} `,\n                    risk: `${total_risk[SEVERITY_MAP.low]}`,\n                    value: SEVERITY_MAP.low\n                }\n            ]);\n\n            setCategoryData([\n                {\n                    x: intl.formatMessage(messages.availability, { count: category.Availability }), y: category.Availability,\n                    fill: colors[0], value: 1\n                },\n                {\n                    x: intl.formatMessage(messages.stability, { count: category.Stability }), y: category.Stability,\n                    fill: colors[1], value: 3\n                },\n                {\n                    x: intl.formatMessage(messages.performance, { count: category.Performance }), y: category.Performance,\n                    fill: colors[2], value: 4\n                },\n                {\n                    x: intl.formatMessage(messages.security, { count: category.Security }), y: category.Security,\n                    fill: colors[3], value: 2\n                }\n            ]);\n\n            setColorScale(categoryCount === 0 ? [global_disabled_color_100.value] : colors);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [recStats, recStatsStatus]);\n\n    const navigateTo = useChromePush();\n\n    return <CompoundCard className='insd-c-dashboard-card-parent insd-c-dashboard__card--compound--Advisor'>\n        {advisorIncidentsStatus === 'pending' || recStatsStatus === 'pending' && <Loading />}\n        {advisorIncidentsStatus === 'rejected' ?\n            <TemplateCardBody><FailState appName='Advisor' /></TemplateCardBody>\n            : <React.Fragment>\n                <ExpandableCardTemplate\n                    appName='Advisor'\n                    className='insd-m-toggle-right-on-md'\n                    title={intl.formatMessage(messages.advisorCardHeader1)}\n                    isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_advisor1') || 'true')}\n                    isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_advisor1', isExpanded)}\n                    body={<TemplateCardBody className='ins-c-advisor-recs__card-body pf-u-pb-2xl'>\n                        <Flex\n                            direction={{ default: 'column' }}\n                            alignItems={{ default: 'alignItemsCenter' }}>\n                            <FlexItem>\n                                <Flex\n                                    alignItems={{ default: 'alignItemsFlexCenter' }}\n                                    justifyContent={{ default: 'justifyContentCenter' }}>\n                                    {advisorIncidents?.meta?.count > 0 &&\n                                        <ExclamationTriangleIcon className='pf-u-font-size-xl pf-u-warning-color-100' />}\n                                    <span className='pf-u-font-size-2xl pf-u-text-align-center pf-u-font-weight-normal'>\n                                        {intl.formatMessage(messages.incidents, { incidents: advisorIncidents?.meta?.count })}\n                                    </span>\n                                </Flex>\n                                <TextContent\n                                    className='insd-c-width-limiter pf-u-text-align-center'\n                                    style={{ '--insd-c-width-limiter--MaxWidth': '34ch' }}>\n                                    <p className='pf-u-font-size-sm'>\n                                        {intl.formatMessage(messages.advisorCardMessage)}\n                                    </p>\n                                </TextContent>\n                            </FlexItem>\n                            <Button\n                                variant='secondary'\n                                isSmall component='a'\n                                onClick={e => navigateTo(e, `${UI_BASE}${INCIDENT_URL}`)}\n                                href={`${UI_BASE}${INCIDENT_URL}`}\n                            >\n                                {intl.formatMessage(messages.advisorCardCTA)}\n                            </Button>\n                        </Flex>\n                    </TemplateCardBody>\n                    } />\n                <Divider inset={{ md: 'insetLg' }} />\n                <ExpandableCardTemplate\n                    appName='advisor-recommendation-by-total-risk'\n                    className='insd-m-toggle-right-on-md'\n                    title={<Flex flexWrap={{ default: 'nowrap' }}>\n                        <h3>{intl.formatMessage(messages.advisorCardHeader2)}</h3>\n                        {iconTooltip(intl.formatMessage(messages.totalRiskDef, { strong: (str) => <strong>{str}</strong> }))}\n                    </Flex>}\n                    isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_advisor2') || 'true')}\n                    isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_advisor2', isExpanded)}\n                    body={<TemplateCardBody className='ins-c-advisor-recs__card-body pf-u-pb-0'>\n                        <Flex\n                            justifyContent={{ default: 'justifyContentCenter' }}\n                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}\n                        >\n                            {trData.map(({ title, risk, value }) =>\n                                <a key={title} onClick={e => navigateTo(e, totalRiskUrl(value))} href={totalRiskUrl(value)}>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-normal'>\n                                            {risk}\n                                        </span>\n                                        <span className='pf-u-font-size-sm'>\n                                            {title}\n                                        </span>\n                                    </Flex>\n                                </a>)}\n                        </Flex>\n                        <Card component='div'>\n                            <CardTitle>\n                                <Title headingLevel='h4' size='lg'>\n                                    {intl.formatMessage(messages.advisorCardHeader3)}\n                                </Title>\n                            </CardTitle>\n                            <CardBody className='pf-u-pt-sm'>\n                                <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsLg' }}>\n                                    <div className=\"insd-c-dashboard__card-chart-container\">\n                                        <div className=\"insd-c-dashboard__card-pie-chart\">\n                                            <PieChart\n                                                ariaDesc='Advisor Category pie chart'\n                                                ariaTitle='Advisor Category pie chart'\n                                                constrainToVisibleArea={true}\n                                                data={categoryData}\n                                                colorScale={colorScale}\n                                                padding={pieChartPadding}\n                                            />\n                                        </div>\n                                        <div className=\"insd-c-dashboard__card-pie-chart-legend\">\n                                            <div className='insd-c-legend insd-m-2-col'>\n                                                {pieLegendData.map((item) =>\n                                                    <a\n                                                        key={item.url}\n                                                        onClick={e => navigateTo(e, item.url)}\n                                                        href={item.url}\n                                                        className='insd-c-legend__item'\n                                                    >\n                                                        <span className='insd-c-legend__dot'\n                                                            style={{ '--insd-c-legend__dot--BackgroundColor': `${item.fill}` }} />\n                                                        <span className='insd-c-legend__text'>{item.name}</span>\n                                                    </a>\n                                                )}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Flex>\n                            </CardBody>\n                        </Card>\n                    </TemplateCardBody>\n                    } />\n            </React.Fragment>}\n    </CompoundCard>;\n};\n\nexport default Advisor;\n"],"names":["INCIDENT_URL","colors","global_palette_blue_100","global_palette_blue_200","global_palette_blue_300","global_palette_blue_400","intl","useIntl","useState","trData","setTRData","categoryData","setCategoryData","colorScale","setColorScale","dispatch","useDispatch","recStats","useSelector","DashboardStore","advisorStatsRecs","recStatsStatus","advisorStatsRecsStatus","advisorIncidents","advisorIncidentsStatus","selectedTags","workloads","SID","urlRest","length","join","SAP","totalRiskUrl","risk","UI_BASE","pieLegendData","map","item","name","y","x","fill","url","value","useEffect","options","sapFilter","tags","AppActions","advisorFetchStatsRecs","advisorFetchStatsSystems","advisorFetchIncidents","total_risk","category","categoryCount","Stability","Availability","Performance","Security","title","capitalize","formatMessage","messages","SEVERITY_MAP","count","global_disabled_color_100","text","navigateTo","useChromePush","CompoundCard","className","Loading","TemplateCard","FailState","appName","ExpandableCardTemplate","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","Flex","direction","default","alignItems","FlexItem","justifyContent","meta","incidents","TextContent","style","Button","variant","isSmall","component","onClick","e","href","Divider","inset","md","flexWrap","strong","str","Tooltip","key","position","TooltipPosition","content","InfoIcon","spaceItems","sm","Card","CardTitle","Title","headingLevel","size","CardBody","ariaDesc","ariaTitle","constrainToVisibleArea","data","padding","bottom","left","right","top"],"sourceRoot":""}