{"version":3,"file":"js/4400.1644264707079.9a58bba4a815561f6512.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js","webpack:///./src/SmartComponents/Drift/DriftDropDown.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/sort-up-icon.js","webpack:///./src/SmartComponents/Drift/DriftEmptyState.js","webpack:///./src/SmartComponents/Drift/DriftCard.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretDownIcon = createIcon(CaretDownIconConfig);\n\nexport default CaretDownIcon;","\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { translateDriftDropdownItems } from './utils';\n\nimport {\n    Dropdown,\n    DropdownToggle,\n    DropdownItem\n} from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\n\nexport const DriftDropDown = ({ fetchDriftData, selectedFilter }) => {\n\n    const intl = useIntl();\n    const dropdownItems = useRef([]);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        dropdownItems.current = translateDriftDropdownItems(intl);\n    }, []);\n\n    const onItemClick = (item, itemRef) => {\n        fetchDriftData(item);\n        setIsOpen((prevOpen) => !prevOpen);\n        itemRef.focus();\n    };\n\n    return <Dropdown\n        toggle={\n            <DropdownToggle onToggle={setIsOpen} toggleIndicator={CaretDownIcon}>\n                {selectedFilter.description}\n            </DropdownToggle>\n        }\n        isOpen={isOpen}\n        dropdownItems={dropdownItems.current.map((item, key) => (\n            <DropdownItem\n                key={key}\n                ref={(el) => dropdownItems.current[key].el = el}\n                onClick={() => onItemClick(item, dropdownItems.current[key].el)}>\n                {item.description}\n            </DropdownItem>\n        ))}\n    />;\n};\n\nDriftDropDown.propTypes = {\n    fetchDriftData: PropTypes.func,\n    selectedFilter: PropTypes.shape({\n        description: PropTypes.string\n    })\n};\n","import { createIcon } from '../createIcon';\n\nexport const SortUpIconConfig = {\n  name: 'SortUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SortUpIcon = createIcon(SortUpIconConfig);\n\nexport default SortUpIcon;","import { Button, EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nexport const DriftEmptyState = () => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState>\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.driftEmptyStateTitle)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.driftEmptyStateBody)}\n            </EmptyStateBody>\n            <Button variant=\"primary\">Go to Baselines</Button>\n        </EmptyState>\n    );\n};\n","import './DriftCard.scss';\n\nimport * as AppActions from '../../AppActions';\nimport * as ActionTypes from '../../AppConstants';\nimport { getDate, buildCompareUrl } from './utils';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport { TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { DriftDropDown } from './DriftDropDown';\nimport messages from '../../Messages';\nimport SortUpIcon from '@patternfly/react-icons/dist/esm/icons/sort-up-icon';\nimport {\n    TextContent,\n    Divider,\n    DataList,\n    DataListItem,\n    DataListItemRow,\n    DataListCell,\n    DataListItemCells,\n    DataListWrapModifier,\n    Button,\n    TextVariants,\n    Text,\n    Bullseye,\n    Spinner,\n    Tooltip\n} from '@patternfly/react-core';\nimport { DriftEmptyState } from './DriftEmptyState';\nimport { useDispatch } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst DriftCard = () => {\n\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const navigateTo = useChromePush();\n    const [activeDrift, setActiveDrift] = useState({\n        id: 'days-7',\n        description: intl.formatMessage(messages.driftDropDown7days),\n        startDate: getDate(7),\n        endDate: getDate(0)\n    });\n    const driftEvents = useSelector(({ DashboardStore }) => DashboardStore.driftEvents);\n    const driftEventFetchStatus = useSelector(({ DashboardStore }) => DashboardStore.driftEventFetchStatus);\n\n    const fetchDriftData = useCallback((dropDownItem) => {\n        dispatch(AppActions.fetchDrift({\n            appIds: ActionTypes.DRIFT_EVENTS_APP_ID,\n            startDate: dropDownItem.startDate,\n            endDate: dropDownItem.endDate,\n            includePayload: true\n        }));\n        setActiveDrift(dropDownItem);\n    }, [dispatch]);\n\n    useEffect(() => {\n        fetchDriftData(activeDrift);\n    }, [fetchDriftData, activeDrift.id]);\n\n    return (\n        <ExpandableCardTemplate\n            className='insd-m-toggle-right-on-md '\n            appName='Drift'\n            title={intl.formatMessage(messages.driftCardAppName)}\n            body={\n                <React.Fragment>\n                    {driftEventFetchStatus === 'pending' ?\n                        (\n                            <React.Fragment>\n                                <Flex>\n                                    <FlexItem>\n                                        <TemplateCardHeader\n                                            title={intl.formatMessage(messages.driftCardTitle)}\n                                        />\n                                    </FlexItem>\n                                    <FlexItem\n                                        className='ins-c-drift__drop_down'\n                                        align={{ default: 'alignRight' }}>\n                                        <DriftDropDown fetchDriftData={fetchDriftData} selectedFilter={activeDrift} />\n                                    </FlexItem>\n                                </Flex>\n                                <Bullseye>\n                                    <Spinner className='ins-c-drift__drift_spinner' />\n                                </Bullseye>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                <Flex>\n                                    <FlexItem>\n                                        <TemplateCardHeader\n                                            title={intl.formatMessage(messages.driftCardTitle)}\n                                        />\n                                    </FlexItem>\n                                    <FlexItem\n                                        className='ins-c-drift__drop_down'\n                                        align={{ default: 'alignRight' }}>\n                                        <DriftDropDown fetchDriftData={fetchDriftData} selectedFilter={activeDrift} />\n                                    </FlexItem>\n                                </Flex>\n                                {driftEvents.baselineDetail?.length > 0 ?\n                                    (<TemplateCardBody>\n                                        <Flex\n                                            direction={{ default: 'column' }}\n                                            alignItems={{ default: 'alignItemsCenter' }}>\n                                            <FlexItem>\n                                                <Flex\n                                                    alignItems={{ default: 'alignItemsFlexCenter' }}\n                                                    justifyContent={{ default: 'justifyContentCenter' }}>\n                                                    <span className='pf-u-font-size-2xl pf-u-text-align-center pf-u-font-weight-normal'>\n                                                        {driftEvents.numEvents}\n                                                    </span>\n                                                </Flex>\n                                                <TextContent\n                                                    className='insd-c-width-limiter pf-u-text-align-center'>\n                                                    <p className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.driftNumberOfEvents)}\n                                                    </p>\n                                                </TextContent>\n                                            </FlexItem>\n                                            <Button\n                                                variant=\"secondary\"\n                                                component='a'\n                                                className='ins-c-drift__investigate_button'\n                                                onClick={e => navigateTo(e, ActionTypes.DRIFT_URL)}\n                                                href={ActionTypes.DRIFT_URL}>\n                                                {intl.formatMessage(messages.driftInventigateButtton)}\n                                            </Button>\n                                        </Flex>\n                                        <Divider />\n                                        <TextContent\n                                            className='insd-c-width-limiter ins-c-drift__top_5'>\n                                            <p className='pf-u-font-size-sm'>\n                                                {intl.formatMessage(messages.driftTop5)}\n                                            </p>\n                                        </TextContent>\n                                        <DataList className='insd-m-no-padding insd-m-no-top-border insd-m-no-bottom-border' isCompact>\n                                            {driftEvents.baselineDetail.slice(0, ActionTypes.TOP_BASELINES).map((baseline, index) =>\n                                                <DataListItem key={index}>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <React.Fragment key={index}>\n                                                                    <DataListCell key={index} wrapModifier={DataListWrapModifier.truncate}>\n                                                                        <Text\n                                                                            component={TextVariants.a}\n                                                                            href={`${ActionTypes.DRIFT_BASELINES_URL}/${baseline.baselineId}`}\n                                                                            onClick={(e) => navigateTo(\n                                                                                e,\n                                                                                `${ActionTypes.DRIFT_BASELINES_URL}/${baseline.baselineId}`\n                                                                            )}\n                                                                        >\n                                                                            {baseline.baselineName}\n                                                                        </Text>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={index} className='ins-c-drift__data_list_cell_system_len'>\n                                                                        <span className='pf-u-font-weight-normal ins-c-drift__system_len'>\n                                                                            <SortUpIcon  color='black'/>\n                                                                            {intl.formatMessage(messages.driftSystems,\n                                                                                { systems: baseline.systems.length })}\n                                                                        </span>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={index} className='ins-c-drift__data_list_cell_compare'>\n                                                                        <Tooltip\n                                                                            content={\n                                                                                <div>\n                                                                                    {intl.formatMessage(messages.driftCompareTooltip)}\n                                                                                </div>}>\n                                                                            <Text\n                                                                                component={TextVariants.a}\n                                                                                href={buildCompareUrl(baseline.baselineId, baseline.systems)}\n                                                                                className='ins-c-drift__text_compare'\n                                                                                onClick={(e) => navigateTo(\n                                                                                    e,\n                                                                                    buildCompareUrl(baseline.baselineId, baseline.systems)\n                                                                                )}\n                                                                            >\n                                                                                {intl.formatMessage(messages.driftCompare)}\n                                                                            </Text>\n                                                                        </Tooltip>\n                                                                    </DataListCell>\n                                                                </React.Fragment>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                    </TemplateCardBody>)\n                                    : (<DriftEmptyState />)\n                                }\n                            </React.Fragment>\n                        )}\n                </React.Fragment>\n            }\n        />\n    );\n};\n\nDriftCard.propTypes = {\n    fetchDrift: PropTypes.func,\n    driftEvents: PropTypes.object,\n    driftEventFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default routerParams(DriftCard);\n"],"names":["name","height","width","svgPath","yOffset","xOffset","DriftDropDown","fetchDriftData","selectedFilter","intl","useIntl","dropdownItems","useRef","useState","isOpen","setIsOpen","useEffect","current","translateDriftDropdownItems","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","description","map","item","key","DropdownItem","ref","el","onClick","itemRef","prevOpen","focus","onItemClick","propTypes","PropTypes","DriftEmptyState","EmptyState","Title","headingLevel","size","formatMessage","messages","EmptyStateBody","Button","variant","DriftCard","dispatch","useDispatch","navigateTo","useChromePush","id","startDate","getDate","endDate","activeDrift","setActiveDrift","driftEvents","useSelector","DashboardStore","driftEventFetchStatus","useCallback","dropDownItem","AppActions","appIds","ActionTypes","includePayload","ExpandableCardTemplate","className","appName","title","body","Flex","FlexItem","TemplateCard","align","default","Bullseye","Spinner","baselineDetail","length","direction","alignItems","justifyContent","numEvents","TextContent","component","e","href","Divider","DataList","isCompact","slice","baseline","index","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","wrapModifier","DataListWrapModifier","Text","TextVariants","baselineId","baselineName","color","systems","Tooltip","content","buildCompareUrl","fetchDrift","routerParams"],"sourceRoot":""}