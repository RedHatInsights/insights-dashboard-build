{"version":3,"file":"js/DashboardRoute.1671192789469.5f75e3ffb62914289c53.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/PresentationalComponents/IconList/IconList.js","webpack:///./src/PresentationalComponents/IconList/IconListItem.js","webpack:///./src/PresentationalComponents/MarketingBanner/MarketingBanner.js","webpack:///./src/PresentationalComponents/ZeroState/ZeroState.js","webpack:///./src/Utilities/Common.js","webpack:///./src/Utilities/hooks/useChromePush.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { UI_BASE } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const navigateTo = useChromePush();\n    const waitingForDataUrl = `${UI_BASE}/ros?with_waiting_for_data=true`;\n    const suggestionsUrl = `${UI_BASE}/ros?with_suggestions=true`;\n    const allSystemsUrl = `${UI_BASE}/ros`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <a onClick={e => navigateTo(e, waitingForDataUrl)} href={waitingForDataUrl}>\n                                                            <span className='pf-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </a>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <a onClick={e => navigateTo(e, suggestionsUrl)} href={suggestionsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <a onClick={e => navigateTo(e, allSystemsUrl)} href={allSystemsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <Button\n                                        variant='secondary'\n                                        isSmall component='a'\n                                        onClick={e => navigateTo(e, `${UI_BASE}/ros`)}\n                                        href={ `${UI_BASE}/ros`}>\n                                        {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                    </Button>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard));\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext } from 'react';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport { PermissionContext } from '../../App';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst SubscriptionsUtilizedCard = lazy(() => import('../../SmartComponents/SubscriptionsUtilized/SubscriptionsUtilizedCard'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\n//We will be using this later. commenting out for now.\nconst Dashboard = (/*{ workloads }*/) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n    const { isFedramp } = useChrome();\n\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n\n    return permission.hasSystems ?\n        <React.Fragment>\n            <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-screen-reader\">\n                    {intl.formatMessage(messages.dashboardTitle)}\n                </Title>\n                <Suspense fallback={ <Loading /> }>\n                    <SystemInventoryHeader />\n                </Suspense>\n            </PageSection>\n            <PageSection isFilled={true} isWidthLimited>\n                <Grid hasGutter>\n                    <Suspense fallback={ <Loading /> }>\n                        {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                            <NewRules />\n                        </GridItem> }\n                    </Suspense>\n                    <Masonry\n                        breakpointCols={breakpointColumnsObj}\n                        className=\"ins-l-masonry\"\n                        columnClassName=\"ins-l-masonry_column\"\n                    >\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.vulnerability &&\n                                <VulnerabilityCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.advisor &&\n                                <AdvisorCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.compliance &&\n                                <ComplianceCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.remediations &&\n                                <RemediationsCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.patch &&\n                                <PatchManagerCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.ros &&\n                                <ResourceOptimizationCard/>\n                            }\n                        </Suspense>\n                        <Suspense>\n                            {permission.drift && permission.notifications\n                            && <DriftCard/>}\n                        </Suspense>\n                        {!isFedramp && (\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.subscriptions &&\n                                <SubscriptionsUtilizedCard />\n                                }\n                            </Suspense>\n                        )}\n                    </Masonry>\n                </Grid>\n            </PageSection>\n            <Footer supportsSap={ true }/>\n        </React.Fragment>\n        : <ZeroState />;\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    Title\n} from '@patternfly/react-core/dist/esm/components/';\n\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <CardActions { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </CardActions>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        <CardActions>\n            { children }\n            { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n            }\n        </CardActions>\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","import './_icon-list.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconList = ({ iconListStyle, className, children }) => {\n    const IconListClasses = classNames(className, 'insd-c-icon-list');\n\n    return <ul className={ IconListClasses } style={ iconListStyle }>\n        {children}\n    </ul>;\n};\n\nexport default IconList;\n\nIconList.propTypes = {\n    children: propTypes.any.isRequired,\n    iconListStyle: propTypes.string,\n    className: propTypes.string\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconListItem = ({ className, iconListItemStyle, children }) => {\n    const IconListItemClasses = classNames(className, 'insd-c-icon-list__item');\n\n    return <li className={ IconListItemClasses } style={ iconListItemStyle }>\n        {children}\n    </li>;\n};\n\nexport default IconListItem;\n\nIconListItem.propTypes = {\n    className: propTypes.string,\n    iconListItemStyle: propTypes.string,\n    children: propTypes.any.isRequired\n};\n","import './_marketing-banner.scss';\n\nimport { PageSection } from '@patternfly/react-core';\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst MarketingBanner = ({ className, hasGraphic, graphicRight, dark1000, fullBleed, style, children }) => {\n\n    const MarketingBannerSectionClasses = classNames(\n        className,\n        'insd-c-marketing-banner',\n        { [`insd-m-with-graphic`]: hasGraphic },\n        { [`insd-m-graphic-right`]: graphicRight },\n        { [`insd-m-dark-1000 pf-m-dark-1000`]: dark1000 },\n        { [`insd-m-full-bleed`]: fullBleed }\n    );\n\n    return <PageSection\n        className={ MarketingBannerSectionClasses }\n        style={ style }\n        isWidthLimited>\n        {children}\n    </PageSection>;\n};\n\nexport default MarketingBanner;\n\nMarketingBanner.propTypes = {\n    children: propTypes.any.isRequired,\n    className: propTypes.string,\n    style: propTypes.any,\n    graphicRight: propTypes.bool,\n    hasGraphic: propTypes.bool,\n    dark1000: propTypes.bool,\n    fullBleed: propTypes.bool,\n    isWidthLimited: propTypes.bool\n};\n","import './_zero-state.scss';\n\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    List,\n    ListItem,\n    PageSection,\n    TextContent,\n    Title\n} from '@patternfly/react-core/dist/esm/components/index';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport API from '../../Utilities/Api';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport IconList from '../IconList/IconList';\nimport IconListItem from '../IconList/IconListItem';\nimport ImgInsSmartMgmt from '../../images/img__ins-and-sm.png';\nimport MarketingBanner from '../MarketingBanner/MarketingBanner';\nimport { UI_BASE } from '../../AppConstants';\nimport { VULNERABILITIES_CVES_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\n// eslint-disable-next-line no-unused-vars\nconst SortableTable = () => {\n    const columns = [\n        { title: 'CVE ID', transforms: [sortable] },\n        { title: 'Publish Date', transforms: [sortable] },\n        { title: 'Impact', transforms: [sortable] },\n        { title: 'CVSS Base Score', transforms: [sortable] }\n    ];\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSort] = useState({});\n    const dateFormatter = (date) => {\n        const newDate = (new Date(date)).toString().split(' ');\n        return `${newDate[2]} ${newDate[1]} ${newDate[3]}`;\n    };\n\n    const rowBuilder = data => data.map(row => [{\n        title: <a href={ ` https://access.redhat.com/security/cve/${row.id}` }\n            target='_blank' rel='noreferrer'>{row.id}</a>\n    },\n    { title: <span>{dateFormatter(row.attributes.public_date)}</span> },\n    { title: <span>{row.attributes.impact}</span> },\n    { title: <span>{row.attributes.cvss3_score}</span> }]);\n    // const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchCves = async () => {\n            try {\n                const cves = (await API.get(VULNERABILITIES_CVES_URL, {}, { sort: '-public_date', limit: 4 })).data;\n                setRows(rowBuilder(cves.data));\n            } catch (error) {\n                throw `${error}`;\n            }\n        };\n\n        fetchCves();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onSort = (_event, index, direction) => {\n        const sortedRows = rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n        setSort({ index, direction });\n        setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n    };\n\n    return <Table aria-label='Sortable Table' sortBy={ sortBy } onSort={ onSort } cells={ columns } rows={ rows }>\n        <TableHeader />\n        <TableBody />\n    </Table>;\n};\n\nconst ZeroState = () => {\n    const intl = useIntl();\n\n    return <div className='insd-c-marketing-page'>\n        <MarketingBanner\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            isWidthLimited\n            style={ {\n                '--ins-c-marketing-banner--graphic--width-on-md': '200px',\n                '--ins-c-marketing-banner--graphic--width-on-xl': '400px'\n            } }>\n            <Grid>\n                <GridItem>\n                    <Flex direction={ { default: 'column' } }>\n                        <FlexItem>\n                            <Title headingLevel='h1' size='2xl'>\n                                {intl.formatMessage(messages.noSystemsTitle)}\n                            </Title>\n                        </FlexItem>\n                        <FlexItem spacer={ { default: 'spacer2xl' } }>\n                            <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <p className='ins-c-text--black-400'>{intl.formatMessage(messages.singleConsistent)}</p>\n                            </div>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                isLarge\n                                component='a'\n                                variant='primary'\n                                href={ `${UI_BASE}/registration` }>\n                                {intl.formatMessage(messages.registerYourSystems)}\n                            </Button>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                className='pf-m-plain'\n                                component='a'\n                                variant='secondary'\n                                target='_blank'\n                                rel='noreferrer'\n                                href='https://www.redhat.com/en/technologies/management/insights'>\n                                {intl.formatMessage(messages.learnmoreRHI)}&nbsp;&nbsp;&nbsp;\n                                <ArrowRightIcon />\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </GridItem>\n            </Grid>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Grid lg={ 6 } hasGutter>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zslblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zslblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zslblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zsrblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zsrblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n            </Grid>\n        </PageSection>\n        <MarketingBanner\n            isWidthLimited='true'\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            style={ {\n                '--ins-c-marketing-banner--graphic--width': '400px'\n            } }>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerLg' } }>\n                    <Title headingLevel='h3' size='lg'>\n                        {intl.formatMessage(messages.dataPrivacyAndControlsTitle)}\n                    </Title>\n                </FlexItem>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <p className='insd-c-width-limiter ins-c-text--black-400'\n                        style={ { '--insd-c-width-limiter--MaxWidth': '70ch' } }>\n                        {intl.formatMessage(messages.dataPrivacyAndControls)}\n                    </p>\n                </FlexItem>\n                <FlexItem>\n                    <Button\n                        component='a'\n                        target='_blank'\n                        rel='noreferrer'\n                        href={ `./security/insights` }>\n                        {intl.formatMessage(messages.securityRedirect)}\n                    </Button>\n                </FlexItem>\n            </Flex>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <TextContent>\n                        <Title headingLevel='h3'>\n                            {intl.formatMessage(messages.insightsandsmartmanagement)}\n                        </Title>\n                        <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '900px' } }>\n                            <p>{intl.formatMessage(messages.smartManagement)}</p>\n                        </div>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem>\n                    <Grid hasGutter>\n                        <GridItem md={ 6 } lg={ 5 } mdRowSpan={ 3 }>\n                            <img src={ ImgInsSmartMgmt } alt='Insights Smart Management' />\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 }>\n                            <div className='insd-c-width-limiter pf-u-pt-lg-on-lg' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <List>\n                                    <ListItem>{intl.formatMessage(messages.rhm1)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm2)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm3)}</ListItem>\n                                </List>\n                            </div>\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 } className='pf-u-pl-lg'>\n                            <Flex>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/technologies/management/smart-management'>\n                                        {intl.formatMessage(messages.learnmore)}\n                                    </Button>\n                                </FlexItem>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/contact'>\n                                        {intl.formatMessage(messages.contactsales)}\n                                    </Button>\n                                </FlexItem>\n                            </Flex>\n                        </GridItem>\n                    </Grid>\n                </FlexItem>\n            </Flex>\n        </PageSection>\n    </div>;\n};\n\nexport default ZeroState;\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst globalFilters = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n            && { ansible: 'not_nil' },\n        ...workloads?.['Microsoft SQL']?.isSelected\n            && { mssql: 'not_nil' },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, globalFilters, supportsGlobalFilter };\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport const useChromePush = () => {\n    const push = useChrome(({ chromeHistory: { push } = {} }) => push);\n    return (e, link) => {\n        if (typeof push === 'function') {\n            e.preventDefault();\n            push(link.replace(/^.\\//, '/'));\n        }\n    };\n};\n"],"names":["className","ResourceOptimizationCard","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","intl","useIntl","useEffect","navigateTo","useChromePush","waitingForDataUrl","UI_BASE","suggestionsUrl","allSystemsUrl","ExpandableCardTemplate","appName","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","TemplateCard","success","Flex","direction","default","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","onClick","e","href","with_suggestions","count","FlexItem","Button","variant","isSmall","component","Loading","FailState","propTypes","PropTypes","routerParams","connect","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","SubscriptionsUtilizedCard","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","permission","useContext","PermissionContext","newRules","useSelector","vulnerabilities","recent_rules","isFedramp","useChrome","hasSystems","PageSection","isWidthLimited","PageSectionVariants","Title","headingLevel","size","Suspense","fallback","isFilled","Grid","hasGutter","length","vulnerability","GridItem","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","notifications","subscriptions","supportsSap","ZeroState","workloads","workloadsPropType","EmptyStateVariant","checkState","warning","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","React","header","hasDivider","props","useState","expanded","setExpanded","id","inset","md","onExpand","toggleButtonProps","footer","icon","children","Card","TemplateCardActions","downloadReport","iconInlineMessage","iconInlineState","CardActions","TemplateCardHeader","onDownload","subtitle","CardHeader","CardTitle","titleClassName","TemplateCardBody","isHorizontalLayout","CardBody","IconList","iconListStyle","IconListClasses","classNames","style","IconListItem","iconListItemStyle","IconListItemClasses","MarketingBanner","hasGraphic","graphicRight","dark1000","fullBleed","MarketingBannerSectionClasses","spacer","isLarge","target","rel","lg","height","TextContent","mdRowSpan","src","ImgInsSmartMgmt","alt","List","ListItem","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","error","prop","Error","keys","Object","some","key","includes","find","foundIncorrect","values","findIndex","isSelected","undefined","globalFilters","SID","generateFilter","system_profile","SAP","sap_system","ansible","mssql","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","value","reduce","res","cur","entries","push","chromeHistory","link","preventDefault","replace"],"sourceRoot":""}