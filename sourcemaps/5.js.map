{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/ConfigAssessmentCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactIcons","_reactCore","AppActions","ConfigAssessmentCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchConfigAssessment","_props","configAssessmentFetchStatus","configAssessment","severities","Array","severity","label","some","element","rules","push","value","length","_react2","createElement","Card","className","CardHeader","Title","size","CardBody","isArray","map","key","ExclamationCircleIcon","ExclamationTriangleIcon","ExclamationIcon","getIcon","href","_Loading2","CheckCircleIcon","CardFooter","total","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url"],"mappings":"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","file":"js/5.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon, ExclamationTriangleIcon, ExclamationIcon\n} from '@patternfly/react-icons';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Title\n} from '@patternfly/react-core';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * Configuration Assessment for showing 2 highest categories with rule hits\n */\nclass ConfigAssessmentCard extends Component {\n\n    constructor (props) {\n        super(props);\n    }\n\n    componentDidMount () {\n        this.props.fetchConfigAssessment();\n    }\n\n    render() {\n        const {\n            configAssessmentFetchStatus,\n            configAssessment\n        } = this.props;\n\n        let severities = new Array();\n\n        if (configAssessmentFetchStatus === 'fulfilled') {\n            // iterate over rules.severities and push to topSeverities if value > 0 in order of greatest to least\n            // break after 2 items have been added\n            [\n                { severity: 'Critical', label: 'Critical' },\n                { severity: 'Error', label: 'High' },\n                { severity: 'Warn', label: 'Medium' },\n                { severity: 'Info', label: 'Low' }\n            ].some(element => {\n                if (configAssessment.rules.severity[element.severity] > 0) {\n                    severities.push({\n                        label: element.label,\n                        value: configAssessment.rules.severity[element.severity]\n                    });\n                    if (severities.length > 1) {\n                        return true;\n                    }\n                }\n            });\n        }\n\n        function getIcon (label) {\n            switch (label) {\n                case 'Critical':\n                    return <ExclamationCircleIcon className='ins-c-summary__icon ins-c-summary__icon-critical' />;\n                case 'High':\n                    return <ExclamationTriangleIcon className='ins-c-summary__icon ins-c-summary__icon-high' />;\n                case 'Medium':\n                    return <ExclamationTriangleIcon className='ins-c-summary__icon ins-c-summary__icon-medium' />;\n                case 'Low':\n                    return <ExclamationIcon className='ins-c-summary__icon ins-c-summary__icon-low' />;\n            }\n        }\n\n        return (\n            <Card className='ins-c-card__config-assessment'>\n                <CardHeader>\n                    <Title className=\"pf-u-mt-0 pf-u-mb-0\" size={'lg'}>Configuration Assessment</Title>\n                </CardHeader>\n                <CardBody>\n                    { configAssessmentFetchStatus === 'fulfilled' && Array.isArray(severities) && severities.length > 0 && (\n                        severities.map(element =>\n                            <div className='ins-c-summary' key={ element.label }>\n                                { getIcon(element.label) }\n                                <span className='ins-c-summary__emphasis'>{ element.value }</span>\n                                <span className='ins-c-summary__label'>\n                                    <a href={ '/' + release + '/platform/advisor/' }>{ element.label } Rule Hits</a>\n                                </span>\n                            </div>\n                        )\n                    ) }\n                    { configAssessmentFetchStatus === 'pending' && (<Loading/>) }\n                    { configAssessmentFetchStatus === 'fulfilled' && (!Array.isArray(severities) || severities.length === 0) && (\n                        <div className='ins-c-summary'>\n                            <CheckCircleIcon className='ins-c-summary__icon ins-c-summary__icon-check' />\n                            <span className='ins-c-summary__label'>You have no issues</span>\n                        </div>\n                    ) }\n                </CardBody>\n                <CardFooter>\n                    <a href={ '/' + release + '/platform/advisor/' }>\n                        View All{ configAssessment.rules && configAssessment.rules.total > 0 ?\n                            ` ${configAssessment.rules.total} ` : ''} Rule Hits\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nConfigAssessmentCard.propTypes = {\n    fetchConfigAssessment: PropTypes.func,\n    configAssessment: PropTypes.object,\n    configAssessmentFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    configAssessment: state.DashboardStore.configAssessment,\n    configAssessmentFetchStatus: state.DashboardStore.configAssessmentFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchConfigAssessment: (url) => dispatch(AppActions.fetchConfigAssessment(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ConfigAssessmentCard));\n"],"sourceRoot":""}