{"version":3,"file":"js/DashboardRoute.1682454543485.040f148ea26bf392cad0.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/Utilities/Common.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { UI_BASE } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const waitingForDataUrl = `${UI_BASE}/ros?with_waiting_for_data=true`;\n    const suggestionsUrl = `${UI_BASE}/ros?with_suggestions=true`;\n    const allSystemsUrl = `${UI_BASE}/ros`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <a href={waitingForDataUrl}>\n                                                            <span className='pf-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </a>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <a href={suggestionsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <a href={allSystemsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <Button\n                                        variant='secondary'\n                                        isSmall component='a'\n                                        href={ `${UI_BASE}/ros`}>\n                                        {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                    </Button>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard));\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport { PermissionContext } from '../../App';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\n//We will be using this later. commenting out for now.\nconst Dashboard = (/*{ workloads }*/) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n\n    return permission.hasSystems ?\n        <React.Fragment>\n            <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-screen-reader\">\n                    {intl.formatMessage(messages.dashboardTitle)}\n                </Title>\n                <Suspense fallback={ <Loading /> }>\n                    <SystemInventoryHeader />\n                </Suspense>\n            </PageSection>\n            <PageSection isFilled={true} isWidthLimited>\n                <Grid hasGutter>\n                    <Suspense fallback={ <Loading /> }>\n                        {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                            <NewRules />\n                        </GridItem> }\n                    </Suspense>\n                    <Masonry\n                        breakpointCols={breakpointColumnsObj}\n                        className=\"ins-l-masonry\"\n                        columnClassName=\"ins-l-masonry_column\"\n                    >\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.vulnerability &&\n                                <VulnerabilityCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.advisor &&\n                                <AdvisorCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.compliance &&\n                                <ComplianceCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.remediations &&\n                                <RemediationsCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.patch &&\n                                <PatchManagerCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.ros &&\n                                <ResourceOptimizationCard/>\n                            }\n                        </Suspense>\n                        <Suspense>\n                            {permission.drift && permission.notifications\n                            && <DriftCard/>}\n                        </Suspense>\n                    </Masonry>\n                </Grid>\n            </PageSection>\n            <Footer supportsSap={ true }/>\n        </React.Fragment>\n        :\n        <ZeroState/>;\n\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    Title\n} from '@patternfly/react-core/dist/esm/components/';\n\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <CardActions { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </CardActions>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        <CardActions>\n            { children }\n            { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n            }\n        </CardActions>\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst globalFilters = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n            && { ansible: 'not_nil' },\n        ...workloads?.['Microsoft SQL']?.isSelected\n            && { mssql: 'not_nil' },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, globalFilters, supportsGlobalFilter };\n"],"names":["className","ResourceOptimizationCard","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","intl","useIntl","useEffect","waitingForDataUrl","UI_BASE","suggestionsUrl","allSystemsUrl","ExpandableCardTemplate","appName","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","TemplateCard","success","Flex","direction","default","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","href","with_suggestions","count","FlexItem","Button","variant","isSmall","component","Loading","FailState","propTypes","PropTypes","routerParams","connect","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","permission","useContext","PermissionContext","newRules","useSelector","vulnerabilities","recent_rules","hasSystems","PageSection","isWidthLimited","PageSectionVariants","Title","headingLevel","size","Suspense","fallback","isFilled","Grid","hasGutter","length","vulnerability","GridItem","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","notifications","supportsSap","ZeroState","workloads","workloadsPropType","EmptyStateVariant","checkState","warning","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","React","header","hasDivider","props","useState","expanded","setExpanded","id","inset","md","onExpand","toggleButtonProps","footer","icon","children","Card","TemplateCardActions","downloadReport","iconInlineMessage","iconInlineState","CardActions","TemplateCardHeader","onDownload","subtitle","CardHeader","CardTitle","onClick","titleClassName","TemplateCardBody","isHorizontalLayout","CardBody","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","error","prop","Error","keys","Object","some","key","includes","find","foundIncorrect","values","findIndex","isSelected","undefined","globalFilters","SID","generateFilter","system_profile","SAP","sap_system","ansible","mssql","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","value","reduce","res","cur","entries"],"sourceRoot":""}