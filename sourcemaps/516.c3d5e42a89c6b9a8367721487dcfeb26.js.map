{"version":3,"file":"js/516.1649776931453.b3d87eb9e700ab306f62.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateSecondaryActions.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Select/selectConstants.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js","webpack:///./src/PresentationalComponents/FilterNotSupported.js","webpack:///./src/SmartComponents/Compliance/ComplianceCard.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStateSecondaryActions = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStateSecondary, className) }, props), children));\n};\nEmptyStateSecondaryActions.displayName = 'EmptyStateSecondaryActions';\n//# sourceMappingURL=EmptyStateSecondaryActions.js.map","import * as React from 'react';\nexport const SelectContext = React.createContext(null);\nexport const SelectProvider = SelectContext.Provider;\nexport const SelectConsumer = SelectContext.Consumer;\nexport var SelectVariant;\n(function (SelectVariant) {\n    SelectVariant[\"single\"] = \"single\";\n    SelectVariant[\"checkbox\"] = \"checkbox\";\n    SelectVariant[\"typeahead\"] = \"typeahead\";\n    SelectVariant[\"typeaheadMulti\"] = \"typeaheadmulti\";\n})(SelectVariant || (SelectVariant = {}));\nexport var SelectDirection;\n(function (SelectDirection) {\n    SelectDirection[\"up\"] = \"up\";\n    SelectDirection[\"down\"] = \"down\";\n})(SelectDirection || (SelectDirection = {}));\nexport const KeyTypes = {\n    Tab: 'Tab',\n    Space: ' ',\n    Escape: 'Escape',\n    Enter: 'Enter',\n    ArrowUp: 'ArrowUp',\n    ArrowDown: 'ArrowDown',\n    ArrowLeft: 'ArrowLeft',\n    ArrowRight: 'ArrowRight'\n};\n//# sourceMappingURL=selectConstants.js.map","import { createIcon } from '../createIcon';\n\nexport const SearchIconConfig = {\n  name: 'SearchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SearchIcon = createIcon(SearchIconConfig);\n\nexport default SearchIcon;","import './FilterNotSupported.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FilterNotSupported = ({ href, title, appName }) => {\n    const intl = useIntl();\n\n    return <EmptyState>\n        <EmptyStateIcon className='fontSizeOverride' icon={ SearchIcon } />\n        <Title headingLevel=\"h4\" size=\"md\">{title} </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(appName !== 'Vulnerability' ? messages.functionalityNotSupported : messages.filteredResultsInApp, {\n                appname: <Button\n                    component=\"a\"\n                    href={ href }\n                    variant=\"link\"\n                    isInline>\n                    {appName}\n                </Button>\n            })}\n        </EmptyStateBody>\n    </EmptyState>;\n};\n\nFilterNotSupported.propTypes = {\n    appName: PropTypes.string,\n    href: PropTypes.string,\n    title: PropTypes.string\n};\n\nexport default FilterNotSupported;\n\n","import './ComplianceCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport React, { useEffect } from 'react';\nimport { TemplateCardActions, TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport { supportsGlobalFilter, workloadsPropType } from '../../Utilities/Common';\n\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport FilterNotSupported from '../../PresentationalComponents/FilterNotSupported';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst ComplianceCard = ({ fetchCompliance, complianceFetchStatus, complianceSummary, selectedTags, workloads, SID }) => {\n    useEffect(() => {\n        fetchCompliance();\n    }, [fetchCompliance]);\n\n    const intl = useIntl();\n\n    /*\n        * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n        * complianceSummary\n        */\n    const getTopThreePolicies = function (compliance) {\n        const complianceTopThree = compliance.data.length > 1 ? compliance.data.slice(0, 3) :\n            compliance.data.slice();\n\n        return complianceTopThree;\n    };\n\n    const navigateTo = useChromePush();\n\n    return (\n        <ExpandableCardTemplate\n            appName='Compliance'\n            className='ins-c-card__compliance insd-m-toggle-right-on-md'\n            { ...complianceFetchStatus !== 'pending' ? {\n                'data-ouia-safe': true\n            } : { 'data-ouia-safe': false } }\n            title={ intl.formatMessage(messages.complianceTitle) }\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_compliance') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_compliance', isExpanded)}\n            header={\n                <TemplateCardActions />\n            }\n            body={\n                <TemplateCardBody>\n                    {supportsGlobalFilter(selectedTags, workloads, SID) ?\n                        <React.Fragment>\n                            {complianceFetchStatus === 'fulfilled' &&\n                                (Array.isArray(complianceSummary.data) &&\n                                    (complianceSummary.data.length > 0 ? <React.Fragment>\n                                        <DataList className='insd-m-no-padding insd-m-no-top-border' isCompact>\n                                            {getTopThreePolicies(complianceSummary).map((policy, index) =>\n                                                <DataListItem key={ index }>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <DataListCell key={ index }>\n                                                                    <Flex\n                                                                        direction={ { default: 'column' } }\n                                                                        spaceItems={ { default: 'spaceItemsNone' } }\n                                                                    >\n                                                                        <Button\n                                                                            id={ `compliance-link-${index + 1}` }\n                                                                            className='ins-c-compliance__policy-link'\n                                                                            component='a'\n                                                                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/reports/${policy.id}`)}\n                                                                            href={ `${UI_BASE}/compliance/reports/${policy.id}` }\n                                                                            variant='link'\n                                                                            isInline\n                                                                        >\n                                                                            {policy.attributes.name}\n                                                                        </Button>\n                                                                        <Flex>\n                                                                            <FlexItem flex={ { default: 'flex_1' } }>\n                                                                                <p>RHEL { policy.attributes.os_version }</p>\n                                                                            </FlexItem>\n                                                                            <Flex flex={{ default: 'None' }}>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantHostCount,\n                                                                                        { count: policy.attributes.test_result_host_count }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantScore,\n                                                                                        {\n                                                                                            score: +(policy.attributes.test_result_host_count &&\n                                                                                                (100 * (\n                                                                                                    policy.attributes.compliant_host_count /\n                                                                                                    policy.attributes.test_result_host_count\n                                                                                                ))\n                                                                                            ).toFixed(1)\n                                                                                        }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                            </Flex>\n                                                                        </Flex>\n                                                                    </Flex>\n                                                                </DataListCell>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                        <Button\n                                            className='ins-c-compliance__policy-link'\n                                            component='a'\n                                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/reports/`)}\n                                            href={ `${UI_BASE}/compliance/reports/` }\n                                            variant='link'\n                                            isInline\n                                        >\n                                            {complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                                                complianceSummary.data.length - 3 >= 1 &&\n                                                `${complianceSummary.data.length - 3} more reports`\n                                            }\n                                        </Button>\n                                    </React.Fragment> : (\n                                        <EmptyState className='ins-c-compliance__empty-state' variant={ EmptyStateVariant.full }>\n                                            <Title headingLevel='h5' size='md'>\n                                                {intl.formatMessage(messages.complianceEmptyStateTitle)}\n                                            </Title>\n                                            <EmptyStateBody>\n                                                {intl.formatMessage(messages.complianceEmptyStateBody)}\n                                            </EmptyStateBody>\n                                            <EmptyStateSecondaryActions>\n                                                <Button\n                                                    variant='link'\n                                                    onClick={e => navigateTo(e, `${UI_BASE}/compliance/scappolicies/new`)}\n                                                    href={ `${UI_BASE}/compliance/scappolicies/new` }\n                                                    component='a'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction1)}\n                                                </Button>\n                                                <Button\n                                                    variant='link'\n                                                    component='a'\n                                                    href='https://www.open-scap.org/getting-started/'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction2)}\n                                                </Button>\n                                            </EmptyStateSecondaryActions>\n                                        </EmptyState>\n                                    ))\n                                )\n                            }\n                            {complianceFetchStatus === 'pending' && (<Loading />)}\n                            {complianceFetchStatus === 'rejected' && <FailState appName='Compliance' />}\n                        </React.Fragment>\n                        : <FilterNotSupported\n                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/`)}\n                            href={ `${UI_BASE}/compliance/` }\n                            title={ intl.formatMessage(messages.filterNotApplicable) }\n                            appName={ intl.formatMessage(messages.complianceTitle) }\n                        />\n                    }\n                </TemplateCardBody>\n            }\n        />\n    );\n};\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.array,\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    complianceSummary: DashboardStore.complianceSummary,\n    complianceFetchStatus: DashboardStore.complianceFetchStatus,\n    selectedTags: DashboardStore.selectedTags,\n    workloads: DashboardStore.workloads,\n    SID: DashboardStore.SID\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"names":["EmptyStateSecondaryActions","_a","children","className","props","Object","assign","displayName","SelectContext","SelectProvider","Provider","SelectConsumer","Consumer","SelectVariant","SelectDirection","KeyTypes","Tab","Space","Escape","Enter","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","name","height","width","svgPath","yOffset","xOffset","FilterNotSupported","href","title","appName","intl","useIntl","icon","SearchIcon","headingLevel","size","formatMessage","messages","appname","component","variant","isInline","propTypes","PropTypes","ComplianceCard","fetchCompliance","complianceFetchStatus","complianceSummary","selectedTags","workloads","SID","useEffect","compliance","navigateTo","useChromePush","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","header","body","supportsGlobalFilter","Array","isArray","data","length","isCompact","slice","map","policy","index","key","dataListCells","direction","default","spaceItems","id","onClick","e","UI_BASE","attributes","flex","os_version","count","test_result_host_count","score","compliant_host_count","toFixed","EmptyStateVariant","workloadsPropType","routerParams","connect","DashboardStore","dispatch","url","AppActions"],"sourceRoot":""}