{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/ComplianceCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactCore","_reactIcons","AppActions","ComplianceCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchCompliance","compliance","_props","complianceFetchStatus","complianceSummary","_react2","createElement","Card","className","CardHeader","Title","size","CardBody","Stack","Array","isArray","data","length","slice","map","element","StackItem","gutter","key","id","Split","SplitItem","attributes","score","Gauge","label","name","value","width","height","timeframe","identifier","href","compliant_host_count","total_host_count","EmptyState","EmptyStateIcon","icon","ClipboardCheckIcon","EmptyStateBody","_Loading2","CardFooter","release","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url","fetchComplianceSummary"],"mappings":"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","file":"js/4.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams, Gauge } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon\n} from '@patternfly/react-core';\n\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass ComplianceCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchCompliance();\n    }\n\n    render() {\n\n        /*\n         * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n         * complianceSummary\n         */\n        const getTopTwoPolicies = function (compliance) {\n            const complianceTopTwo = compliance.data.length > 1 ? compliance.data.slice(0, 2) :\n                compliance.data.slice();\n\n            return complianceTopTwo;\n        };\n\n        const {\n            complianceFetchStatus,\n            complianceSummary\n        } = this.props;\n\n        return (\n            <Card className='ins-c-card__compliance'>\n                <CardHeader>\n                    <Title size={'lg'}>Compliance</Title>\n                </CardHeader>\n                <CardBody>\n                    <Stack>\n                        { complianceFetchStatus === 'fulfilled' &&\n                            (Array.isArray(complianceSummary.data) &&\n                                (complianceSummary.data.length > 0 ? (\n                                    getTopTwoPolicies(complianceSummary).map(element =>\n                                        <StackItem gutter='sm' key={ element.id }>\n                                            <Split gutter='md' key={ element.id }>\n                                                <SplitItem className='ins-c-gauge pf-u-text-align-center'>\n                                                    <div className='ins-c-gauge__metrics-percentage'>\n                                                        { element.attributes.score * 100 }%\n                                                    </div>\n                                                    <Gauge label={ element.attributes.name }\n                                                        value={ element.attributes.score * 100 } width={ 82 } height={ 82 }\n                                                        timeframe='30'\n                                                        identifier={ `compliance-gauge-${ element.id }` } />\n                                                </SplitItem>\n                                                <SplitItem>\n                                                    <Stack>\n                                                        <StackItem>\n                                                            <a href={ `/${release}/compliance/policies/` }>{ element.attributes.name }</a>\n                                                        </StackItem>\n                                                        <StackItem>\n                                                            { element.attributes.compliant_host_count } of\n                                                            &nbsp;{ element.attributes.total_host_count } systems</StackItem>\n                                                    </Stack>\n                                                </SplitItem>\n                                            </Split>\n                                        </StackItem>\n                                    )\n                                ) : (\n                                    <EmptyState>\n                                        <EmptyStateIcon icon={ClipboardCheckIcon}/>\n                                        <EmptyStateBody> You have not uploaded any reports yet </EmptyStateBody>\n                                    </EmptyState>\n                                ))\n                            )\n                        }\n                        { complianceFetchStatus === 'pending' && (<Loading/>) }\n                    </Stack>\n                </CardBody>\n                <CardFooter>\n                    <a href={ `${release}/compliance/policies/` }>\n                        View All{ complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                            complianceSummary.data.length > 1 ? ` ${complianceSummary.data.length} ` : ' '}\n                            Compliance Policies\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    complianceSummary: state.DashboardStore.complianceSummary,\n    complianceFetchStatus: state.DashboardStore.complianceFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"sourceRoot":""}