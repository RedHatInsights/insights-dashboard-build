{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/ComplianceCard.js"],"names":["ComplianceCard","props","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default","call","fetchCompliance","compliance","_this$props","complianceFetchStatus","complianceSummary","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_11__","_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default","className","data-ouia-safe","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_12__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_13__","size","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_14__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_15__","Array","isArray","data","length","slice","map","element","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_16__","gutter","key","id","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_17__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_18__","Math","trunc","attributes","score","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_9__","label","name","value","width","height","timeframe","identifier","concat","href","UI_BASE","compliant_host_count","total_host_count","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_19__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_20__","icon","ClipboardCheckIcon","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_21__","_PresentationalComponents_Loading_Loading__WEBPACK_IMPORTED_MODULE_25__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_22__","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","DashboardStore","dispatch","url","AppActions"],"mappings":"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","file":"js/4.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams, Gauge } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon\n} from '@patternfly/react-core';\n\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport './_cards.scss';\nimport { UI_BASE } from '../../AppConstants';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass ComplianceCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchCompliance();\n    }\n\n    render() {\n\n        /*\n         * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n         * complianceSummary\n         */\n        const getTopTwoPolicies = function (compliance) {\n            const complianceTopTwo = compliance.data.length > 1 ? compliance.data.slice(0, 2) :\n                compliance.data.slice();\n\n            return complianceTopTwo;\n        };\n\n        const {\n            complianceFetchStatus,\n            complianceSummary\n        } = this.props;\n\n        return (\n            <Card className='ins-c-card__compliance'\n                { ...complianceFetchStatus !== 'pending' ? {\n                    'data-ouia-safe': true\n                } : { 'data-ouia-safe': false } }\n            >\n                <CardHeader>\n                    <Title size={ 'lg' }>Compliance</Title>\n                </CardHeader>\n                <CardBody>\n                    <Stack>\n                        { complianceFetchStatus === 'fulfilled' &&\n                            (Array.isArray(complianceSummary.data) &&\n                                (complianceSummary.data.length > 0 ? (\n                                    getTopTwoPolicies(complianceSummary).map(element =>\n                                        <StackItem gutter='sm' key={ element.id }>\n                                            <Split gutter='md' key={ element.id }>\n                                                <SplitItem className='ins-c-gauge pf-u-text-align-center'>\n                                                    <div className='ins-c-gauge__metrics-percentage'>\n                                                        { Math.trunc(element.attributes.score * 100) }%\n                                                    </div>\n                                                    <Gauge label={ element.attributes.name }\n                                                        value={ Math.trunc(element.attributes.score * 100) } width={ 82 } height={ 82 }\n                                                        timeframe='30'\n                                                        identifier={ `compliance-gauge-${ element.id }` } />\n                                                </SplitItem>\n                                                <SplitItem>\n                                                    <Stack>\n                                                        <StackItem>\n                                                            <a href={ `/${UI_BASE}/compliance/policies/` }>{ element.attributes.name }</a>\n                                                        </StackItem>\n                                                        <StackItem>\n                                                            { element.attributes.compliant_host_count } of\n                                                            &nbsp;{ element.attributes.total_host_count } systems</StackItem>\n                                                    </Stack>\n                                                </SplitItem>\n                                            </Split>\n                                        </StackItem>\n                                    )\n                                ) : (\n                                    <EmptyState>\n                                        <EmptyStateIcon icon={ ClipboardCheckIcon }/>\n                                        <EmptyStateBody> You have not uploaded any reports yet </EmptyStateBody>\n                                    </EmptyState>\n                                ))\n                            )\n                        }\n                        { complianceFetchStatus === 'pending' && (<Loading/>) }\n                    </Stack>\n                </CardBody>\n                <CardFooter>\n                    <a href={ `${UI_BASE}/compliance/policies/` }>\n                        View all{ complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                            complianceSummary.data.length > 1 ? ` ${complianceSummary.data.length} ` : ' ' }\n                            compliance policies\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    complianceSummary: state.DashboardStore.complianceSummary,\n    complianceFetchStatus: state.DashboardStore.complianceFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"sourceRoot":""}