{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/ComplianceCard.js"],"names":["ComplianceCard","props","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","fetchCompliance","compliance","_this$props","complianceFetchStatus","complianceSummary","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_10__","className","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_11__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_12__","size","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_13__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_14__","Array","isArray","data","length","slice","map","element","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_15__","gutter","key","id","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_16__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_17__","attributes","score","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_8__","label","name","value","width","height","timeframe","identifier","concat","href","UI_BASE","compliant_host_count","total_host_count","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_18__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_19__","icon","ClipboardCheckIcon","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_20__","_PresentationalComponents_Loading_Loading__WEBPACK_IMPORTED_MODULE_24__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_21__","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","DashboardStore","dispatch","url","AppActions"],"mappings":"oZA4BMA,cAEF,SAAAA,EAAYC,GAAO,OAAAC,IAAAC,KAAAH,GAAAI,IAAAD,KAAAE,IAAAL,GAAAM,KAAAH,KACTF,qEAINE,KAAKF,MAAMM,mDASX,IAAoCC,EAN/BC,EAgBDN,KAAKF,MAFLS,EAdCD,EAcDC,sBACAC,EAfCF,EAeDE,kBAGJ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,0BACZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAO,MAAd,eAEJP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACgC,cAA1BX,GACGY,MAAMC,QAAQZ,EAAkBa,QAC5Bb,EAAkBa,KAAKC,OAAS,GArBrBjB,EAsBUG,EArBjBH,EAAWgB,KAAKC,OAAS,EAAIjB,EAAWgB,KAAKE,MAAM,EAAG,GAC3ElB,EAAWgB,KAAKE,SAoByCC,IAAI,SAAAC,GAAO,OAC5ChB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWC,OAAO,KAAKC,IAAMH,EAAQI,IACjCpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOH,OAAO,KAAKC,IAAMH,EAAQI,IAC7BpB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAWlB,UAAU,sCACjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mCACkB,IAA3BY,EAAQO,WAAWC,MADzB,KAGAxB,EAAAC,EAAAC,cAACuB,EAAA,MAAD,CAAOC,MAAQV,EAAQO,WAAWI,KAC9BC,MAAmC,IAA3BZ,EAAQO,WAAWC,MAAcK,MAAQ,GAAKC,OAAS,GAC/DC,UAAU,KACVC,WAAU,oBAAAC,OAAwBjB,EAAQI,OAElDpB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACItB,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAAA,KAAGgC,KAAI,IAAAD,OAAOE,IAAP,0BAA0CnB,EAAQO,WAAWI,OAExE3B,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACMD,EAAQO,WAAWa,qBADzB,QAEYpB,EAAQO,WAAWc,iBAF/B,kBASpBrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACItC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAgBC,KAAOC,MACvBzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,kDAKY,YAA1B5C,GAAwCE,EAAAC,EAAAC,cAACyC,EAAA,EAAD,QAGlD3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAAA,KAAGgC,KAAI,GAAAD,OAAME,IAAN,0BAAP,WACwC,cAA1BrC,GAAyCY,MAAMC,QAAQZ,EAAkBa,OAC/Eb,EAAkBa,KAAKC,OAAS,EAD1B,IAAAoB,OACkClC,EAAkBa,KAAKC,OADzD,KACqE,IAFnF,gCA3ESgC,aAsF7BzD,EAAe0D,UAAY,CACvBnD,gBAAiBoD,IAAUC,KAC3BjD,kBAAmBgD,IAAUE,OAC7BnD,sBAAuBiD,IAAUG,QAatBC,iCAAaC,kBAVJ,SAACC,EAAOC,GAAR,OAAAC,IAAA,CACpBxD,kBAAmBsD,EAAMG,eAAezD,kBACxCD,sBAAuBuD,EAAMG,eAAe1D,uBACzCwD,IAGoB,SAAAG,GAAQ,MAAK,CACpC9D,gBAAiB,SAAC+D,GAAD,OAASD,EAASE,IAAkCD,OAG7CN,CAG1BhE","file":"js/4.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams, Gauge } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon\n} from '@patternfly/react-core';\n\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport './_cards.scss';\nimport { UI_BASE } from '../../AppConstants';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass ComplianceCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchCompliance();\n    }\n\n    render() {\n\n        /*\n         * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n         * complianceSummary\n         */\n        const getTopTwoPolicies = function (compliance) {\n            const complianceTopTwo = compliance.data.length > 1 ? compliance.data.slice(0, 2) :\n                compliance.data.slice();\n\n            return complianceTopTwo;\n        };\n\n        const {\n            complianceFetchStatus,\n            complianceSummary\n        } = this.props;\n\n        return (\n            <Card className='ins-c-card__compliance'>\n                <CardHeader>\n                    <Title size={ 'lg' }>Compliance</Title>\n                </CardHeader>\n                <CardBody>\n                    <Stack>\n                        { complianceFetchStatus === 'fulfilled' &&\n                            (Array.isArray(complianceSummary.data) &&\n                                (complianceSummary.data.length > 0 ? (\n                                    getTopTwoPolicies(complianceSummary).map(element =>\n                                        <StackItem gutter='sm' key={ element.id }>\n                                            <Split gutter='md' key={ element.id }>\n                                                <SplitItem className='ins-c-gauge pf-u-text-align-center'>\n                                                    <div className='ins-c-gauge__metrics-percentage'>\n                                                        { element.attributes.score * 100 }%\n                                                    </div>\n                                                    <Gauge label={ element.attributes.name }\n                                                        value={ element.attributes.score * 100 } width={ 82 } height={ 82 }\n                                                        timeframe='30'\n                                                        identifier={ `compliance-gauge-${ element.id }` } />\n                                                </SplitItem>\n                                                <SplitItem>\n                                                    <Stack>\n                                                        <StackItem>\n                                                            <a href={ `/${UI_BASE}/compliance/policies/` }>{ element.attributes.name }</a>\n                                                        </StackItem>\n                                                        <StackItem>\n                                                            { element.attributes.compliant_host_count } of\n                                                            &nbsp;{ element.attributes.total_host_count } systems</StackItem>\n                                                    </Stack>\n                                                </SplitItem>\n                                            </Split>\n                                        </StackItem>\n                                    )\n                                ) : (\n                                    <EmptyState>\n                                        <EmptyStateIcon icon={ ClipboardCheckIcon }/>\n                                        <EmptyStateBody> You have not uploaded any reports yet </EmptyStateBody>\n                                    </EmptyState>\n                                ))\n                            )\n                        }\n                        { complianceFetchStatus === 'pending' && (<Loading/>) }\n                    </Stack>\n                </CardBody>\n                <CardFooter>\n                    <a href={ `${UI_BASE}/compliance/policies/` }>\n                        View All{ complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                            complianceSummary.data.length > 1 ? ` ${complianceSummary.data.length} ` : ' ' }\n                            Compliance Policies\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    complianceSummary: state.DashboardStore.complianceSummary,\n    complianceFetchStatus: state.DashboardStore.complianceFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"sourceRoot":""}