{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/ComplianceCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactCore","AppActions","ComplianceCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchCompliance","_props","complianceFetchStatus","complianceSummary","_react2","createElement","Card","className","CardHeader","Title","size","CardBody","Stack","Array","isArray","data","length","StackItem","map","element","Split","gutter","key","type","SplitItem","attributes","score","Gauge","label","name","value","width","height","timeframe","href","compliant_host_count","total_host_count","_Loading2","CardFooter","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url","fetchComplianceSummary"],"mappings":"2MAAAA,EAAAC,EAAA,cACAA,EAAA,IACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,KAEAG,EAAAH,EAAA,KAOYI,0JAAZJ,EAAA,UACAA,EAAA,yDAEAA,EAAA,KAIA,IASMK,cAEF,SAAAA,EAAYC,GAAO,SAAAC,EAAAC,SAAAC,KAAAJ,IAAA,EAAAK,EAAAF,SAAAC,MAAAJ,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAL,KACTH,wFAING,KAAKH,MAAMS,mDAGN,IAAAC,EAIDP,KAAKH,MAFLW,EAFCD,EAEDC,sBACAC,EAHCF,EAGDE,kBAGJ,OACIC,EAAAX,QAAAY,cAACjB,EAAAkB,KAAD,CAAMC,UAAU,0BACZH,EAAAX,QAAAY,cAACjB,EAAAoB,WAAD,KACIJ,EAAAX,QAAAY,cAACjB,EAAAqB,MAAD,CAAOC,KAAM,MAAb,eAEJN,EAAAX,QAAAY,cAACjB,EAAAuB,SAAD,KACIP,EAAAX,QAAAY,cAACjB,EAAAwB,MAAD,KACgC,cAA1BV,GACEW,MAAMC,QAAQX,EAAkBY,OAASZ,EAAkBY,KAAKC,QAC5DZ,EAAAX,QAAAY,cAACjB,EAAA6B,UAAD,KACKd,EAAkBY,KAAKG,IAAI,SAAAC,GAAA,OACxBf,EAAAX,QAAAY,cAACjB,EAAAgC,MAAD,CAAOC,OAAO,KAAKC,IAAMH,EAAQI,MAC7BnB,EAAAX,QAAAY,cAACjB,EAAAoC,UAAD,CAAWjB,UAAU,sCACjBH,EAAAX,QAAAY,cAAA,OAAKE,UAAU,mCACkB,IAA3BY,EAAQM,WAAWC,MADzB,KAGAtB,EAAAX,QAAAY,cAACnB,EAAAyC,MAAD,CAAOC,MAAQT,EAAQM,WAAWI,KAC9BC,MAAmC,IAA3BX,EAAQM,WAAWC,MAAcK,MAAQ,GAAKC,OAAS,GAC/DC,UAAU,QAElB7B,EAAAX,QAAAY,cAACjB,EAAAoC,UAAD,KACIpB,EAAAX,QAAAY,cAACjB,EAAAwB,MAAD,KACIR,EAAAX,QAAAY,cAACjB,EAAA6B,UAAD,KACIb,EAAAX,QAAAY,cAAA,KAAG6B,KAAA,2CAAuDf,EAAQM,WAAWI,OAEjFzB,EAAAX,QAAAY,cAACjB,EAAA6B,UAAD,KACME,EAAQM,WAAWU,qBADzB,QAEYhB,EAAQM,WAAWW,iBAF/B,kBAUA,YAA1BlC,GAAwCE,EAAAX,QAAAY,cAACgC,EAAA5C,QAAD,QAGlDW,EAAAX,QAAAY,cAACjB,EAAAkD,WAAD,KAAYlC,EAAAX,QAAAY,cAAA,KAAG6B,KAAA,2CAAH,yCAtDCK,aA4D7BjD,EAAekD,UAAY,CACvBxC,gBAAiByC,UAAUC,KAC3BvC,kBAAmBsC,UAAUE,OAC7BzC,sBAAuBuC,UAAUG,mBAatB,EAAA1D,EAAA2D,eAAa,EAAA1D,EAAA2D,SAVJ,SAACC,EAAOC,GAAR,SAAAC,EAAAxD,SAAA,CACpBU,kBAAmB4C,EAAMG,eAAe/C,kBACxCD,sBAAuB6C,EAAMG,eAAehD,uBACzC8C,IAGoB,SAAAG,GAAA,MAAa,CACpCnD,gBAAiB,SAACoD,GAAD,OAASD,EAAS9D,EAAWgE,uBAAuBD,OAG7C,CAG1B9D","file":"js/4.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams, Gauge } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass ComplianceCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchCompliance();\n    }\n\n    render() {\n        const {\n            complianceFetchStatus,\n            complianceSummary\n        } = this.props;\n\n        return (\n            <Card className='ins-c-card__compliance'>\n                <CardHeader>\n                    <Title size={'lg'}>Compliance</Title>\n                </CardHeader>\n                <CardBody>\n                    <Stack>\n                        { complianceFetchStatus === 'fulfilled' && (\n                            Array.isArray(complianceSummary.data) && complianceSummary.data.length && (\n                                <StackItem>\n                                    {complianceSummary.data.map(element =>\n                                        <Split gutter='md' key={ element.type }>\n                                            <SplitItem className='ins-c-gauge pf-u-text-align-center'>\n                                                <div className='ins-c-gauge__metrics-percentage'>\n                                                    { element.attributes.score * 100 }%\n                                                </div>\n                                                <Gauge label={ element.attributes.name }\n                                                    value={ element.attributes.score * 100 } width={ 79 } height={ 79 }\n                                                    timeframe='30' />\n                                            </SplitItem>\n                                            <SplitItem>\n                                                <Stack>\n                                                    <StackItem>\n                                                        <a href={ `/${release}/platform/compliance/policies/` }>{ element.attributes.name }</a>\n                                                    </StackItem>\n                                                    <StackItem>\n                                                        { element.attributes.compliant_host_count } of\n                                                        &nbsp;{ element.attributes.total_host_count } systems</StackItem>\n                                                </Stack>\n                                            </SplitItem>\n                                        </Split>\n                                    )}\n                                </StackItem>\n                            )\n                        ) }\n                        { complianceFetchStatus === 'pending' && (<Loading/>) }\n                    </Stack>\n                </CardBody>\n                <CardFooter><a href={ `/${release}/platform/compliance/policies/` }>View All Compliance Policies</a></CardFooter>\n            </Card>\n        );\n    }\n}\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    complianceSummary: state.DashboardStore.complianceSummary,\n    complianceFetchStatus: state.DashboardStore.complianceFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"sourceRoot":""}