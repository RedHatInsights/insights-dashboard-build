{"version":3,"file":"js/DashboardRoute.1690378692809.074af4854c7046dde4ab.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/IconList/IconList.js","webpack:///./src/PresentationalComponents/IconList/IconListItem.js","webpack:///./src/PresentationalComponents/MarketingBanner/MarketingBanner.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/PresentationalComponents/ZeroState/ZeroState.js","webpack:///./src/Utilities/Common.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { UI_BASE } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const waitingForDataUrl = `${UI_BASE}/ros?with_waiting_for_data=true`;\n    const suggestionsUrl = `${UI_BASE}/ros?with_suggestions=true`;\n    const allSystemsUrl = `${UI_BASE}/ros`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <a href={waitingForDataUrl}>\n                                                            <span className='pf-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </a>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <a href={suggestionsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <a href={allSystemsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <Button\n                                        variant='secondary'\n                                        isSmall component='a'\n                                        href={ `${UI_BASE}/ros`}>\n                                        {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                    </Button>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard));\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext, useEffect } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport { PermissionContext } from '../../App';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\n//We will be using this later. commenting out for now.\nconst Dashboard = (/*{ workloads }*/) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n    const chrome = useChrome();\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`Dashboard | Red Hat Insights`);\n    }, [chrome]);\n\n    return permission.hasSystems ?\n        <React.Fragment>\n            <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-screen-reader\">\n                    {intl.formatMessage(messages.dashboardTitle)}\n                </Title>\n                <Suspense fallback={ <Loading /> }>\n                    <SystemInventoryHeader />\n                </Suspense>\n            </PageSection>\n            <PageSection isFilled={true} isWidthLimited>\n                <Grid hasGutter>\n                    <Suspense fallback={ <Loading /> }>\n                        {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                            <NewRules />\n                        </GridItem> }\n                    </Suspense>\n                    <Masonry\n                        breakpointCols={breakpointColumnsObj}\n                        className=\"ins-l-masonry\"\n                        columnClassName=\"ins-l-masonry_column\"\n                    >\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.vulnerability &&\n                                <VulnerabilityCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.advisor &&\n                                <AdvisorCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.compliance &&\n                                <ComplianceCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.remediations &&\n                                <RemediationsCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.patch &&\n                                <PatchManagerCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.ros &&\n                                <ResourceOptimizationCard/>\n                            }\n                        </Suspense>\n                        <Suspense>\n                            {permission.drift && permission.notifications\n                            && <DriftCard/>}\n                        </Suspense>\n                    </Masonry>\n                </Grid>\n            </PageSection>\n            <Footer supportsSap={ true }/>\n        </React.Fragment>\n        :\n        <ZeroState/>;\n\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import './_icon-list.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconList = ({ iconListStyle, className, children }) => {\n    const IconListClasses = classNames(className, 'insd-c-icon-list');\n\n    return <ul className={ IconListClasses } style={ iconListStyle }>\n        {children}\n    </ul>;\n};\n\nexport default IconList;\n\nIconList.propTypes = {\n    children: propTypes.any.isRequired,\n    iconListStyle: propTypes.string,\n    className: propTypes.string\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconListItem = ({ className, iconListItemStyle, children }) => {\n    const IconListItemClasses = classNames(className, 'insd-c-icon-list__item');\n\n    return <li className={ IconListItemClasses } style={ iconListItemStyle }>\n        {children}\n    </li>;\n};\n\nexport default IconListItem;\n\nIconListItem.propTypes = {\n    className: propTypes.string,\n    iconListItemStyle: propTypes.string,\n    children: propTypes.any.isRequired\n};\n","import './_marketing-banner.scss';\n\nimport { PageSection } from '@patternfly/react-core';\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst MarketingBanner = ({ className, hasGraphic, graphicRight, dark1000, fullBleed, style, children }) => {\n\n    const MarketingBannerSectionClasses = classNames(\n        className,\n        'insd-c-marketing-banner',\n        { [`insd-m-with-graphic`]: hasGraphic },\n        { [`insd-m-graphic-right`]: graphicRight },\n        { [`insd-m-dark-1000 pf-m-dark-1000`]: dark1000 },\n        { [`insd-m-full-bleed`]: fullBleed }\n    );\n\n    return <PageSection\n        className={ MarketingBannerSectionClasses }\n        style={ style }\n        isWidthLimited>\n        {children}\n    </PageSection>;\n};\n\nexport default MarketingBanner;\n\nMarketingBanner.propTypes = {\n    children: propTypes.any.isRequired,\n    className: propTypes.string,\n    style: propTypes.any,\n    graphicRight: propTypes.bool,\n    hasGraphic: propTypes.bool,\n    dark1000: propTypes.bool,\n    fullBleed: propTypes.bool,\n    isWidthLimited: propTypes.bool\n};\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    Title\n} from '@patternfly/react-core/dist/esm/components/';\n\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <CardActions { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </CardActions>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        <CardActions>\n            { children }\n            { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n            }\n        </CardActions>\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","import './_zero-state.scss';\n\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    List,\n    ListItem,\n    PageSection,\n    TextContent,\n    Title\n} from '@patternfly/react-core/dist/esm/components/index';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport API from '../../Utilities/Api';\nimport IconList from '../IconList/IconList';\nimport IconListItem from '../IconList/IconListItem';\nimport ImgInsSmartMgmt from '../../images/img__ins-and-sm.png';\nimport MarketingBanner from '../MarketingBanner/MarketingBanner';\nimport { UI_BASE, VULNERABILITIES_CVES_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\n\n// eslint-disable-next-line no-unused-vars\nconst SortableTable = () => {\n    const columns = [\n        { title: 'CVE ID', transforms: [sortable] },\n        { title: 'Publish Date', transforms: [sortable] },\n        { title: 'Impact', transforms: [sortable] },\n        { title: 'CVSS Base Score', transforms: [sortable] }\n    ];\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSort] = useState({});\n    const dateFormatter = (date) => {\n        const newDate = (new Date(date)).toString().split(' ');\n        return `${newDate[2]} ${newDate[1]} ${newDate[3]}`;\n    };\n\n    const rowBuilder = data => data.map(row => [{\n        title: <a href={ ` https://access.redhat.com/security/cve/${row.id}` }\n            target='_blank' rel='noreferrer'>{row.id}</a>\n    },\n    { title: <span>{dateFormatter(row.attributes.public_date)}</span> },\n    { title: <span>{row.attributes.impact}</span> },\n    { title: <span>{row.attributes.cvss3_score}</span> }]);\n    // const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchCves = async () => {\n            try {\n                const cves = (await API.get(VULNERABILITIES_CVES_URL, {}, { sort: '-public_date', limit: 4 })).data;\n                setRows(rowBuilder(cves.data));\n            } catch (error) {\n                throw `${error}`;\n            }\n        };\n\n        fetchCves();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onSort = (_event, index, direction) => {\n        const sortedRows = rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n        setSort({ index, direction });\n        setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n    };\n\n    return <Table aria-label='Sortable Table' sortBy={ sortBy } onSort={ onSort } cells={ columns } rows={ rows }>\n        <TableHeader />\n        <TableBody />\n    </Table>;\n};\n\nconst ZeroState = () => {\n    const intl = useIntl();\n    const { hideGlobalFilter } = useChrome();\n\n    useEffect(() => {\n        hideGlobalFilter?.();\n\n        return () => {\n            hideGlobalFilter?.(false);\n        };\n    }, []);\n\n    return <div className='insd-c-marketing-page'>\n        <MarketingBanner\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            isWidthLimited\n            style={ {\n                '--ins-c-marketing-banner--graphic--width-on-md': '200px',\n                '--ins-c-marketing-banner--graphic--width-on-xl': '400px'\n            } }>\n            <Grid>\n                <GridItem>\n                    <Flex direction={ { default: 'column' } }>\n                        <FlexItem>\n                            <Title headingLevel='h1' size='2xl'>\n                                {intl.formatMessage(messages.noSystemsTitle)}\n                            </Title>\n                        </FlexItem>\n                        <FlexItem spacer={ { default: 'spacer2xl' } }>\n                            <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <p className='ins-c-text--black-400'>{intl.formatMessage(messages.singleConsistent)}</p>\n                            </div>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                isLarge\n                                component='a'\n                                variant='primary'\n                                href={ `${UI_BASE}/registration` }>\n                                {intl.formatMessage(messages.registerYourSystems)}\n                            </Button>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                className='pf-m-plain'\n                                component='a'\n                                variant='secondary'\n                                target='_blank'\n                                rel='noreferrer'\n                                href='https://www.redhat.com/en/technologies/management/insights'>\n                                {intl.formatMessage(messages.learnmoreRHI)}&nbsp;&nbsp;&nbsp;\n                                <ArrowRightIcon />\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </GridItem>\n            </Grid>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Grid lg={ 6 } hasGutter>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zslblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zslblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zslblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zsrblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zsrblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n            </Grid>\n        </PageSection>\n        <MarketingBanner\n            isWidthLimited='true'\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            style={ {\n                '--ins-c-marketing-banner--graphic--width': '400px'\n            } }>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerLg' } }>\n                    <Title headingLevel='h3' size='lg'>\n                        {intl.formatMessage(messages.dataPrivacyAndControlsTitle)}\n                    </Title>\n                </FlexItem>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <p className='insd-c-width-limiter ins-c-text--black-400'\n                        style={ { '--insd-c-width-limiter--MaxWidth': '70ch' } }>\n                        {intl.formatMessage(messages.dataPrivacyAndControls)}\n                    </p>\n                </FlexItem>\n                <FlexItem>\n                    <Button\n                        component='a'\n                        target='_blank'\n                        rel='noreferrer'\n                        href={ `./security/insights` }>\n                        {intl.formatMessage(messages.securityRedirect)}\n                    </Button>\n                </FlexItem>\n            </Flex>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <TextContent>\n                        <Title headingLevel='h3'>\n                            {intl.formatMessage(messages.insightsandsatellite)}\n                        </Title>\n                        <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '900px' } }>\n                            <p>{intl.formatMessage(messages.satellite)}</p>\n                        </div>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem>\n                    <Grid hasGutter>\n                        <GridItem md={ 6 } lg={ 5 } mdRowSpan={ 3 }>\n                            <img src={ ImgInsSmartMgmt } alt='Insights Satellite' />\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 }>\n                            <div className='insd-c-width-limiter pf-u-pt-lg-on-lg' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <List>\n                                    <ListItem>{intl.formatMessage(messages.rhm1)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm2)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm3)}</ListItem>\n                                </List>\n                            </div>\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 } className='pf-u-pl-lg'>\n                            <Flex>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/technologies/management/satellite'>\n                                        {intl.formatMessage(messages.learnmore)}\n                                    </Button>\n                                </FlexItem>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/contact'>\n                                        {intl.formatMessage(messages.contactsales)}\n                                    </Button>\n                                </FlexItem>\n                            </Flex>\n                        </GridItem>\n                    </Grid>\n                </FlexItem>\n            </Flex>\n        </PageSection>\n    </div>;\n};\n\nexport default ZeroState;\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst globalFilters = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n            && { ansible: 'not_nil' },\n        ...workloads?.['Microsoft SQL']?.isSelected\n            && { mssql: 'not_nil' },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, globalFilters, supportsGlobalFilter };\n"],"names":["className","ResourceOptimizationCard","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","intl","useIntl","useEffect","waitingForDataUrl","UI_BASE","suggestionsUrl","allSystemsUrl","ExpandableCardTemplate","appName","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","TemplateCard","success","Flex","direction","default","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","href","with_suggestions","count","FlexItem","Button","variant","isSmall","component","Loading","FailState","propTypes","PropTypes","routerParams","connect","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","permission","useContext","PermissionContext","newRules","useSelector","vulnerabilities","recent_rules","chrome","useChrome","updateDocumentTitle","hasSystems","PageSection","isWidthLimited","PageSectionVariants","Title","headingLevel","size","Suspense","fallback","isFilled","Grid","hasGutter","length","vulnerability","GridItem","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","notifications","supportsSap","ZeroState","workloads","workloadsPropType","EmptyStateVariant","checkState","warning","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","React","IconList","iconListStyle","children","IconListClasses","classNames","style","IconListItem","iconListItemStyle","IconListItemClasses","MarketingBanner","hasGraphic","graphicRight","dark1000","fullBleed","MarketingBannerSectionClasses","header","hasDivider","props","useState","expanded","setExpanded","id","inset","md","onExpand","toggleButtonProps","footer","icon","Card","TemplateCardActions","downloadReport","iconInlineMessage","iconInlineState","CardActions","TemplateCardHeader","onDownload","subtitle","CardHeader","CardTitle","onClick","titleClassName","TemplateCardBody","isHorizontalLayout","CardBody","hideGlobalFilter","spacer","isLarge","target","rel","lg","height","TextContent","mdRowSpan","src","ImgInsSmartMgmt","alt","List","ListItem","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","error","prop","Error","keys","Object","some","key","includes","find","foundIncorrect","values","findIndex","isSelected","undefined","globalFilters","SID","generateFilter","system_profile","SAP","sap_system","ansible","mssql","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","value","reduce","res","cur","entries"],"sourceRoot":""}