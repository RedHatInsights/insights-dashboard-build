{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/CostManagementCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactIcons","_reactCore","AppActions","CostManagementCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchOcpSummary","fetchAwsSummary","_props","ocpSummaryFetchStatus","awsSummaryFetchStatus","ocpSummary","awsSummary","ocpStats","awsStats","total","delta","Math","abs","round","percent","deltaColor","charge","date","_moment2","data","format","filter","time_scope_value","time_scope_units","_react2","createElement","Card","className","CardHeader","Title","size","CardBody","keys","length","Stack","span","StackItem","Split","gutter","SplitItem","CaretUpIcon","CaretDownIcon","getCaret","_Loading2","DollarSignIcon","CardFooter","href","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url"],"mappings":"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","file":"js/6.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\nimport { CaretUpIcon, CaretDownIcon, DollarSignIcon } from '@patternfly/react-icons';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    // Grid, GridItem,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * Cost Management Summary card for showing costs and monthly delta for AWS\n */\nclass CostManagementCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchOcpSummary();\n        this.props.fetchAwsSummary();\n    }\n\n    render() {\n        const {\n            ocpSummaryFetchStatus,\n            awsSummaryFetchStatus,\n            ocpSummary,\n            awsSummary\n        } = this.props;\n\n        let ocpStats = {};\n        let awsStats = {};\n\n        if (ocpSummaryFetchStatus === 'fulfilled') {\n            if (ocpSummary.total > 0) {\n                ocpStats.delta = Math.abs(Math.round(ocpSummary.delta.percent));\n                ocpStats.deltaColor = ocpSummary.delta.percent > 0 ? 'green' :\n                    ocpSummary.delta.percent < 0 ? 'red' : 'black';\n                ocpStats.total = Math.round(ocpSummary.total.charge * 100) / 100;\n                // ocpStats.totalUnits = ocpSummary.total.units;\n                ocpStats.date = moment(ocpSummary.data.date).format('MMMM Do YYYY');\n                ocpStats.filter = (-1 * ocpSummary.filter.time_scope_value) + ' ' + ocpSummary.filter.time_scope_units;\n            }\n        }\n\n        if (awsSummaryFetchStatus === 'fulfilled') {\n            if (awsSummary.total > 0) {\n                awsStats.delta = Math.round(awsSummary.delta.percent);\n                awsStats.total = Math.round(awsSummary.total.charge * 100) / 100;\n                // awsStats.totalUnits = awsSummary.total.units;\n                awsStats.date = moment(awsSummary.data.date).format('MMMM Do YYYY');\n                awsStats.filter = (-1 * awsSummary.filter.time_scope_value) + ' ' + awsSummary.filter.time_scope_units;\n            }\n        }\n\n        function getCaret (deltaColor) {\n            switch (deltaColor) {\n                case 'green':\n                    return <CaretUpIcon />;\n                case 'red':\n                    return <CaretDownIcon />;\n                default:\n                    return;\n            }\n        }\n\n        return (\n            <Card className='ins-c-card__cost-management'>\n                <CardHeader>\n                    <Title className='pf-u-mt-0 pf-u-mb-0' size={'lg'}>Cost Management</Title>\n                </CardHeader>\n                <CardBody>\n                    { ocpSummaryFetchStatus === 'fulfilled' && Object.keys(ocpStats).length > 0 && (\n                        <Stack span={6} className='ins-c-summary'>\n                            <StackItem className='ins-c-summary__title'>OpenShift Total Charges</StackItem>\n                            <StackItem>\n                                <Split gutter='sm'>\n                                    <SplitItem>\n                                        <Stack>\n                                            <StackItem className='ins-c-summary__emphasis'>${ ocpStats.total }</StackItem>\n                                            <StackItem className='ins-c-summary__accent'>{ ocpStats.date }</StackItem>\n                                        </Stack>\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Stack>\n                                            <StackItem className= {`ins-c-summary__emphasis ins-m-${ocpStats.deltaColor}` }>\n                                                { ocpStats.delta }%\n                                                { getCaret(ocpStats.deltaColor) }\n                                            </StackItem>\n                                            <StackItem className='ins-c-summary__accent'>Compared to { ocpStats.filter } ago</StackItem>\n                                        </Stack>\n                                    </SplitItem>\n                                </Split>\n                            </StackItem>\n                        </Stack>\n                    ) } { ocpSummaryFetchStatus === 'pending' && (<Loading/>) }\n                    { ocpSummaryFetchStatus === 'fulfilled' && !ocpStats.total && (\n                        <center className='ins-c-summary'>\n                            <DollarSignIcon className='ins-c-summary__icon ins-c-summary__icon-dollar' />\n                            <div className='ins-c-summary__label'>No Money, No Problems!</div>\n                        </center>\n                    )}\n                </CardBody>\n                <CardFooter><a href={ `/${release}/platform/cost-management/` }>View All Cost/Charges</a></CardFooter>\n            </Card>\n        );\n    }\n}\n\nCostManagementCard.propTypes = {\n    fetchOcpSummary: PropTypes.func,\n    ocpSummary: PropTypes.object,\n    ocpSummaryFetchStatus: PropTypes.string,\n    fetchAwsSummary: PropTypes.func,\n    awsSummary: PropTypes.object,\n    awsSummaryFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    awsSummary: state.DashboardStore.awsSummary,\n    awsSummaryFetchStatus: state.DashboardStore.awsSummaryFetchStatus,\n    ocpSummary: state.DashboardStore.ocpSummary,\n    ocpSummaryFetchStatus: state.DashboardStore.ocpSummaryFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchAwsSummary: (url) => dispatch(AppActions.fetchAwsSummary(url)),\n    fetchOcpSummary: (url) => dispatch(AppActions.fetchOcpSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CostManagementCard));\n"],"sourceRoot":""}