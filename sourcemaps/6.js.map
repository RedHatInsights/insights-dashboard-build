{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/InsightsCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactIcons","_reactCore","AppActions","InsightsCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchInsights","_props","insightsFetchStatus","insights","severities","Array","severity","label","link","some","element","rules","push","value","length","_react2","createElement","Card","className","CardHeader","Title","size","CardBody","isArray","map","key","ExclamationCircleIcon","ExclamationTriangleIcon","ExclamationIcon","getIcon","href","_Loading2","CheckCircleIcon","CardFooter","total","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url"],"mappings":"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","file":"js/6.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\n\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon, ExclamationTriangleIcon, ExclamationIcon\n} from '@patternfly/react-icons';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    Title\n} from '@patternfly/react-core';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * Insights for showing 2 highest categories with rule hits\n */\nclass InsightsCard extends Component {\n\n    constructor (props) {\n        super(props);\n    }\n\n    componentDidMount () {\n        this.props.fetchInsights();\n    }\n\n    render() {\n        const {\n            insightsFetchStatus,\n            insights\n        } = this.props;\n\n        let severities = new Array();\n\n        if (insightsFetchStatus === 'fulfilled') {\n            // iterate over rules.severities and push to topSeverities if value > 0 in order of greatest to least\n            // break after 2 items have been added\n            [\n                { severity: 'Critical', label: 'Critical', link: 'critical-risk/' },\n                { severity: 'Error', label: 'High', link: 'high-risk/' },\n                { severity: 'Warn', label: 'Medium', link: 'medium-risk/' },\n                { severity: 'Info', label: 'Low', link: 'low-risk/' }\n            ].some(element => {\n                if (insights.rules.severity[element.severity] > 0) {\n                    severities.push({\n                        label: element.label,\n                        value: insights.rules.severity[element.severity],\n                        link: element.link\n                    });\n                    if (severities.length > 1) {\n                        return true;\n                    }\n                }\n            });\n        }\n\n        function getIcon (label) {\n            switch (label) {\n                case 'Critical':\n                    return <ExclamationCircleIcon className='ins-c-summary__icon ins-c-summary__icon-critical' />;\n                case 'High':\n                    return <ExclamationTriangleIcon className='ins-c-summary__icon ins-c-summary__icon-high' />;\n                case 'Medium':\n                    return <ExclamationTriangleIcon className='ins-c-summary__icon ins-c-summary__icon-medium' />;\n                case 'Low':\n                    return <ExclamationIcon className='ins-c-summary__icon ins-c-summary__icon-low' />;\n            }\n        }\n\n        return (\n            <Card className='ins-c-card__insights'>\n                <CardHeader>\n                    <Title className=\"pf-u-mt-0 pf-u-mb-0\" size={'lg'}>Insights</Title>\n                </CardHeader>\n                <CardBody>\n                    { insightsFetchStatus === 'fulfilled' && Array.isArray(severities) && severities.length > 0 && (\n                        severities.map(element =>\n                            <div className='ins-c-summary' key={ element.label }>\n                                { getIcon(element.label) }\n                                <span className='ins-c-summary__emphasis'>{ element.value }</span>\n                                <span className='ins-c-summary__label'>\n                                    <a href={ `/${ release }/platform/advisor/actions/${ element.link }` }>{ element.label } Rule Hits</a>\n                                </span>\n                            </div>\n                        )\n                    ) }\n                    { insightsFetchStatus === 'pending' && (<Loading/>) }\n                    { insightsFetchStatus === 'fulfilled' && (!Array.isArray(severities) || severities.length === 0) && (\n                        <div className='ins-c-summary'>\n                            <CheckCircleIcon className='ins-c-summary__icon ins-c-summary__icon-check' />\n                            <span className='ins-c-summary__label'>You have no issues</span>\n                        </div>\n                    ) }\n                </CardBody>\n                <CardFooter>\n                    <a href={ `/${ release }/platform/advisor/` }>\n                        View All{ insights.rules && insights.rules.total > 0 ?\n                            ` ${insights.rules.total} ` : ''} Rule Hits\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nInsightsCard.propTypes = {\n    fetchInsights: PropTypes.func,\n    insights: PropTypes.object,\n    insightsFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    insights: state.DashboardStore.insights,\n    insightsFetchStatus: state.DashboardStore.insightsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchInsights: (url) => dispatch(AppActions.fetchInsights(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(InsightsCard));\n"],"sourceRoot":""}