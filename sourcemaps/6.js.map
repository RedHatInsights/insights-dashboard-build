{"version":3,"sources":["webpack:///./src/SmartComponents/Cards/CostManagementCard.js"],"names":["_react","__webpack_require__","_insightsFrontendComponents","_reactRedux","_reactIcons","_reactCore","AppActions","CostManagementCard","props","_classCallCheck3","default","this","_possibleConstructorReturn3","__proto__","Object","getPrototypeOf","call","fetchOcpSummary","fetchAwsSummary","_props","ocpSummaryFetchStatus","awsSummaryFetchStatus","ocpSummary","awsSummary","ocpStats","awsStats","getCostStack","costSummary","_react2","createElement","Stack","span","className","StackItem","Split","gutter","SplitItem","total","date","deltaColor","delta","CaretUpIcon","CaretDownIcon","getCaret","filter","Math","abs","round","percent","charge","_moment2","data","format","time_scope_value","time_scope_units","value","Card","CardHeader","Title","size","CardBody","keys","length","_Loading2","DollarSignIcon","CardFooter","href","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","_extends3","DashboardStore","dispatch","url"],"mappings":"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","file":"js/6.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\nimport { CaretUpIcon, CaretDownIcon, DollarSignIcon } from '@patternfly/react-icons';\n\nimport {\n    Card, CardBody, CardFooter, CardHeader,\n    // Grid, GridItem,\n    Split, SplitItem,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport './_cards.scss';\n\n// expose RELEASE\n/*global RELEASE:true*/\nconst release = RELEASE;\n\n/**\n * Cost Management Summary card for showing costs and monthly delta for AWS\n */\nclass CostManagementCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchOcpSummary();\n        this.props.fetchAwsSummary();\n    }\n\n    render() {\n        const {\n            ocpSummaryFetchStatus,\n            awsSummaryFetchStatus,\n            ocpSummary,\n            awsSummary\n        } = this.props;\n\n        let ocpStats = {};\n        let awsStats = {};\n\n        if (ocpSummaryFetchStatus === 'fulfilled') {\n            if (ocpSummary.total > 0) {\n                ocpStats.delta = Math.abs(Math.round(ocpSummary.delta.percent));\n                ocpStats.deltaColor = ocpSummary.delta.percent > 0 ? 'green' :\n                    ocpSummary.delta.percent < 0 ? 'red' : 'black';\n                ocpStats.total = Math.round(ocpSummary.total.charge * 100) / 100;\n                // ocpStats.totalUnits = ocpSummary.total.units;\n                ocpStats.date = moment(ocpSummary.data.date).format('MMMM Do YYYY');\n                ocpStats.filter = (-1 * ocpSummary.filter.time_scope_value) + ' ' + ocpSummary.filter.time_scope_units;\n            }\n        }\n\n        if (awsSummaryFetchStatus === 'fulfilled') {\n            if (awsSummary.total.value > 0) {\n                awsStats.delta = Math.round(awsSummary.delta.percent);\n                awsStats.total = Math.round(awsSummary.total.value * 100) / 100;\n                // awsStats.totalUnits = awsSummary.total.units;\n                awsStats.date = moment(awsSummary.data.date).format('MMMM Do YYYY');\n                awsStats.filter = (-1 * awsSummary.filter.time_scope_value) + ' ' + awsSummary.filter.time_scope_units;\n            }\n        }\n\n        function getCaret (deltaColor) {\n            switch (deltaColor) {\n                case 'green':\n                    return <CaretUpIcon />;\n                case 'red':\n                    return <CaretDownIcon />;\n                default:\n                    return;\n            }\n        }\n\n        function getCostStack (costSummary) {\n            return (\n                <Stack span={6} className='ins-c-summary'>\n                    <StackItem className='ins-c-summary__title'>OpenShift Total Charges</StackItem>\n                    <StackItem>\n                        <Split gutter='sm'>\n                            <SplitItem>\n                                <Stack>\n                                    <StackItem className='ins-c-summary__emphasis'>${ costSummary.total }</StackItem>\n                                    <StackItem className='ins-c-summary__accent'>{ costSummary.date }</StackItem>\n                                </Stack>\n                            </SplitItem>\n                            <SplitItem>\n                                <Stack>\n                                    <StackItem className= {`ins-c-summary__emphasis ins-m-${costSummary.deltaColor}` }>\n                                        { costSummary.delta }%\n                                        { getCaret(costSummary.deltaColor) }\n                                    </StackItem>\n                                    <StackItem className='ins-c-summary__accent'>Compared to { costSummary.filter } ago</StackItem>\n                                </Stack>\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n                </Stack>\n            );\n        }\n\n        return (\n            <Card className='ins-c-card__cost-management'>\n                <CardHeader>\n                    <Title className='pf-u-mt-0 pf-u-mb-0' size={'lg'}>Cost Management</Title>\n                </CardHeader>\n                <CardBody>\n                    { ocpSummaryFetchStatus === 'fulfilled' && Object.keys(ocpStats).length > 0 && (\n                        getCostStack(ocpStats)\n                    ) } { awsSummaryFetchStatus === 'fulfilled' && Object.keys(awsSummary).length > 0 && (\n                        getCostStack(awsStats)\n                    ) } { ocpSummaryFetchStatus === 'pending' && (<Loading/>) }\n                    { ocpSummaryFetchStatus === 'fulfilled' && awsSummaryFetchStatus === 'fulfilled' && !ocpStats.total\n                        && !awsStats.total && (\n                        <center className='ins-c-summary'>\n                            <DollarSignIcon className='ins-c-summary__icon' size='lg' />\n                            <div className='ins-c-summary__label'>No Money, No Problems!</div>\n                        </center>\n                    )}\n                </CardBody>\n                <CardFooter><a href={ `/${release}/platform/cost-management/` }>View All Cost/Charges</a></CardFooter>\n            </Card>\n        );\n    }\n}\n\nCostManagementCard.propTypes = {\n    fetchOcpSummary: PropTypes.func,\n    ocpSummary: PropTypes.object,\n    ocpSummaryFetchStatus: PropTypes.string,\n    fetchAwsSummary: PropTypes.func,\n    awsSummary: PropTypes.object,\n    awsSummaryFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    awsSummary: state.DashboardStore.awsSummary,\n    awsSummaryFetchStatus: state.DashboardStore.awsSummaryFetchStatus,\n    ocpSummary: state.DashboardStore.ocpSummary,\n    ocpSummaryFetchStatus: state.DashboardStore.ocpSummaryFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchAwsSummary: (url) => dispatch(AppActions.fetchAwsSummary(url)),\n    fetchOcpSummary: (url) => dispatch(AppActions.fetchOcpSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CostManagementCard));\n"],"sourceRoot":""}