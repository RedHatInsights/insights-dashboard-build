{"version":3,"file":"js/dashboard-route.1644437202061.7926729e65b739139d46.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/PresentationalComponents/NoSystems/NoSystems.js","webpack:///./src/PresentationalComponents/IconList/IconList.js","webpack:///./src/PresentationalComponents/IconList/IconListItem.js","webpack:///./src/PresentationalComponents/MarketingBanner/MarketingBanner.js","webpack:///./src/PresentationalComponents/ZeroState/ZeroState.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/Utilities/Common.js","webpack:///./src/Utilities/hooks/useChromePush.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import './NoSystems.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport ChartSpikeIcon from '@patternfly/react-icons/dist/esm/icons/chartSpike-icon';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Stack } from '@patternfly/react-core/dist/esm/layouts/Stack/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/esm/layouts/Stack/StackItem';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport { UI_BASE } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst NoSystems = ({ workloadIs }) => {\n    const intl = useIntl();\n\n    const workloadTypes = {\n        SAP: {\n            icon: PlusCircleIcon,\n            title: intl.formatMessage(messages.insightsForSap),\n            // eslint-disable-next-line react/display-name\n            body: intl.formatMessage(messages.providesAdditionalSAPworkload, { break: () => <React.Fragment><br /> <br /></React.Fragment> })\n        }\n    };\n\n    return <Main>\n        <EmptyState variant={ EmptyStateVariant.small } className='insd-c-empty-state-no-systems'>\n            <EmptyStateIcon icon={ workloadTypes[workloadIs]?.icon || ChartSpikeIcon } />\n            <Title headingLevel='h5' size='lg'>\n                {workloadTypes[workloadIs]?.title || intl.formatMessage(messages.noSystemsTitle)}\n            </Title>\n            <EmptyStateBody>\n                <Stack hasGutter>\n                    <StackItem>\n                        {workloadTypes[workloadIs]?.body || intl.formatMessage(messages.noSystemsDescription)}\n                    </StackItem>\n                </Stack>\n            </EmptyStateBody>\n            <Button component='a' href={ `${UI_BASE}/registration` } variant='primary'>\n                {intl.formatMessage(messages.registerYourSystems)}\n            </Button>\n        </EmptyState>\n    </Main>;\n};\n\nNoSystems.propTypes = {\n    workloadIs: PropTypes.string\n};\n\nexport default NoSystems;\n","import './_icon-list.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconList = ({ iconListStyle, className, children }) => {\n    const IconListClasses = classNames(className, 'insd-c-icon-list');\n\n    return <ul className={ IconListClasses } style={ iconListStyle }>\n        {children}\n    </ul>;\n};\n\nexport default IconList;\n\nIconList.propTypes = {\n    children: propTypes.any.isRequired,\n    iconListStyle: propTypes.string,\n    className: propTypes.string\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconListItem = ({ className, iconListItemStyle, children }) => {\n    const IconListItemClasses = classNames(className, 'insd-c-icon-list__item');\n\n    return <li className={ IconListItemClasses } style={ iconListItemStyle }>\n        {children}\n    </li>;\n};\n\nexport default IconListItem;\n\nIconListItem.propTypes = {\n    className: propTypes.string,\n    iconListItemStyle: propTypes.string,\n    children: propTypes.any.isRequired\n};\n","import './_marketing-banner.scss';\n\nimport { PageSection } from '@patternfly/react-core';\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst MarketingBanner = ({ className, hasGraphic, graphicRight, dark1000, fullBleed, style, children }) => {\n\n    const MarketingBannerSectionClasses = classNames(\n        className,\n        'insd-c-marketing-banner',\n        { [`insd-m-with-graphic`]: hasGraphic },\n        { [`insd-m-graphic-right`]: graphicRight },\n        { [`insd-m-dark-1000 pf-m-dark-1000`]: dark1000 },\n        { [`insd-m-full-bleed`]: fullBleed }\n    );\n\n    return <PageSection\n        className={ MarketingBannerSectionClasses }\n        style={ style }\n        isWidthLimited>\n        {children}\n    </PageSection>;\n};\n\nexport default MarketingBanner;\n\nMarketingBanner.propTypes = {\n    children: propTypes.any.isRequired,\n    className: propTypes.string,\n    style: propTypes.any,\n    graphicRight: propTypes.bool,\n    hasGraphic: propTypes.bool,\n    dark1000: propTypes.bool,\n    fullBleed: propTypes.bool,\n    isWidthLimited: propTypes.bool\n};\n","import './_zero-state.scss';\n\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    List,\n    ListItem,\n    PageSection,\n    TextContent,\n    Title\n} from '@patternfly/react-core/dist/esm/components/index';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport API from '../../Utilities/Api';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport IconList from '../IconList/IconList';\nimport IconListItem from '../IconList/IconListItem';\nimport ImgInsSmartMgmt from '../../images/img__ins-and-sm.png';\nimport MarketingBanner from '../MarketingBanner/MarketingBanner';\nimport { UI_BASE } from '../../AppConstants';\nimport { VULNERABILITIES_CVES_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\n// eslint-disable-next-line no-unused-vars\nconst SortableTable = () => {\n    const columns = [\n        { title: 'CVE ID', transforms: [sortable] },\n        { title: 'Publish Date', transforms: [sortable] },\n        { title: 'Impact', transforms: [sortable] },\n        { title: 'CVSS Base Score', transforms: [sortable] }\n    ];\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSort] = useState({});\n    const dateFormatter = (date) => {\n        const newDate = (new Date(date)).toString().split(' ');\n        return `${newDate[2]} ${newDate[1]} ${newDate[3]}`;\n    };\n\n    const rowBuilder = data => data.map(row => [{\n        title: <a href={ ` https://access.redhat.com/security/cve/${row.id}` }\n            target='_blank' rel='noreferrer'>{row.id}</a>\n    },\n    { title: <span>{dateFormatter(row.attributes.public_date)}</span> },\n    { title: <span>{row.attributes.impact}</span> },\n    { title: <span>{row.attributes.cvss3_score}</span> }]);\n    // const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchCves = async () => {\n            try {\n                const cves = (await API.get(VULNERABILITIES_CVES_URL, {}, { sort: '-public_date', limit: 4 })).data;\n                setRows(rowBuilder(cves.data));\n            } catch (error) {\n                throw `${error}`;\n            }\n        };\n\n        fetchCves();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onSort = (_event, index, direction) => {\n        const sortedRows = rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n        setSort({ index, direction });\n        setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n    };\n\n    return <Table aria-label='Sortable Table' sortBy={ sortBy } onSort={ onSort } cells={ columns } rows={ rows }>\n        <TableHeader />\n        <TableBody />\n    </Table>;\n};\n\nconst ZeroState = () => {\n    const intl = useIntl();\n\n    return <div className='insd-c-marketing-page'>\n        <MarketingBanner\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            isWidthLimited\n            style={ {\n                '--ins-c-marketing-banner--graphic--width-on-md': '200px',\n                '--ins-c-marketing-banner--graphic--width-on-xl': '400px'\n            } }>\n            <Grid>\n                <GridItem>\n                    <Flex direction={ { default: 'column' } }>\n                        <FlexItem>\n                            <Title headingLevel='h1' size='2xl'>\n                                {intl.formatMessage(messages.noSystemsTitle)}\n                            </Title>\n                        </FlexItem>\n                        <FlexItem spacer={ { default: 'spacer2xl' } }>\n                            <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <p className='ins-c-text--black-400'>{intl.formatMessage(messages.singleConsistent)}</p>\n                            </div>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                isLarge\n                                component='a'\n                                variant='primary'\n                                href={ `${UI_BASE}/registration` }>\n                                {intl.formatMessage(messages.registerYourSystems)}\n                            </Button>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                className='pf-m-plain'\n                                component='a'\n                                variant='secondary'\n                                target='_blank'\n                                rel='noreferrer'\n                                href='https://www.redhat.com/en/technologies/management/insights'>\n                                {intl.formatMessage(messages.learnmoreRHI)}&nbsp;&nbsp;&nbsp;\n                                <ArrowRightIcon />\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </GridItem>\n            </Grid>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Grid lg={ 6 } hasGutter>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zslblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zslblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zslblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zsrblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zsrblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n            </Grid>\n        </PageSection>\n        <MarketingBanner\n            isWidthLimited='true'\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            style={ {\n                '--ins-c-marketing-banner--graphic--width': '400px'\n            } }>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerLg' } }>\n                    <Title headingLevel='h3' size='lg'>\n                        {intl.formatMessage(messages.dataPrivacyAndControlsTitle)}\n                    </Title>\n                </FlexItem>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <p className='insd-c-width-limiter ins-c-text--black-400'\n                        style={ { '--insd-c-width-limiter--MaxWidth': '70ch' } }>\n                        {intl.formatMessage(messages.dataPrivacyAndControls)}\n                    </p>\n                </FlexItem>\n                <FlexItem>\n                    <Button\n                        component='a'\n                        target='_blank'\n                        rel='noreferrer'\n                        href={ `./security/insights` }>\n                        {intl.formatMessage(messages.securityRedirect)}\n                    </Button>\n                </FlexItem>\n            </Flex>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <TextContent>\n                        <Title headingLevel='h3'>\n                            {intl.formatMessage(messages.insightsandsmartmanagement)}\n                        </Title>\n                        <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '900px' } }>\n                            <p>{intl.formatMessage(messages.smartManagement)}</p>\n                        </div>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem>\n                    <Grid hasGutter>\n                        <GridItem md={ 6 } lg={ 5 } mdRowSpan={ 3 }>\n                            <img src={ ImgInsSmartMgmt } alt='Insights Smart Management' />\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 }>\n                            <div className='insd-c-width-limiter pf-u-pt-lg-on-lg' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <List>\n                                    <ListItem>{intl.formatMessage(messages.rhm1)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm2)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm3)}</ListItem>\n                                </List>\n                            </div>\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 } className='pf-u-pl-lg'>\n                            <Flex>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/technologies/management/smart-management'>\n                                        {intl.formatMessage(messages.learnmore)}\n                                    </Button>\n                                </FlexItem>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/contact'>\n                                        {intl.formatMessage(messages.contactsales)}\n                                    </Button>\n                                </FlexItem>\n                            </Flex>\n                        </GridItem>\n                    </Grid>\n                </FlexItem>\n            </Flex>\n        </PageSection>\n    </div>;\n};\n\nexport default ZeroState;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { UI_BASE } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const navigateTo = useChromePush();\n    const waitingForDataUrl = `${UI_BASE}/ros?with_waiting_for_data=true`;\n    const suggestionsUrl = `${UI_BASE}/ros?with_suggestions=true`;\n    const allSystemsUrl = `${UI_BASE}/ros`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <a onClick={e => navigateTo(e, waitingForDataUrl)} href={waitingForDataUrl}>\n                                                            <span className='pf-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </a>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <a onClick={e => navigateTo(e, suggestionsUrl)} href={suggestionsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <a onClick={e => navigateTo(e, allSystemsUrl)} href={allSystemsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </a>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <Button\n                                        variant='secondary'\n                                        isSmall component='a'\n                                        onClick={e => navigateTo(e, `${UI_BASE}/ros`)}\n                                        href={ `${UI_BASE}/ros`}>\n                                        {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                    </Button>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard));\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext, useEffect, useState } from 'react';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport API from '../../Utilities/Api';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport NoSystems from '../NoSystems/NoSystems';\nimport { PermissionContext } from '../../App';\nimport { SAP_FETCH_URL } from '../../AppConstants';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst SubscriptionsUtilizedCard = lazy(() => import('../../SmartComponents/SubscriptionsUtilized/SubscriptionsUtilizedCard'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\nconst Dashboard = ({ workloads }) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const [supportsSap, setSupportsSap] = useState(true);\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n    const { isFedramp } = useChrome();\n\n    useEffect(() => {\n        const fetchSapSystems = async () => {\n            try {\n                const response = await API.get(SAP_FETCH_URL);\n                setSupportsSap(response.data.results?.find(({ value }) => value)?.count > 0);\n            } catch (error) {\n                throw `${error}`;\n            }\n        };\n\n        fetchSapSystems();\n    }, []);\n\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n\n    return permission.hasSystems ?\n        (!workloads?.SAP?.isSelected) || (workloads?.SAP?.isSelected && supportsSap) ?\n            <React.Fragment>\n                <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                    <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-screen-reader\">\n                        {intl.formatMessage(messages.dashboardTitle)}\n                    </Title>\n                    <Suspense fallback={ <Loading /> }>\n                        <SystemInventoryHeader />\n                    </Suspense>\n                </PageSection>\n                <PageSection isFilled={true} isWidthLimited>\n                    <Grid hasGutter>\n                        <Suspense fallback={ <Loading /> }>\n                            {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                                <NewRules />\n                            </GridItem> }\n                        </Suspense>\n                        <Masonry\n                            breakpointCols={breakpointColumnsObj}\n                            className=\"ins-l-masonry\"\n                            columnClassName=\"ins-l-masonry_column\"\n                        >\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.vulnerability &&\n                                    <VulnerabilityCard />\n                                }\n                            </Suspense>\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.advisor &&\n                                    <AdvisorCard />\n                                }\n                            </Suspense>\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.compliance &&\n                                    <ComplianceCard />\n                                }\n                            </Suspense>\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.remediations &&\n                                    <RemediationsCard />\n                                }\n                            </Suspense>\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.patch &&\n                                    <PatchManagerCard />\n                                }\n                            </Suspense>\n                            <Suspense fallback={ <Loading /> }>\n                                {permission.ros &&\n                                    <ResourceOptimizationCard/>\n                                }\n                                {permission.drift && <DriftCard/>}\n                            </Suspense>\n                            {!isFedramp && (\n                                <Suspense fallback={ <Loading /> }>\n                                    {permission.subscriptions &&\n                                    <SubscriptionsUtilizedCard />\n                                    }\n                                </Suspense>\n                            )}\n                        </Masonry>\n                    </Grid>\n                </PageSection>\n                <Footer supportsSap={(!workloads?.SAP?.isSelected) || (workloads?.SAP?.isSelected && supportsSap)}/>\n            </React.Fragment>\n            : <NoSystems workloadIs='SAP' />\n        : <ZeroState />;\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    Title\n} from '@patternfly/react-core/dist/esm/components/';\n\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <CardActions { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </CardActions>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        <CardActions>\n            { children }\n            { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n            }\n        </CardActions>\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst sapFilter = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, sapFilter, supportsGlobalFilter };\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport const useChromePush = () => {\n    const push = useChrome(({ chromeHistory: { push } = {} }) => push);\n    return (e, link) => {\n        if (typeof push === 'function') {\n            e.preventDefault();\n            push(link.replace(/^.\\//, '/'));\n        }\n    };\n};\n"],"names":["className","NoSystems","workloadIs","intl","useIntl","workloadTypes","SAP","icon","PlusCircleIcon","title","formatMessage","messages","body","break","Main","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","ChartSpikeIcon","Title","headingLevel","size","EmptyStateBody","Stack","hasGutter","StackItem","Button","component","href","UI_BASE","propTypes","PropTypes","IconList","iconListStyle","children","IconListClasses","classNames","style","IconListItem","iconListItemStyle","IconListItemClasses","MarketingBanner","hasGraphic","graphicRight","dark1000","fullBleed","MarketingBannerSectionClasses","PageSection","isWidthLimited","Grid","GridItem","Flex","direction","default","FlexItem","spacer","isLarge","target","rel","lg","Card","height","CardHeader","TextContent","CardBody","md","mdRowSpan","src","ImgInsSmartMgmt","alt","List","ListItem","ResourceOptimizationCard","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","useEffect","navigateTo","useChromePush","waitingForDataUrl","suggestionsUrl","allSystemsUrl","ExpandableCardTemplate","appName","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","TemplateCard","success","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","onClick","e","with_suggestions","count","isSmall","Loading","FailState","routerParams","connect","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","SubscriptionsUtilizedCard","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","workloads","permission","useContext","PermissionContext","useState","supportsSap","setSupportsSap","newRules","useSelector","vulnerabilities","recent_rules","isFedramp","useChrome","fetchSapSystems","API","SAP_FETCH_URL","response","data","results","find","value","hasSystems","isSelected","PageSectionVariants","Suspense","fallback","isFilled","length","vulnerability","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","subscriptions","workloadsPropType","checkState","warning","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","React","header","hasDivider","props","expanded","setExpanded","id","inset","onExpand","toggleButtonProps","footer","TemplateCardActions","downloadReport","iconInlineMessage","iconInlineState","CardActions","TemplateCardHeader","onDownload","subtitle","CardTitle","titleClassName","TemplateCardBody","isHorizontalLayout","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","error","prop","Error","keys","Object","some","key","includes","foundIncorrect","values","findIndex","undefined","sapFilter","SID","generateFilter","system_profile","sap_system","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","reduce","res","cur","entries","push","chromeHistory","link","preventDefault","replace"],"sourceRoot":""}