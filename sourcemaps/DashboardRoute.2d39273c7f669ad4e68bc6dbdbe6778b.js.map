{"version":3,"file":"js/DashboardRoute.fd3b9acef8de89d0d6ec.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/Utilities/Common.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { Button } from '@patternfly/react-core';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const waitingForDataUrl = `/?with_waiting_for_data=true`;\n    const suggestionsUrl = `/?with_suggestions=true`;\n    const allSystemsUrl = `/`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-v5-u-font-size-2xl pf-v5-u-color-100 pf-v5-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <InsightsLink app='ros' to={waitingForDataUrl}>\n                                                            <span className='pf-v5-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </InsightsLink>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-v5-u-font-size-2xl pf-v5-u-color-100 pf-v5-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <InsightsLink app='ros' to={suggestionsUrl}>\n                                                    <span className='pf-v5-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </InsightsLink>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-v5-u-font-size-2xl pf-v5-u-color-100 pf-v5-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <InsightsLink app='ros' to={allSystemsUrl}>\n                                                    <span className='pf-v5-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </InsightsLink>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <InsightsLink app='ros' to='/'>\n                                        <Button\n                                            variant='secondary'\n                                            size='sm'>\n                                            {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                        </Button>\n                                    </InsightsLink>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard);\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext, useEffect } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport { PermissionContext } from '../../App';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\n//We will be using this later. commenting out for now.\nconst Dashboard = (/*{ workloads }*/) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n    const chrome = useChrome();\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`Dashboard | Red Hat Insights`);\n    }, [chrome]);\n\n    return permission.hasSystems  ?\n        <React.Fragment>\n            <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-v5-u-screen-reader\">\n                    {intl.formatMessage(messages.dashboardTitle)}\n                </Title>\n                <Suspense fallback={ <Loading /> }>\n                    <SystemInventoryHeader />\n                </Suspense>\n            </PageSection>\n            <PageSection isFilled={true} isWidthLimited>\n                <Grid hasGutter>\n                    <Suspense fallback={ <Loading /> }>\n                        {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                            <NewRules />\n                        </GridItem> }\n                    </Suspense>\n                    <Masonry\n                        breakpointCols={breakpointColumnsObj}\n                        className=\"ins-l-masonry\"\n                        columnClassName=\"ins-l-masonry_column\"\n                    >\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.vulnerability &&\n                                <VulnerabilityCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.advisor &&\n                                <AdvisorCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.compliance &&\n                                <ComplianceCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.remediations &&\n                                <RemediationsCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.patch &&\n                                <PatchManagerCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.ros &&\n                                <ResourceOptimizationCard/>\n                            }\n                        </Suspense>\n                        <Suspense>\n                            {permission.drift && permission.notifications\n                            && <DriftCard/>}\n                        </Suspense>\n                    </Masonry>\n                </Grid>\n            </PageSection>\n            <Footer supportsSap={ true }/>\n        </React.Fragment>\n        :\n        <ZeroState/>;\n\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <div { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </div>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        { children }\n        { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n        }\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst globalFilters = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n            && { ansible: 'not_nil' },\n        ...workloads?.['Microsoft SQL']?.isSelected\n            && { mssql: 'not_nil' },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, globalFilters, supportsGlobalFilter };\n"],"names":["React","ExclamationCircleIcon","className","InfoCircleIcon","ResourceOptimizationCard","_ref","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","intl","useIntl","useEffect","ExpandableCardTemplate","appName","title","formatMessage","messages","resourceOptimizationCardHeader","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","TemplateCardBody","success","rosSystemsGenericMessage","Flex","direction","default","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","InsightsLink","app","to","waitingForData","with_suggestions","systemsWithSuggestions","count","totalSystems","FlexItem","rosSystemsNotConfiguredMessage","Button","variant","size","rosCardConfigureSystemsCTA","Loading","FailState","propTypes","PropTypes","connect","_ref2","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","permission","useContext","PermissionContext","newRules","useSelector","vulnerabilities","recent_rules","chrome","useChrome","updateDocumentTitle","hasSystems","PageSection","isWidthLimited","PageSectionVariants","light","Title","headingLevel","dashboardTitle","Suspense","fallback","isFilled","Grid","hasGutter","length","vulnerability","GridItem","Masonry","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","notifications","supportsSap","ZeroState","workloads","workloadsPropType","isSmall","EmptyState","EmptyStateVariant","full","concat","EmptyStateBody","errorStateTitle","isRequired","checkState","warning","ExclamationTriangleIcon","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","header","hasDivider","_ref$isExpanded","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","expanded","setExpanded","Card","_extends","id","Divider","inset","md","CardHeader","onExpand","toggleButtonProps","CardTitle","CardExpandableContent","footer","icon","DownloadIcon","TemplateCard","children","TemplateCardActions","_ref3","downloadReport","iconInlineMessage","iconInlineState","_excluded3","DownloadReport","TemplateCardHeader","_ref4","onDownload","subtitle","_excluded4","onClick","titleClassName","_ref5","isHorizontalLayout","_excluded5","CardBody","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","_keys$find","error","prop","_typeof","Error","keys","Object","some","key","includes","find","foundIncorrect","values","findIndex","isSelected","undefined","globalFilters","SID","_workloads$SAP","_workloads$AnsibleAu","_workloads$Microsoft","generateFilter","system_profile","_objectSpread","SAP","sap_system","ansible","mssql","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","value","reduce","res","cur","entries"],"sourceRoot":""}