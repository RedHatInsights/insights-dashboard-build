{"version":3,"file":"js/DashboardRoute.1698318551905.74ba7183576f01505e4d.js","mappings":"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","sources":["webpack:///./src/Icons/CriticalIcon.js","webpack:///./src/Icons/InfoIcon.js","webpack:///./src/SmartComponents/ResourceOptimization/ResourceOptimizationCard.js","webpack:///./src/PresentationalComponents/Dashboard/Dashboard.js","webpack:///./src/PresentationalComponents/FailState/FailState.js","webpack:///./src/PresentationalComponents/IconInline/IconInline.js","webpack:///./src/Icons/WarningIcon.js","webpack:///./src/PresentationalComponents/IconList/IconList.js","webpack:///./src/PresentationalComponents/IconList/IconListItem.js","webpack:///./src/PresentationalComponents/MarketingBanner/MarketingBanner.js","webpack:///./src/PresentationalComponents/Template/ExpandableCardTemplate.js","webpack:///./src/PresentationalComponents/DownloadReport/DownloadReport.js","webpack:///./src/PresentationalComponents/Template/TemplateCard.js","webpack:///./src/PresentationalComponents/ZeroState/ZeroState.js","webpack:///./src/Utilities/Common.js"],"sourcesContent":["import './Icons.scss';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport React from 'react';\n\nconst CriticalIcon = () => <ExclamationCircleIcon className=\"insd-c-dashboard__icon-critical\"/>;\n\nexport default CriticalIcon;\n","import './Icons.scss';\n\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport React from 'react';\n\nconst InfoIcon = () => <InfoCircleIcon className=\"insd-c-dashboard__icon-info\"/>;\n\nexport default InfoIcon;\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { Button } from '@patternfly/react-core';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst ResourceOptimizationCard = ({\n    fetchRosIsConfigured, rosIsConfiguredFetchStatus, rosIsConfigured\n}) =>{\n    const intl = useIntl();\n\n    useEffect(() => {\n        fetchRosIsConfigured();\n    }, [fetchRosIsConfigured]);\n\n    const waitingForDataUrl = `/?with_waiting_for_data=true`;\n    const suggestionsUrl = `/?with_suggestions=true`;\n    const allSystemsUrl = `/`;\n\n    return (\n        <ExpandableCardTemplate\n            appName=\"ResourceOptimization\"\n            className='insd-m-toggle-right-on-md'\n            title={intl.formatMessage(messages.resourceOptimizationCardHeader)}\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_ros') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_ros', isExpanded)}\n            body={\n                <TemplateCardBody>\n                    {\n                        rosIsConfiguredFetchStatus === 'fulfilled' &&\n                        (\n                            rosIsConfigured.success ?\n                                <React.Fragment>\n                                    <div>{ intl.formatMessage(messages.rosSystemsGenericMessage)}</div>\n                                    <Flex\n                                        direction={{ default: 'column' }}\n                                        alignItems={{ default: 'alignItemsCenter' }}\n                                    >\n                                        <Flex\n                                            justifyContent={{ default: 'justifyContentCenter' }}\n                                            spaceItems={{ default: 'spaceItemsLg', sm: 'spaceItems2xl' }}>\n                                            {\n                                                rosIsConfigured.systems_stats.waiting_for_data > 0 &&\n                                                    <Flex\n                                                        direction={{ default: 'column' }}\n                                                        spaceItems={{ default: 'spaceItemsNone' }}\n                                                        alignItems={{ default: 'alignItemsCenter' }}>\n                                                        <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                            {rosIsConfigured.systems_stats.waiting_for_data}\n                                                        </span>\n                                                        <InsightsLink app='ros' to={waitingForDataUrl}>\n                                                            <span className='pf-u-font-size-sm'>\n                                                                <span>{intl.formatMessage(messages.waitingForData)}</span>\n                                                            </span>\n                                                        </InsightsLink>\n                                                    </Flex>\n                                            }\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.systems_stats.with_suggestions}\n                                                </span>\n                                                <InsightsLink app='ros' to={suggestionsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.systemsWithSuggestions)}\n                                                    </span>\n                                                </InsightsLink>\n                                            </Flex>\n                                            <Flex\n                                                direction={{ default: 'column' }}\n                                                spaceItems={{ default: 'spaceItemsNone' }}\n                                                alignItems={{ default: 'alignItemsCenter' }}>\n                                                <span className='pf-u-font-size-2xl pf-u-color-100 pf-u-font-weight-bold'>\n                                                    {rosIsConfigured.count}\n                                                </span>\n                                                <InsightsLink app='ros' to={allSystemsUrl}>\n                                                    <span className='pf-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.totalSystems)}\n                                                    </span>\n                                                </InsightsLink>\n                                            </Flex>\n                                        </Flex>\n                                    </Flex>\n\n                                </React.Fragment>\n                                : <Flex\n                                    direction={{ default: 'column' }}\n                                    alignItems={{ default: 'alignItemsCenter' }}\n                                >\n                                    <FlexItem>{ intl.formatMessage(messages.rosSystemsNotConfiguredMessage)}</FlexItem>\n                                    <InsightsLink app='ros' to='/'>\n                                        <Button\n                                            variant='secondary'\n                                            isSmall>\n                                            {intl.formatMessage(messages.rosCardConfigureSystemsCTA)}\n                                        </Button>\n                                    </InsightsLink>\n                                </Flex>\n                        )\n\n                    }\n                    {rosIsConfiguredFetchStatus === 'pending' && <Loading />}\n                    {rosIsConfiguredFetchStatus === 'rejected' && <FailState appName='Resource optimization' />}\n                </TemplateCardBody>\n            }\n        />\n\n    );\n};\n\nResourceOptimizationCard.propTypes = {\n    fetchRosIsConfigured: PropTypes.func,\n    rosIsConfigured: PropTypes.object,\n    rosIsConfiguredFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    rosIsConfigured: DashboardStore.rosIsConfigured,\n    rosIsConfiguredFetchStatus: DashboardStore.rosIsConfiguredFetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRosIsConfigured: () => dispatch(AppActions.fetchRosIsConfigured())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResourceOptimizationCard);\n","import './dashboard.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts';\nimport { PageSection, PageSectionVariants, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { Suspense, lazy, useContext, useEffect } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Masonry from 'react-masonry-css';\nimport { PermissionContext } from '../../App';\nimport ZeroState from '../ZeroState/ZeroState';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadsPropType } from '../../Utilities/Common';\nimport ResourceOptimizationCard from '../../SmartComponents/ResourceOptimization/ResourceOptimizationCard';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AdvisorCard = lazy(() => import('../../SmartComponents/Advisor/Advisor'));\nconst ComplianceCard = lazy(() => import('../../SmartComponents/Compliance/ComplianceCard'));\nconst VulnerabilityCard = lazy(() => import('../../SmartComponents/Vulnerability/VulnerabilityCard'));\nconst SystemInventoryHeader = lazy(() => import('../../SmartComponents/SystemInventory/SystemInventoryHeader'));\nconst NewRules = lazy(() => import('../../SmartComponents/NewRules/NewRules'));\nconst PatchManagerCard = lazy(() => import('../../SmartComponents/PatchManager/PatchManagerCard'));\nconst RemediationsCard = lazy(() => import('../../SmartComponents/Remediations/RemediationsCard'));\nconst Footer = lazy(() => import('../../SmartComponents/Footer/Footer'));\nconst DriftCard = lazy(() => import('../../SmartComponents/Drift/DriftCard'));\n\n//We will be using this later. commenting out for now.\nconst Dashboard = (/*{ workloads }*/) => {\n    const permission = useContext(PermissionContext);\n    const intl = useIntl();\n    const newRules = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities.recent_rules);\n    const chrome = useChrome();\n    const breakpointColumnsObj = {\n        default: 2,\n        992: 1\n    };\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`Dashboard | Red Hat Insights`);\n    }, [chrome]);\n\n    return permission.hasSystems  ?\n        <React.Fragment>\n            <PageSection isWidthLimited variant={ PageSectionVariants.light } className=\"insd-c-dashboard-header\">\n                <Title headingLevel=\"h1\" size=\"2xl\" className=\"pf-u-screen-reader\">\n                    {intl.formatMessage(messages.dashboardTitle)}\n                </Title>\n                <Suspense fallback={ <Loading /> }>\n                    <SystemInventoryHeader />\n                </Suspense>\n            </PageSection>\n            <PageSection isFilled={true} isWidthLimited>\n                <Grid hasGutter>\n                    <Suspense fallback={ <Loading /> }>\n                        {newRules?.length > 0 && permission.vulnerability && <GridItem>\n                            <NewRules />\n                        </GridItem> }\n                    </Suspense>\n                    <Masonry\n                        breakpointCols={breakpointColumnsObj}\n                        className=\"ins-l-masonry\"\n                        columnClassName=\"ins-l-masonry_column\"\n                    >\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.vulnerability &&\n                                <VulnerabilityCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.advisor &&\n                                <AdvisorCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.compliance &&\n                                <ComplianceCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.remediations &&\n                                <RemediationsCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.patch &&\n                                <PatchManagerCard />\n                            }\n                        </Suspense>\n                        <Suspense fallback={ <Loading /> }>\n                            {permission.ros &&\n                                <ResourceOptimizationCard/>\n                            }\n                        </Suspense>\n                        <Suspense>\n                            {permission.drift && permission.notifications\n                            && <DriftCard/>}\n                        </Suspense>\n                    </Masonry>\n                </Grid>\n            </PageSection>\n            <Footer supportsSap={ true }/>\n        </React.Fragment>\n        :\n        <ZeroState/>;\n\n};\n\nDashboard.propTypes = {\n    workloads: workloadsPropType\n};\n\nexport default connect(({ DashboardStore }) => ({ workloads: DashboardStore.workloads }), null)(Dashboard);\n","import './FailState.scss';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst FailState = ({ appName, isSmall }) => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState\n            variant={ EmptyStateVariant.full }\n            className={ `insd-c-dashboard__error-state ${ isSmall && 'insd-c-dashboard__error-state--isSmall' }` }>\n            { isSmall\n                ? <EmptyStateBody>{intl.formatMessage(messages.errorStateTitle, { appName })}</EmptyStateBody>\n                : <Title headingLevel=\"h2\" size=\"md\"> {intl.formatMessage(messages.errorStateTitle, { appName })} </Title>\n            }\n        </EmptyState>\n    );\n};\n\nFailState.propTypes = {\n    appName: PropTypes.string.isRequired,\n    isSmall: PropTypes.bool\n};\n\nexport default FailState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport WarningIcon from '../../Icons/WarningIcon';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport './IconInline.scss';\n\nconst checkState = {\n    warning: WarningIcon,\n    info: InfoIcon,\n    critical: CriticalIcon\n};\n\nexport const IconInline = ({ message, state, systemInventory }) => {\n    const Icon = checkState[state] || React.Fragment;\n\n    return (\n        <div className={ `insd-c-dashboard__info-inline ${systemInventory ? ' insd-m-padding-top' : ''}` }>\n            <Icon aria-hidden=\"true\"/>\n            <p>{ message }</p>\n        </div>\n    );\n};\n\nIconInline.propTypes = {\n    message: propTypes.string,\n    state: propTypes.string,\n    systemInventory: propTypes.bool\n};\n\nexport default IconInline;\n","import './Icons.scss';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport React from 'react';\n\nconst WarningIcon = () => <ExclamationTriangleIcon className=\"insd-c-dashboard__icon-warning\"/>;\n\nexport default WarningIcon;\n","import './_icon-list.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconList = ({ iconListStyle, className, children }) => {\n    const IconListClasses = classNames(className, 'insd-c-icon-list');\n\n    return <ul className={ IconListClasses } style={ iconListStyle }>\n        {children}\n    </ul>;\n};\n\nexport default IconList;\n\nIconList.propTypes = {\n    children: propTypes.any.isRequired,\n    iconListStyle: propTypes.string,\n    className: propTypes.string\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst IconListItem = ({ className, iconListItemStyle, children }) => {\n    const IconListItemClasses = classNames(className, 'insd-c-icon-list__item');\n\n    return <li className={ IconListItemClasses } style={ iconListItemStyle }>\n        {children}\n    </li>;\n};\n\nexport default IconListItem;\n\nIconListItem.propTypes = {\n    className: propTypes.string,\n    iconListItemStyle: propTypes.string,\n    children: propTypes.any.isRequired\n};\n","import './_marketing-banner.scss';\n\nimport { PageSection } from '@patternfly/react-core';\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst MarketingBanner = ({ className, hasGraphic, graphicRight, dark1000, fullBleed, style, children }) => {\n\n    const MarketingBannerSectionClasses = classNames(\n        className,\n        'insd-c-marketing-banner',\n        { [`insd-m-with-graphic`]: hasGraphic },\n        { [`insd-m-graphic-right`]: graphicRight },\n        { [`insd-m-dark-1000 pf-m-dark-1000`]: dark1000 },\n        { [`insd-m-full-bleed`]: fullBleed }\n    );\n\n    return <PageSection\n        className={ MarketingBannerSectionClasses }\n        style={ style }\n        isWidthLimited>\n        {children}\n    </PageSection>;\n};\n\nexport default MarketingBanner;\n\nMarketingBanner.propTypes = {\n    children: propTypes.any.isRequired,\n    className: propTypes.string,\n    style: propTypes.any,\n    graphicRight: propTypes.bool,\n    hasGraphic: propTypes.bool,\n    dark1000: propTypes.bool,\n    fullBleed: propTypes.bool,\n    isWidthLimited: propTypes.bool\n};\n","import { Card, CardExpandableContent, CardHeader, CardTitle, Divider, Title } from '@patternfly/react-core/dist/esm/components';\nimport React, { useState } from 'react';\n\nimport propTypes from 'prop-types';\n\nexport const ExpandableCardTemplate = ({ className, appName, title, header, body, hasDivider, isExpanded = true, isExpandedCallback, ...props }) => {\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    return <Card\n        className={`insd-c-dashboard__card insd-c-dashboard__card--${appName} ${className}`}\n        id={`insd-c-dashboard__card--${appName}`}\n        isExpanded={expanded}\n        {...props}>\n        {hasDivider && <Divider inset={{ md: 'insetLg' }} />}\n        <CardHeader\n            onExpand={() => { setExpanded(!expanded); isExpandedCallback && isExpandedCallback(!expanded); }}\n            toggleButtonProps={{\n                id: `insd-c-dashboard__card-title--${appName}-toggle-button`,\n                'aria-label': 'Details',\n                'aria-labelledby': `insd-c-dashboard__card-title--${appName} toggle-button`,\n                'aria-expanded': expanded\n            }}>\n            {title && <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    {title}\n                </Title>\n            </CardTitle>\n            }\n            {header}\n        </CardHeader>\n        <CardExpandableContent>\n            {body}\n        </CardExpandableContent>\n    </Card>;\n};\n\nExpandableCardTemplate.propTypes = {\n    appName: propTypes.string,\n    className: propTypes.string,\n    title: propTypes.any,\n    header: propTypes.any,\n    body: propTypes.any,\n    hasDivider: propTypes.any,\n    isExpanded: propTypes.bool,\n    isExpandedCallback: propTypes.func,\n    footer: propTypes.any\n};\n","import './DownloadReport.scss';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport React from 'react';\n\nexport const DownloadReport = () => (\n    <Button className=\"insd-c-button-report-download\" variant=\"link\" icon={ <DownloadIcon /> }>\n        Report\n    </Button>\n);\n\nexport default DownloadReport;\n","import './TemplateCard.scss';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    Title\n} from '@patternfly/react-core/dist/esm/components/';\n\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport DownloadReport from '../DownloadReport/DownloadReport';\nimport IconInline from '../IconInline/IconInline';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const TemplateCard = ({ appName, children, ...props }) => (\n    <Card className={ `insd-c-dashboard__card insd-c-dashboard__card--${appName}` } { ...props }>\n        { children }\n    </Card>\n);\n\nTemplateCard.propTypes = {\n    appName: propTypes.string,\n    children: propTypes.any\n};\n\nexport const TemplateCardHead = ({ children, ...props }) => (\n    <CardHeader { ...props }>\n        {children}\n    </CardHeader>\n);\n\nTemplateCardHead.propTypes = {\n    children: propTypes.any\n};\n\nexport const TemplateCardActions = ({ children, downloadReport, iconInlineMessage, iconInlineState, ...props }) => (\n    <CardActions { ...props }>\n        { iconInlineMessage &&\n            <IconInline message={ iconInlineMessage } state={ iconInlineState }/>\n        }\n        { downloadReport &&\n            <DownloadReport />\n        }\n        {children}\n    </CardActions>\n);\n\nTemplateCardActions.propTypes = {\n    children: propTypes.any,\n    downloadReport: propTypes.any,\n    iconInlineMessage: propTypes.string,\n    iconInlineState: propTypes.string\n};\n\nexport const TemplateCardHeader = ({ title, onDownload, subtitle, children, ...props }) => (\n    <CardHeader className='insd-c-dashboard__card--header'  { ...props }>\n        <CardTitle>\n            <Title headingLevel='h4' size='lg'>\n                { title }\n            </Title>\n            { subtitle &&\n                <div>\n                    { subtitle }\n                </div>\n            }\n        </CardTitle>\n        <CardActions>\n            { children }\n            { onDownload &&\n                <Button variant='link' icon={ <DownloadIcon/> } onClick={ onDownload }>Report</Button>\n            }\n        </CardActions>\n    </CardHeader>\n);\n\nTemplateCardHeader.propTypes = {\n    title: propTypes.string,\n    titleClassName: propTypes.string,\n    subtitle: propTypes.any,\n    children: propTypes.any,\n    onDownload: propTypes.func\n};\n\nexport const TemplateCardBody = ({ children, isHorizontalLayout, ...props }) => (\n    <CardBody className={ `insd-c-dashboard__card--body ${isHorizontalLayout ? ' insd-m-horizontal' : ''}` } { ...props }>\n        { children }\n    </CardBody>\n);\n\nTemplateCardBody.propTypes = {\n    isHorizontalLayout: propTypes.any,\n    children: propTypes.any\n};\n\nexport const TemplateCardFooter = ({ children, ...props }) => (\n    <CardFooter className='insd-c-dashboard__card--footer' { ...props }>\n        { children }\n    </CardFooter>\n);\n\nTemplateCardFooter.propTypes = {\n    children: propTypes.any\n};\n","import './_zero-state.scss';\n\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    List,\n    ListItem,\n    PageSection,\n    TextContent,\n    Title\n} from '@patternfly/react-core/dist/esm/components/index';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport API from '../../Utilities/Api';\nimport IconList from '../IconList/IconList';\nimport IconListItem from '../IconList/IconListItem';\nimport ImgInsSmartMgmt from '../../images/img__ins-and-sm.png';\nimport MarketingBanner from '../MarketingBanner/MarketingBanner';\nimport { UI_BASE, VULNERABILITIES_CVES_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink/InsightsLink';\n\n// eslint-disable-next-line no-unused-vars\nconst SortableTable = () => {\n    const columns = [\n        { title: 'CVE ID', transforms: [sortable] },\n        { title: 'Publish Date', transforms: [sortable] },\n        { title: 'Impact', transforms: [sortable] },\n        { title: 'CVSS Base Score', transforms: [sortable] }\n    ];\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSort] = useState({});\n    const dateFormatter = (date) => {\n        const newDate = (new Date(date)).toString().split(' ');\n        return `${newDate[2]} ${newDate[1]} ${newDate[3]}`;\n    };\n\n    const rowBuilder = data => data.map(row => [{\n        title: <a href={ ` https://access.redhat.com/security/cve/${row.id}` }\n            target='_blank' rel='noreferrer'>{row.id}</a>\n    },\n    { title: <span>{dateFormatter(row.attributes.public_date)}</span> },\n    { title: <span>{row.attributes.impact}</span> },\n    { title: <span>{row.attributes.cvss3_score}</span> }]);\n    // const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchCves = async () => {\n            try {\n                const cves = (await API.get(VULNERABILITIES_CVES_URL, {}, { sort: '-public_date', limit: 4 })).data;\n                setRows(rowBuilder(cves.data));\n            } catch (error) {\n                throw `${error}`;\n            }\n        };\n\n        fetchCves();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onSort = (_event, index, direction) => {\n        const sortedRows = rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n        setSort({ index, direction });\n        setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n    };\n\n    return <Table aria-label='Sortable Table' sortBy={ sortBy } onSort={ onSort } cells={ columns } rows={ rows }>\n        <TableHeader />\n        <TableBody />\n    </Table>;\n};\n\nconst ZeroState = () => {\n    const intl = useIntl();\n    const { hideGlobalFilter } = useChrome();\n\n    useEffect(() => {\n        hideGlobalFilter?.();\n\n        return () => {\n            hideGlobalFilter?.(false);\n        };\n    }, []);\n\n    return <div className='insd-c-marketing-page'>\n        <MarketingBanner\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            isWidthLimited\n            style={ {\n                '--ins-c-marketing-banner--graphic--width-on-md': '200px',\n                '--ins-c-marketing-banner--graphic--width-on-xl': '400px'\n            } }>\n            <Grid>\n                <GridItem>\n                    <Flex direction={ { default: 'column' } }>\n                        <FlexItem>\n                            <Title headingLevel='h1' size='2xl'>\n                                {intl.formatMessage(messages.noSystemsTitle)}\n                            </Title>\n                        </FlexItem>\n                        <FlexItem spacer={ { default: 'spacer2xl' } }>\n                            <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <p className='ins-c-text--black-400'>{intl.formatMessage(messages.singleConsistent)}</p>\n                            </div>\n                        </FlexItem>\n                        <FlexItem>\n                            <InsightsLink app='registration' to=\"/\">\n                                <Button\n                                    isLarge\n                                    component='a'\n                                    variant='primary'\n                                    style={{ color: 'white' }}\n                                    href={ `${UI_BASE}/registration` }>\n                                    {intl.formatMessage(messages.registerYourSystems)}\n                                </Button>\n                            </InsightsLink>\n                        </FlexItem>\n                        <FlexItem>\n                            <Button\n                                className='pf-m-plain'\n                                component='a'\n                                variant='secondary'\n                                target='_blank'\n                                rel='noreferrer'\n                                href='https://www.redhat.com/en/technologies/management/insights'>\n                                {intl.formatMessage(messages.learnmoreRHI)}&nbsp;&nbsp;&nbsp;\n                                <ArrowRightIcon />\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </GridItem>\n            </Grid>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Grid lg={ 6 } hasGutter>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zslblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zslblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zslblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zslblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n                <GridItem>\n                    <Card style={ { height: '100%' } }>\n                        <CardHeader>\n                            <TextContent>\n                                <Title headingLevel='h2'>{intl.formatMessage(messages.zsrblTitle)}</Title>\n                                <p>{intl.formatMessage(messages.zsrblBody)}</p>\n                            </TextContent>\n                        </CardHeader>\n                        <CardBody>\n                            <IconList>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb1)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb2)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb3)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb4)}</IconListItem>\n                                <IconListItem>{intl.formatMessage(messages.zsrblb5)}</IconListItem>\n                            </IconList>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n            </Grid>\n        </PageSection>\n        <MarketingBanner\n            isWidthLimited='true'\n            hasGraphic\n            graphicRight\n            dark1000\n            fullBleed\n            style={ {\n                '--ins-c-marketing-banner--graphic--width': '400px'\n            } }>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerLg' } }>\n                    <Title headingLevel='h3' size='lg'>\n                        {intl.formatMessage(messages.dataPrivacyAndControlsTitle)}\n                    </Title>\n                </FlexItem>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <p className='insd-c-width-limiter ins-c-text--black-400'\n                        style={ { '--insd-c-width-limiter--MaxWidth': '70ch' } }>\n                        {intl.formatMessage(messages.dataPrivacyAndControls)}\n                    </p>\n                </FlexItem>\n                <FlexItem>\n                    <Button\n                        component='a'\n                        target='_blank'\n                        rel='noreferrer'\n                        href={ `./security/insights` }>\n                        {intl.formatMessage(messages.securityRedirect)}\n                    </Button>\n                </FlexItem>\n            </Flex>\n        </MarketingBanner>\n        <PageSection isWidthLimited>\n            <Flex direction={ { default: 'column' } }>\n                <FlexItem spacer={ { default: 'spacerXl' } }>\n                    <TextContent>\n                        <Title headingLevel='h3'>\n                            {intl.formatMessage(messages.insightsandsatellite)}\n                        </Title>\n                        <div className='insd-c-width-limiter' style={ { '--insd-c-width-limiter--MaxWidth': '900px' } }>\n                            <p>{intl.formatMessage(messages.satellite)}</p>\n                        </div>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem>\n                    <Grid hasGutter>\n                        <GridItem md={ 6 } lg={ 5 } mdRowSpan={ 3 }>\n                            <img src={ ImgInsSmartMgmt } alt='Insights Satellite' />\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 }>\n                            <div className='insd-c-width-limiter pf-u-pt-lg-on-lg' style={ { '--insd-c-width-limiter--MaxWidth': '600px' } }>\n                                <List>\n                                    <ListItem>{intl.formatMessage(messages.rhm1)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm2)}</ListItem>\n                                    <ListItem>{intl.formatMessage(messages.rhm3)}</ListItem>\n                                </List>\n                            </div>\n                        </GridItem>\n                        <GridItem md={ 6 } lg={ 7 } className='pf-u-pl-lg'>\n                            <Flex>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/technologies/management/satellite'>\n                                        {intl.formatMessage(messages.learnmore)}\n                                    </Button>\n                                </FlexItem>\n                                <FlexItem>\n                                    <Button\n                                        className='pf-m-secondary'\n                                        component='a'\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        href='https://www.redhat.com/en/contact'>\n                                        {intl.formatMessage(messages.contactsales)}\n                                    </Button>\n                                </FlexItem>\n                            </Flex>\n                        </GridItem>\n                    </Grid>\n                </FlexItem>\n            </Flex>\n        </PageSection>\n    </div>;\n};\n\nexport default ZeroState;\n","// For common helpers used throughout app\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nconst SAP_KEYS = ['SAP', 'All workloads'];\n\nconst capitalize = (string) => string[0].toUpperCase() + string.substring(1);\nconst workloadsPropType = (props, propName, componentName) => {\n    let error;\n    const prop = props?.[propName];\n    if (typeof props !== 'object') {\n        error = new Error(`\\`${componentName}\\` only accepts object as \\`${propName}\\` prop.`);\n    }\n\n    const keys = Object.keys(prop);\n    if (keys.some((key) => !SAP_KEYS.includes(key))) {\n        error = new Error(`\\`${componentName}\\` accepts either SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    if (keys.find((key) => SAP_KEYS.includes(key))?.length > 1) {\n        error = new Error(`\\`${componentName}\\` accepts only one of SAP or All workloads as \\`${propName}.\\` prop.`);\n    }\n\n    const values = Object.values(prop);\n    const foundIncorrect = values.findIndex(({ isSelected }) => isSelected !== undefined && typeof isSelected !== 'boolean');\n    if (foundIncorrect !== -1) {\n        error = new Error(`\\`${componentName}\\` requires isSelected as boolean prop in \\`${propName}.${keys?.[foundIncorrect]}\\`.`);\n    }\n\n    return error;\n};\n\nconst globalFilters = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n            && { ansible: 'not_nil' },\n        ...workloads?.['Microsoft SQL']?.isSelected\n            && { mssql: 'not_nil' },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n\nconst supportsGlobalFilter = (selectedTags, workloads, SID) => workloads === undefined ||\n    !Object.values(workloads).map(value => value.isSelected).reduce((res, cur) => res || cur, false) &&\n    selectedTags.length === 0 && Object.entries(SID).length === 0;\n\nexport { capitalize, workloadsPropType, globalFilters, supportsGlobalFilter };\n"],"names":["React","ExclamationCircleIcon","className","InfoCircleIcon","ResourceOptimizationCard","_ref","fetchRosIsConfigured","rosIsConfiguredFetchStatus","rosIsConfigured","intl","useIntl","useEffect","ExpandableCardTemplate","appName","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","body","TemplateCardBody","success","Flex","direction","default","alignItems","justifyContent","spaceItems","sm","systems_stats","waiting_for_data","InsightsLink","app","to","with_suggestions","count","FlexItem","Button","variant","isSmall","Loading","FailState","propTypes","PropTypes","connect","_ref2","DashboardStore","dispatch","AppActions","AdvisorCard","lazy","ComplianceCard","VulnerabilityCard","SystemInventoryHeader","NewRules","PatchManagerCard","RemediationsCard","Footer","DriftCard","Dashboard","permission","useContext","PermissionContext","newRules","useSelector","vulnerabilities","recent_rules","chrome","useChrome","updateDocumentTitle","hasSystems","PageSection","isWidthLimited","PageSectionVariants","Title","headingLevel","size","Suspense","fallback","isFilled","Grid","hasGutter","length","vulnerability","GridItem","Masonry","breakpointCols","columnClassName","advisor","compliance","remediations","patch","ros","drift","notifications","supportsSap","ZeroState","workloads","workloadsPropType","EmptyState","EmptyStateVariant","concat","EmptyStateBody","checkState","warning","ExclamationTriangleIcon","info","InfoIcon","critical","CriticalIcon","IconInline","message","state","systemInventory","Icon","IconList","iconListStyle","children","IconListClasses","classNames","style","IconListItem","iconListItemStyle","IconListItemClasses","MarketingBanner","hasGraphic","graphicRight","dark1000","fullBleed","MarketingBannerSectionClasses","_defineProperty","header","hasDivider","_ref$isExpanded","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","expanded","setExpanded","Card","_extends","id","Divider","inset","md","CardHeader","onExpand","toggleButtonProps","CardTitle","CardExpandableContent","footer","icon","DownloadIcon","TemplateCard","TemplateCardActions","_ref3","downloadReport","iconInlineMessage","iconInlineState","_excluded3","CardActions","DownloadReport","TemplateCardHeader","_ref4","onDownload","subtitle","_excluded4","onClick","titleClassName","_ref5","isHorizontalLayout","_excluded5","CardBody","hideGlobalFilter","spacer","isLarge","component","color","href","UI_BASE","target","rel","ArrowRightIcon","lg","height","TextContent","mdRowSpan","src","ImgInsSmartMgmt","alt","List","ListItem","SAP_KEYS","capitalize","string","toUpperCase","substring","propName","componentName","_keys$find","error","prop","_typeof","Error","keys","Object","some","key","includes","find","foundIncorrect","values","findIndex","isSelected","undefined","globalFilters","SID","_workloads$SAP","_workloads$AnsibleAu","_workloads$Microsoft","generateFilter","system_profile","_objectSpread","SAP","sap_system","ansible","mssql","sap_sids","arrayEnhancer","supportsGlobalFilter","selectedTags","map","value","reduce","res","cur","entries"],"sourceRoot":""}