{"version":3,"file":"js/968.8e5f44a2946b56c93702.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Compliance/ComplianceCard.js"],"sourcesContent":["import './ComplianceCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport React, { useEffect } from 'react';\nimport { TemplateCardActions, TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport { supportsGlobalFilter, workloadsPropType } from '../../Utilities/Common';\n\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport FilterNotSupported from '../../PresentationalComponents/FilterNotSupported';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nconst ComplianceCard = ({ fetchCompliance, complianceFetchStatus, complianceSummary, selectedTags, workloads, SID }) => {\n    useEffect(() => {\n        fetchCompliance();\n    }, [fetchCompliance]);\n\n    const intl = useIntl();\n\n    /*\n        * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n        * complianceSummary\n        */\n    const getTopThreePolicies = function (compliance) {\n        const complianceTopThree = compliance.data.length > 1 ? compliance.data.slice(0, 3) :\n            compliance.data.slice();\n\n        return complianceTopThree;\n    };\n\n    const navigateTo = useChromePush();\n\n    return (\n        <ExpandableCardTemplate\n            appName='Compliance'\n            className='ins-c-card__compliance insd-m-toggle-right-on-md'\n            { ...complianceFetchStatus !== 'pending' ? {\n                'data-ouia-safe': true\n            } : { 'data-ouia-safe': false } }\n            title={ intl.formatMessage(messages.complianceTitle) }\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_compliance') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_compliance', isExpanded)}\n            header={\n                <TemplateCardActions />\n            }\n            body={\n                <TemplateCardBody>\n                    {supportsGlobalFilter(selectedTags, workloads, SID) ?\n                        <React.Fragment>\n                            {complianceFetchStatus === 'fulfilled' &&\n                                (Array.isArray(complianceSummary.data) &&\n                                    (complianceSummary.data.length > 0 ? <React.Fragment>\n                                        <DataList className='insd-m-no-padding insd-m-no-top-border' isCompact>\n                                            {getTopThreePolicies(complianceSummary).map((policy, index) =>\n                                                <DataListItem key={ index }>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <DataListCell key={ index }>\n                                                                    <Flex\n                                                                        direction={ { default: 'column' } }\n                                                                        spaceItems={ { default: 'spaceItemsNone' } }\n                                                                    >\n                                                                        <Button\n                                                                            id={ `compliance-link-${index + 1}` }\n                                                                            className='ins-c-compliance__policy-link'\n                                                                            component='a'\n                                                                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/reports/${policy.id}`)}\n                                                                            href={ `${UI_BASE}/compliance/reports/${policy.id}` }\n                                                                            variant='link'\n                                                                            isInline\n                                                                        >\n                                                                            {policy.attributes.name}\n                                                                        </Button>\n                                                                        <Flex>\n                                                                            <FlexItem flex={ { default: 'flex_1' } }>\n                                                                                <p>RHEL { policy.attributes.os_version }</p>\n                                                                            </FlexItem>\n                                                                            <Flex flex={{ default: 'None' }}>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantHostCount,\n                                                                                        { count: policy.attributes.test_result_host_count }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantScore,\n                                                                                        {\n                                                                                            score: +(policy.attributes.test_result_host_count &&\n                                                                                                (100 * (\n                                                                                                    policy.attributes.compliant_host_count /\n                                                                                                    policy.attributes.test_result_host_count\n                                                                                                ))\n                                                                                            ).toFixed(1)\n                                                                                        }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                            </Flex>\n                                                                        </Flex>\n                                                                    </Flex>\n                                                                </DataListCell>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                        <Button\n                                            className='ins-c-compliance__policy-link'\n                                            component='a'\n                                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/reports/`)}\n                                            href={ `${UI_BASE}/compliance/reports/` }\n                                            variant='link'\n                                            isInline\n                                        >\n                                            {complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                                                complianceSummary.data.length - 3 >= 1 &&\n                                                `${complianceSummary.data.length - 3} more reports`\n                                            }\n                                        </Button>\n                                    </React.Fragment> : (\n                                        <EmptyState className='ins-c-compliance__empty-state' variant={ EmptyStateVariant.full }>\n                                            <Title headingLevel='h5' size='md'>\n                                                {intl.formatMessage(messages.complianceEmptyStateTitle)}\n                                            </Title>\n                                            <EmptyStateBody>\n                                                {intl.formatMessage(messages.complianceEmptyStateBody)}\n                                            </EmptyStateBody>\n                                            <EmptyStateSecondaryActions>\n                                                <Button\n                                                    variant='link'\n                                                    onClick={e => navigateTo(e, `${UI_BASE}/compliance/scappolicies/new`)}\n                                                    href={ `${UI_BASE}/compliance/scappolicies/new` }\n                                                    component='a'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction1)}\n                                                </Button>\n                                                <Button\n                                                    variant='link'\n                                                    component='a'\n                                                    href='https://www.open-scap.org/getting-started/'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction2)}\n                                                </Button>\n                                            </EmptyStateSecondaryActions>\n                                        </EmptyState>\n                                    ))\n                                )\n                            }\n                            {complianceFetchStatus === 'pending' && (<Loading />)}\n                            {complianceFetchStatus === 'rejected' && <FailState appName='Compliance' />}\n                        </React.Fragment>\n                        : <FilterNotSupported\n                            onClick={e => navigateTo(e, `${UI_BASE}/compliance/`)}\n                            href={ `${UI_BASE}/compliance/` }\n                            title={ intl.formatMessage(messages.filterNotApplicable) }\n                            appName={ intl.formatMessage(messages.complianceTitle) }\n                        />\n                    }\n                </TemplateCardBody>\n            }\n        />\n    );\n};\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.array,\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    complianceSummary: DashboardStore.complianceSummary,\n    complianceFetchStatus: DashboardStore.complianceFetchStatus,\n    selectedTags: DashboardStore.selectedTags,\n    workloads: DashboardStore.workloads,\n    SID: DashboardStore.SID\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"names":["ComplianceCard","fetchCompliance","complianceFetchStatus","complianceSummary","selectedTags","workloads","SID","useEffect","compliance","intl","useIntl","navigateTo","useChromePush","appName","className","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","header","body","supportsGlobalFilter","Array","isArray","data","length","isCompact","slice","map","policy","index","key","dataListCells","direction","default","spaceItems","id","component","onClick","e","UI_BASE","href","variant","isInline","attributes","name","flex","os_version","count","test_result_host_count","score","compliant_host_count","toFixed","EmptyStateVariant","headingLevel","size","propTypes","PropTypes","workloadsPropType","routerParams","connect","DashboardStore","dispatch","url","AppActions"],"sourceRoot":""}