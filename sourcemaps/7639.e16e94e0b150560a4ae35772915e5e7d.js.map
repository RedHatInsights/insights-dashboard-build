{"version":3,"file":"js/7639.426237031318c5950231.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/sort-up-icon.js","webpack:///./src/SmartComponents/Drift/DriftDropDown.js","webpack:///./src/SmartComponents/Drift/DriftEmptyState.js","webpack:///./src/SmartComponents/Drift/DriftCard.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretDownIcon = createIcon(CaretDownIconConfig);\n\nexport default CaretDownIcon;","import { createIcon } from '../createIcon';\n\nexport const SortUpIconConfig = {\n  name: 'SortUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SortUpIcon = createIcon(SortUpIconConfig);\n\nexport default SortUpIcon;","\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { translateDriftDropdownItems } from './utils';\n\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownToggle\n} from '@patternfly/react-core';\n\nconst DriftDropDown = ({ fetchDriftData, selectedFilter }) => {\n\n    const intl = useIntl();\n    const dropdownItems = useRef([]);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        dropdownItems.current = translateDriftDropdownItems(intl);\n    }, [intl]);\n\n    const onItemClick = (item, itemRef) => {\n        fetchDriftData(item);\n        setIsOpen((prevOpen) => !prevOpen);\n        itemRef.focus();\n    };\n\n    return <Dropdown\n        toggle={\n            <DropdownToggle onToggle={(_event, val) => setIsOpen(val)} toggleIndicator={CaretDownIcon}>\n                {selectedFilter.description}\n            </DropdownToggle>\n        }\n        isOpen={isOpen}\n        dropdownItems={dropdownItems.current.map((item, key) => (\n            <DropdownItem\n                key={key}\n                ref={(el) => dropdownItems.current[key].el = el}\n                onClick={() => onItemClick(item, dropdownItems.current[key].el)}>\n                {item.description}\n            </DropdownItem>\n        ))}\n    />;\n};\n\nDriftDropDown.propTypes = {\n    fetchDriftData: PropTypes.func,\n    selectedFilter: PropTypes.shape({\n        description: PropTypes.string\n    })\n};\n\nexport default DriftDropDown;\n","import { Button, EmptyState, EmptyStateBody, Text, EmptyStateHeader, EmptyStateFooter  } from '@patternfly/react-core';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport * as ActionTypes from '../../AppConstants';\n\nexport const DriftEmptyState = () => {\n\n    const intl = useIntl();\n\n    return (\n        <EmptyState>\n            <EmptyStateHeader titleText={<>{intl.formatMessage(messages.driftEmptyStateTitle)}</>} headingLevel=\"h4\" />\n            <EmptyStateBody>\n                <Text>\n                    {intl.formatMessage(messages.driftEmptyStateBodyCreateBaseline)}\n                </Text>\n                <Text>\n                    {intl.formatMessage(messages.driftEmptyStateBodyEnableNotif)}\n                </Text>\n            </EmptyStateBody><EmptyStateFooter>\n                <Button\n                    href={`${ActionTypes.DRIFT_BASELINES_URL}`}\n                    component='a'\n                    variant=\"primary\">Go to Baselines\n                </Button>\n            </EmptyStateFooter></EmptyState>\n    );\n};\n","import './DriftCard.scss';\n\nimport * as AppActions from '../../AppActions';\nimport * as ActionTypes from '../../AppConstants';\nimport { getDate, buildCompareUrl } from './utils';\n\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport { TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport  DriftDropDown  from './DriftDropDown';\nimport messages from '../../Messages';\nimport SortUpIcon from '@patternfly/react-icons/dist/esm/icons/sort-up-icon';\nimport {\n    TextContent,\n    Divider,\n    DataList,\n    DataListItem,\n    DataListItemRow,\n    DataListCell,\n    DataListItemCells,\n    DataListWrapModifier,\n    Button,\n    TextVariants,\n    Text,\n    Bullseye,\n    Spinner,\n    Tooltip\n} from '@patternfly/react-core';\nimport { DriftEmptyState } from './DriftEmptyState';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst DriftCard = () => {\n    const chrome = useChrome();\n\n    const driftAppId = chrome.getEnvironment() === 'prod' ? '2212b1ce-4ed0-49a3-ba3c-bc147f1690fd' : 'ccb37fde-8564-4a7c-8720-d78a07e2fbde';\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [activeDrift, setActiveDrift] = useState({\n        id: 'hours-24',\n        description: intl.formatMessage(messages.driftDropDown24hours),\n        startDate: getDate(1),\n        endDate: getDate(0)\n    });\n    const [isCardExpanded, setIsCardExpanded] = useState(true);\n    const driftEvents = useSelector(({ DashboardStore }) => DashboardStore.driftEvents);\n    const driftEventFetchStatus = useSelector(({ DashboardStore }) => DashboardStore.driftEventFetchStatus);\n    const fetchDriftData = useCallback((dropDownItem) => {\n        dispatch(AppActions.fetchDrift({\n            appIds: driftAppId,\n            startDate: dropDownItem.startDate,\n            endDate: dropDownItem.endDate,\n            includePayload: true\n        }));\n        setActiveDrift(dropDownItem);\n    }, [dispatch, driftAppId]);\n\n    useEffect(() => {\n        fetchDriftData(activeDrift);\n    }, [fetchDriftData, activeDrift]);\n\n    return (\n        <ExpandableCardTemplate\n            className='insd-m-toggle-right-on-md'\n            appName='Drift'\n            isExpanded={isCardExpanded}\n            isExpandedCallback={setIsCardExpanded}\n            title={\n                <Flex>\n                    <FlexItem>\n                        {intl.formatMessage(messages.driftCardTitle)}\n                    </FlexItem>\n                    {isCardExpanded ? (\n                        <FlexItem\n                            className='ins-c-drift__drop_down'\n                            align={{ default: 'alignRight' }}>\n                            <DriftDropDown fetchDriftData={fetchDriftData} selectedFilter={activeDrift} />\n                        </FlexItem>) : null}\n                </Flex>}\n            body={\n                <React.Fragment>\n                    {driftEventFetchStatus === 'pending' ?\n                        (\n                            <React.Fragment>\n                                <Bullseye>\n                                    <Spinner className='ins-c-drift__drift_spinner' />\n                                </Bullseye>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                {driftEvents.baselineDetail?.length > 0 ?\n                                    (<TemplateCardBody>\n                                        <Flex\n                                            direction={{ default: 'column' }}\n                                            alignItems={{ default: 'alignItemsCenter' }}>\n                                            <FlexItem>\n                                                <Flex\n                                                    alignItems={{ default: 'alignItemsFlexCenter' }}\n                                                    justifyContent={{ default: 'justifyContentCenter' }}>\n                                                    <span className='pf-v5-u-font-size-2xl pf-v5-u-text-align-center pf-v5-u-font-weight-normal'>\n                                                        {driftEvents.numEvents}\n                                                    </span>\n                                                </Flex>\n                                                <TextContent\n                                                    className='insd-c-width-limiter pf-v5-u-text-align-center'>\n                                                    <p className='pf-v5-u-font-size-sm'>\n                                                        {intl.formatMessage(messages.driftNumberOfEvents)}\n                                                    </p>\n                                                </TextContent>\n                                            </FlexItem>\n                                            <Button\n                                                variant=\"secondary\"\n                                                component='a'\n                                                className='ins-c-drift__investigate_button'\n                                                href={ActionTypes.DRIFT_URL}>\n                                                {intl.formatMessage(messages.driftInventigateButtton)}\n                                            </Button>\n                                        </Flex>\n                                        <Divider />\n                                        <TextContent\n                                            className='insd-c-width-limiter ins-c-drift__top_5'>\n                                            <p className='pf-v5-u-font-size-sm pf-v5-u-font-weight-bold'>\n                                                {intl.formatMessage(messages.driftTop5)}\n                                            </p>\n                                        </TextContent>\n                                        <DataList className='insd-m-no-padding insd-m-no-top-border insd-m-no-bottom-border' isCompact>\n                                            {driftEvents.baselineDetail.slice(0, ActionTypes.TOP_BASELINES).map((baseline, index) =>\n                                                <DataListItem key={index}>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <React.Fragment key={index}>\n                                                                    <DataListCell key={`title-${index}`}\n                                                                        wrapModifier={DataListWrapModifier.truncate}>\n                                                                        <Text\n                                                                            component={TextVariants.a}\n                                                                            href={`${ActionTypes.DRIFT_BASELINES_URL}/${baseline.baselineId}`}\n                                                                        >\n                                                                            {baseline.baselineName}\n                                                                        </Text>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={`system-${index}`}\n                                                                        className='ins-c-drift__data_list_cell_system_len'>\n                                                                        <span className='pf-v5-u-font-weight-normal ins-c-drift__system_len'>\n                                                                            <SortUpIcon  color='black'/>\n                                                                            {intl.formatMessage(messages.driftSystems,\n                                                                                { systems: baseline.systems.length })}\n                                                                        </span>\n                                                                    </DataListCell>\n                                                                    <DataListCell key={`compare-${index}`}\n                                                                        className='ins-c-drift__data_list_cell_compare'>\n                                                                        <Tooltip\n                                                                            content={\n                                                                                <div>\n                                                                                    {intl.formatMessage(messages.driftCompareTooltip)}\n                                                                                </div>}>\n                                                                            <Text\n                                                                                component={TextVariants.a}\n                                                                                href={buildCompareUrl(baseline.baselineId, baseline.systems)}\n                                                                                className='ins-c-drift__text_compare'\n                                                                            >\n                                                                                {intl.formatMessage(messages.driftCompare)}\n                                                                            </Text>\n                                                                        </Tooltip>\n                                                                    </DataListCell>\n                                                                </React.Fragment>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                    </TemplateCardBody>)\n                                    : (<DriftEmptyState />)\n                                }\n                            </React.Fragment>\n                        )}\n                </React.Fragment>\n            }\n        />\n    );\n};\n\nDriftCard.propTypes = {\n    fetchDrift: PropTypes.func,\n    driftEvents: PropTypes.object,\n    driftEventFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default DriftCard;\n"],"names":["CaretDownIconConfig","name","height","width","svgPath","yOffset","xOffset","CaretDownIcon","SortUpIconConfig","SortUpIcon","DriftDropDown","_ref","fetchDriftData","selectedFilter","intl","useIntl","dropdownItems","useRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","useEffect","current","translateDriftDropdownItems","React","Dropdown","toggle","DropdownToggle","onToggle","_event","val","toggleIndicator","description","map","item","key","DropdownItem","ref","el","onClick","itemRef","prevOpen","focus","onItemClick","propTypes","PropTypes","DriftEmptyState","EmptyState","EmptyStateHeader","titleText","formatMessage","messages","driftEmptyStateTitle","headingLevel","EmptyStateBody","Text","driftEmptyStateBodyCreateBaseline","driftEmptyStateBodyEnableNotif","EmptyStateFooter","Button","href","concat","ActionTypes","component","variant","DriftCard","_driftEvents$baseline","driftAppId","useChrome","getEnvironment","dispatch","useDispatch","id","driftDropDown24hours","startDate","getDate","endDate","activeDrift","setActiveDrift","_useState3","_useState4","isCardExpanded","setIsCardExpanded","driftEvents","useSelector","DashboardStore","driftEventFetchStatus","_ref2","useCallback","dropDownItem","AppActions","appIds","includePayload","ExpandableCardTemplate","className","appName","isExpanded","isExpandedCallback","title","Flex","FlexItem","driftCardTitle","align","default","body","Bullseye","Spinner","baselineDetail","length","TemplateCardBody","direction","alignItems","justifyContent","numEvents","TextContent","driftNumberOfEvents","driftInventigateButtton","Divider","driftTop5","DataList","isCompact","slice","baseline","index","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","wrapModifier","DataListWrapModifier","truncate","TextVariants","a","baselineId","baselineName","color","driftSystems","systems","Tooltip","content","driftCompareTooltip","buildCompareUrl","driftCompare","fetchDrift"],"sourceRoot":""}