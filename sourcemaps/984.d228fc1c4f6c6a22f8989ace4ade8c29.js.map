{"version":3,"file":"js/984.b1f9a4cca792ed89fc35.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/NumberData/NumberData.js","webpack:///./src/PresentationalComponents/NumberDescription/NumberDescription.js","webpack:///./src/SmartComponents/SystemInventory/SystemInventoryHeader.js"],"sourcesContent":["import '../../../src/PresentationalComponents/NumberData/NumberData.scss';\n\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport InfoIcon from '../../Icons/InfoIcon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberData = ({ data, dataSize, percentageData, iconTooltipText }) => (\n    <div>\n        <span className={ `insd-c-dashboard__number-data--${dataSize}` }>\n            {data}\n        </span>\n        {percentageData &&\n            <span className=\"insd-c-dashboard__number-percentage\">\n                <span>{percentageData}</span>\n                <Tooltip\n                    key={ `${iconTooltipText}` }\n                    position={ TooltipPosition.top }\n                    content={ <div>{iconTooltipText}</div> }>\n                    <Button variant=\"plain\" aria-label=\"Action\" className='insd-c-info-icon'>\n                        <InfoIcon />\n                    </Button>\n                </Tooltip>\n            </span>\n        }\n    </div>\n);\n\nNumberData.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    linkDescription: propTypes.string,\n    percentageData: propTypes.string,\n    iconTooltipText: propTypes.node\n};\n\nexport default NumberData;\n","import '../../../src/PresentationalComponents/NumberDescription/NumberDescription.scss';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport CriticalIcon from '../../Icons/CriticalIcon';\nimport { NumberData } from '../../PresentationalComponents/NumberData/NumberData';\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\nexport const NumberDescription = ({ data, dataSize, link, linkDescription, layout, critical, iconTooltipText }) => {\n    const navigateTo = useChromePush();\n\n    return (\n        <div className={ `${layout ? `pf-m-${layout}` : ''}` }>\n            {critical === 'true' && (\n                <CriticalIcon />\n            )}\n            <Flex direction={ { default: 'column' } } spaceItems={ { default: 'spaceItemsXs' } }>\n                <FlexItem>\n                    <NumberData data={ data } dataSize={ dataSize } iconTooltipText={ iconTooltipText } />\n                </FlexItem>\n                <FlexItem>\n                    <Button component='a' onClick={e => navigateTo(e, link)} isInline variant=\"link\" href={ link } >{linkDescription}</Button>\n                </FlexItem>\n            </Flex>\n        </div>\n    );};\n\nNumberDescription.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    percentageData: propTypes.string,\n    link: propTypes.any,\n    linkDescription: propTypes.string,\n    layout: propTypes.string,\n    critical: propTypes.string,\n    iconTooltipText: propTypes.node,\n    flexDirection: propTypes.object\n};\n\nexport default NumberDescription;\n","/* eslint-disable no-unused-vars */\nimport './SystemInventoryHeader.scss';\n\nimport * as AppActions from '../../AppActions';\n\n// layouts\nimport {\n    Flex,\n    FlexItem\n} from '@patternfly/react-core/dist/esm/layouts';\nimport React, { useEffect } from 'react';\nimport { sapFilter, workloadsPropType } from '../../Utilities/Common';\n\n// components\nimport {\n    Button\n} from '@patternfly/react-core/dist/esm/components';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\n// icons\nimport { IconInline } from '../../PresentationalComponents/IconInline/IconInline';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { NumberDescription } from '../../PresentationalComponents/NumberDescription/NumberDescription';\nimport PropTypes from 'prop-types';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n// eslint-disable-next-line no-unused-vars\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook/RBACHook';\nimport { useChromePush } from '../../Utilities/hooks/useChromePush';\n\n/**\n * System inventory card for showing system inventory and status.\n */\nconst SystemInventoryHeader = ({\n    fetchInventory, inventoryFetchStatus, inventorySummary,\n    fetchInventoryStale, inventoryStaleFetchStatus, inventoryStaleSummary,\n    fetchInventoryWarning, inventoryWarningFetchStatus, inventoryWarningSummary,\n    fetchInventoryTotal, inventoryTotalFetchStatus, inventoryTotalSummary,\n    selectedTags, workloads, SID\n}) => {\n\n    const { hasAccess } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:*:read',\n        'inventory:hosts:*',\n        'inventory:hosts:read'\n    ]);\n\n    useEffect(() => {\n        const options = { ...sapFilter(workloads, SID), ...selectedTags?.length > 0 && { tags: selectedTags } };\n        fetchInventoryTotal(options);\n        fetchInventory(options);\n        fetchInventoryStale(options);\n        fetchInventoryWarning(options);\n    }, [fetchInventoryTotal, fetchInventory, fetchInventoryStale, fetchInventoryWarning, selectedTags, workloads, SID]\n    );\n\n    const intl = useIntl();\n\n    const navigateTo = useChromePush();\n\n    return <React.Fragment>\n        {\n            hasAccess === false ?\n                <NotAuthorized\n                    showReturnButton={ false }\n                    serviceName=\"Inventory\"\n                    icon={ () => '' }\n                    variant='xs'\n                    description={ <div>{intl.formatMessage(messages.systemInventoryNoAccess)}</div> }\n                /> :\n                <Flex spaceItems={ { md: 'spaceItemsXl' } }\n                    alignItems={ { md: 'alignItemsCenter' } }\n                    direction={ { default: 'column', md: 'row' } }\n                >\n                    <Flex spaceItems={ { default: 'spaceItemsXl' } }>\n                        {inventoryFetchStatus === 'fulfilled' && inventoryTotalFetchStatus === 'fulfilled' &&\n                            <NumberDescription\n                                data={ inventorySummary.total.toLocaleString() || 0 }\n                                dataSize=\"lg\"\n                                linkDescription={ intl.formatMessage(messages.systemInventoryDescription,\n                                    { count: inventorySummary.total || 0 }\n                                ) }\n                                link='./insights/inventory/?status=fresh&status=stale&source=insights'\n                            />\n                        }\n                        {/* {inventoryFetchStatus === 'fulfilled' && inventoryTotalFetchStatus === 'fulfilled' &&\n                            <NumberDescription\n                                data={ inventoryTotalSummary.total - inventorySummary.total || 0 }\n                                dataSize=\"lg\"\n                                linkDescription={ intl.formatMessage(messages.systemInventoryUnregisteredDescription,\n                                    { count: inventoryTotalSummary.total || 0 }\n                                ) }\n                                link='./insights/inventory'\n                            />\n                        } */}\n                    </Flex>\n                    <Flex spaceItems={ { default: 'spaceItemsXl' } }\n                        alignItems={ { md: 'alignItemsCenter' } }\n                        flex={ { default: 'flex_1' } }\n                        direction={ { default: 'column', md: 'row' } }\n                    >\n                        <Flex direction={ { default: 'column' } } spaceItems={ { default: 'spaceItemsNone' } }>\n                            <FlexItem>\n                                {inventoryStaleFetchStatus === 'fulfilled' &&\n                                    <Button\n                                        component=\"a\"\n                                        variant=\"link\"\n                                        onClick={e => navigateTo(e, './insights/inventory/?status=stale')}\n                                        href='./insights/inventory/?status=stale'\n                                        isInline\n                                    >\n                                        <IconInline\n                                            message={ intl.formatMessage(messages.systemInventoryStale,\n                                                { count: inventoryStaleSummary.total || 0 }\n                                            ) }\n                                            state=\"warning\"\n                                            systemInventory\n                                        />\n                                    </Button>\n                                }\n                            </FlexItem>\n                            <FlexItem>\n                                {inventoryWarningFetchStatus === 'fulfilled' &&\n                                    <Button\n                                        component=\"a\"\n                                        variant=\"link\"\n                                        onClick={e => navigateTo(e, './insights/inventory/?status=stale_warning')}\n                                        href='./insights/inventory/?status=stale_warning'\n                                        isInline\n                                    >\n                                        <IconInline\n                                            message={ intl.formatMessage(messages.systemInventoryStaleWarning,\n                                                { count: inventoryWarningSummary.total || 0 }\n                                            ) }\n                                            state=\"critical\"\n                                            systemInventory\n                                        />\n                                    </Button>\n                                }\n                            </FlexItem>\n                            {inventoryTotalFetchStatus === 'rejected' &&\n                                <FailState appName='Inventory' isSmall />\n                            }\n                        </Flex>\n                        <FlexItem align={{ md: 'alignRight' }}>\n                            <Button\n                                component='a'\n                                variant='primary'\n                                onClick={e => navigateTo(e, `${UI_BASE}/registration`)}\n                                href={ `${UI_BASE}/registration` }\n                            >\n                                { intl.formatMessage(messages.systemInventoryCTA) }\n                            </Button>\n                        </FlexItem>\n                    </Flex>\n                </Flex>\n        }\n    </React.Fragment>;\n};\n\nSystemInventoryHeader.propTypes = {\n    fetchInventory: PropTypes.func,\n    inventorySummary: PropTypes.object,\n    inventoryFetchStatus: PropTypes.string,\n    fetchInventoryStale: PropTypes.func,\n    inventoryStaleSummary: PropTypes.object,\n    inventoryStaleFetchStatus: PropTypes.string,\n    fetchInventoryWarning: PropTypes.func,\n    inventoryWarningSummary: PropTypes.object,\n    inventoryWarningFetchStatus: PropTypes.string,\n    fetchInventoryTotal: PropTypes.func,\n    inventoryTotalSummary: PropTypes.object,\n    inventoryTotalFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.arrayOf(PropTypes.string),\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default connect(\n    ({ DashboardStore }) => ({\n        inventorySummary: DashboardStore.inventorySummary,\n        inventoryFetchStatus: DashboardStore.inventoryFetchStatus,\n        inventoryStaleSummary: DashboardStore.inventoryStaleSummary,\n        inventoryStaleFetchStatus: DashboardStore.inventoryStaleFetchStatus,\n        inventoryWarningSummary: DashboardStore.inventoryWarningSummary,\n        inventoryWarningFetchStatus: DashboardStore.inventoryWarningFetchStatus,\n        inventoryTotalSummary: DashboardStore.inventoryTotalSummary,\n        inventoryTotalFetchStatus: DashboardStore.inventoryTotalFetchStatus,\n        selectedTags: DashboardStore.selectedTags,\n        workloads: DashboardStore.workloads,\n        SID: DashboardStore.SID\n    }),\n    dispatch => ({\n        fetchInventory: (params) => dispatch(AppActions.fetchInventorySummary(params)),\n        fetchInventoryStale: (params) => dispatch(AppActions.fetchInventoryStaleSummary(params)),\n        fetchInventoryWarning: (params) => dispatch(AppActions.fetchInventoryWarningSummary(params)),\n        fetchInventoryTotal: (params) => dispatch(AppActions.fetchInventoryTotalSummary(params))\n    })\n)(SystemInventoryHeader);\n"],"names":["NumberData","data","dataSize","percentageData","iconTooltipText","className","Tooltip","key","position","TooltipPosition","content","Button","variant","InfoIcon","propTypes","linkDescription","NumberDescription","link","layout","critical","navigateTo","useChromePush","CriticalIcon","Flex","direction","default","spaceItems","FlexItem","component","onClick","e","isInline","href","flexDirection","SystemInventoryHeader","fetchInventory","inventoryFetchStatus","inventorySummary","fetchInventoryStale","inventoryStaleFetchStatus","inventoryStaleSummary","fetchInventoryWarning","inventoryWarningFetchStatus","inventoryWarningSummary","fetchInventoryTotal","inventoryTotalFetchStatus","selectedTags","inventoryTotalSummary","workloads","SID","hasAccess","usePermissions","useEffect","options","sapFilter","length","tags","intl","useIntl","NotAuthorized","showReturnButton","serviceName","icon","description","formatMessage","messages","md","alignItems","total","toLocaleString","count","flex","IconInline","message","state","systemInventory","FailState","appName","isSmall","align","UI_BASE","PropTypes","workloadsPropType","connect","DashboardStore","dispatch","params","AppActions"],"sourceRoot":""}