{"version":3,"sources":["webpack://insights-dashboard/./src/SmartComponents/SystemInventory/SystemInventoryCard.scss","webpack://insights-dashboard/./src/SmartComponents/SystemInventory/SystemInventoryCard.js","webpack://insights-dashboard/./src/SmartComponents/SystemInventory/SystemInventoryCard.scss?d1dc"],"names":["___CSS_LOADER_EXPORT___","push","module","id","SystemInventoryCard","fetchInventory","inventoryFetchStatus","inventorySummary","fetchInventoryStale","inventoryStaleFetchStatus","inventoryStaleSummary","fetchInventoryWarning","inventoryWarningFetchStatus","inventoryWarningSummary","fetchInventoryTotal","inventoryTotalFetchStatus","inventoryTotalSummary","selectedTags","workloads","SID","hasAccess","usePermissions","useEffect","options","sapFilter","length","tags","intl","useIntl","appName","subtitle","formatMessage","messages","isFilled","className","showReturnButton","serviceName","icon","variant","description","Fragment","data","total","toLocaleString","dataSize","percentageData","count","Math","floor","linkDescription","link","iconTooltipText","Button","component","href","isInline","message","state","systemInventory","isSmall","propTypes","PropTypes","workloadsPropType","connect","DashboardStore","dispatch","params","AppActions","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/9640.9b52ec4a9b939752ebf9.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dashboard .dashboard-card-system-inventory .ins-c-info-icon{padding:0;cursor:default}.dashboard-card-system-inventory-body:not(.dashboard-m-no-access){max-width:400px}.dashboard-card-system-inventory-body .pf-c-empty-state__body>div{max-width:300px;margin:auto}@media screen and (max-width: 768px){.dashboard-card-system-inventory-body .pf-c-empty-state__body>div{max-width:200px}}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/SmartComponents/SystemInventory/SystemInventoryCard.scss\"],\"names\":[],\"mappings\":\"AAAA,6DAA6D,SAAS,CAAC,cAAc,CAAC,kEAAkE,eAAe,CAAC,kEAAkE,eAAe,CAAC,WAAW,CAAC,qCAAqC,kEAAkE,eAAe,CAAC\",\"sourcesContent\":[\".dashboard .dashboard-card-system-inventory .ins-c-info-icon{padding:0;cursor:default}.dashboard-card-system-inventory-body:not(.dashboard-m-no-access){max-width:400px}.dashboard-card-system-inventory-body .pf-c-empty-state__body>div{max-width:300px;margin:auto}@media screen and (max-width: 768px){.dashboard-card-system-inventory-body .pf-c-empty-state__body>div{max-width:200px}}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import './SystemInventoryCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport React, { Fragment, useEffect } from 'react';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\nimport { sapFilter, workloadsPropType } from '../../Utilities/Common';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport { IconInline } from '../../PresentationalComponents/IconInline/IconInline';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/components/cjs/NotAuthorized';\nimport { NumberDescription } from '../../../../insights-dashboard/src/PresentationalComponents/NumberDescription/NumberDescription';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n// eslint-disable-next-line no-unused-vars\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/files/RBACHook';\n\n/**\n * System inventory card for showing system inventory and status.\n */\nconst SystemInventoryCard = ({\n    fetchInventory, inventoryFetchStatus, inventorySummary,\n    fetchInventoryStale, inventoryStaleFetchStatus, inventoryStaleSummary,\n    fetchInventoryWarning, inventoryWarningFetchStatus, inventoryWarningSummary,\n    fetchInventoryTotal, inventoryTotalFetchStatus, inventoryTotalSummary,\n    selectedTags, workloads, SID\n}) => {\n\n    const { hasAccess } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:*:read',\n        'inventory:hosts:*',\n        'inventory:hosts:read'\n    ]);\n\n    useEffect(() => {\n        const options = { ...sapFilter(workloads, SID), ...selectedTags?.length > 0 && { tags: selectedTags } };\n        fetchInventoryTotal(options);\n        fetchInventory(options);\n        fetchInventoryStale(options);\n        fetchInventoryWarning(options);\n    }, [fetchInventoryTotal, fetchInventory, fetchInventoryStale, fetchInventoryWarning, selectedTags, workloads, SID]\n    );\n\n    const intl = useIntl();\n\n    return <TemplateCard appName='SystemInventory'>\n        <TemplateCardHeader subtitle={ intl.formatMessage(messages.systemInventoryTitle) } />\n        <TemplateCardBody\n            isFilled={ hasAccess === false }\n            className={ `dashboard-card-system-inventory-body ${hasAccess === false ? ' dashboard-m-no-access' : ''}` }\n        >\n            {\n                hasAccess === false ?\n                    <NotAuthorized\n                        showReturnButton={ false }\n                        serviceName=\"Inventory\"\n                        icon={ () => '' }\n                        variant='xs'\n                        description={ <div>{intl.formatMessage(messages.systemInventoryNoAccess)}</div> }\n                    /> :\n                    <Fragment>\n                        {inventoryFetchStatus === 'fulfilled' && inventoryTotalFetchStatus === 'fulfilled' &&\n                            <NumberDescription\n                                data={ inventorySummary.total.toLocaleString() || 0 }\n                                dataSize=\"lg\"\n                                percentageData={ intl.formatMessage(messages.systemInventoryPercentageData,\n                                    { count: Math.floor((inventorySummary.total / inventoryTotalSummary.total) * 100) || 0 }\n                                ) }\n                                linkDescription={ intl.formatMessage(messages.systemInventoryDescription,\n                                    { count: inventorySummary.total || 0 }\n                                ) }\n                                link='./insights/inventory'\n                                iconTooltipText={ intl.formatMessage(messages.systemInventoryNotUsingClient,\n                                    { count: inventoryTotalSummary.total - inventorySummary.total || 0 }\n                                ) }\n                            />\n                        }\n                        {inventoryStaleFetchStatus === 'fulfilled' &&\n                            <Button component=\"a\" variant=\"link\" href='./insights/inventory/?status=stale' isInline>\n                                <IconInline\n                                    message={ intl.formatMessage(messages.systemInventoryStale,\n                                        { count: inventoryStaleSummary.total || 0 }\n                                    ) }\n                                    state=\"warning\"\n                                    systemInventory=\"true\"\n                                />\n                            </Button>\n                        }\n                        {inventoryWarningFetchStatus === 'fulfilled' &&\n                            <Button component=\"a\" variant=\"link\" href='./insights/inventory/?status=stale_warning' isInline>\n                                <IconInline\n                                    message={ intl.formatMessage(messages.systemInventoryStaleWarning,\n                                        { count: inventoryWarningSummary.total || 0 }\n                                    ) }\n                                    state=\"critical\"\n                                    systemInventory=\"true\"\n                                />\n                            </Button>\n                        }\n                        {inventoryTotalFetchStatus === 'rejected' &&\n                            <FailState appName='Inventory' isSmall />\n                        }\n                    </Fragment>\n            }\n        </TemplateCardBody>\n    </TemplateCard>;\n};\n\nSystemInventoryCard.propTypes = {\n    fetchInventory: PropTypes.func,\n    inventorySummary: PropTypes.object,\n    inventoryFetchStatus: PropTypes.string,\n    fetchInventoryStale: PropTypes.func,\n    inventoryStaleSummary: PropTypes.object,\n    inventoryStaleFetchStatus: PropTypes.string,\n    fetchInventoryWarning: PropTypes.func,\n    inventoryWarningSummary: PropTypes.object,\n    inventoryWarningFetchStatus: PropTypes.string,\n    fetchInventoryTotal: PropTypes.func,\n    inventoryTotalSummary: PropTypes.object,\n    inventoryTotalFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.arrayOf(PropTypes.string),\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default connect(\n    ({ DashboardStore }) => ({\n        inventorySummary: DashboardStore.inventorySummary,\n        inventoryFetchStatus: DashboardStore.inventoryFetchStatus,\n        inventoryStaleSummary: DashboardStore.inventoryStaleSummary,\n        inventoryStaleFetchStatus: DashboardStore.inventoryStaleFetchStatus,\n        inventoryWarningSummary: DashboardStore.inventoryWarningSummary,\n        inventoryWarningFetchStatus: DashboardStore.inventoryWarningFetchStatus,\n        inventoryTotalSummary: DashboardStore.inventoryTotalSummary,\n        inventoryTotalFetchStatus: DashboardStore.inventoryTotalFetchStatus,\n        selectedTags: DashboardStore.selectedTags,\n        workloads: DashboardStore.workloads,\n        SID: DashboardStore.SID\n    }),\n    dispatch => ({\n        fetchInventory: (params) => dispatch(AppActions.fetchInventorySummary(params)),\n        fetchInventoryStale: (params) => dispatch(AppActions.fetchInventoryStaleSummary(params)),\n        fetchInventoryWarning: (params) => dispatch(AppActions.fetchInventoryWarningSummary(params)),\n        fetchInventoryTotal: (params) => dispatch(AppActions.fetchInventoryTotalSummary(params))\n    })\n)(SystemInventoryCard);\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./SystemInventoryCard.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./SystemInventoryCard.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}