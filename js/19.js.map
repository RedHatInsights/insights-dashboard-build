{"version":3,"sources":["webpack:///./src/SmartComponents/SystemInventory/SystemInventoryCard.scss","webpack:///./src/SmartComponents/SystemInventory/SystemInventoryCard.scss?36f7","webpack:///./src/SmartComponents/SystemInventory/SystemInventoryCard.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","api","content","__esModule","default","options","update","locals","hot","invalidate","oldLocals","accept","a","b","p","isEqualLocals","dispose","SystemInventoryCard","fetchInventory","inventoryFetchStatus","inventorySummary","fetchInventoryStale","inventoryStaleFetchStatus","inventoryStaleSummary","fetchInventoryWarning","inventoryWarningFetchStatus","inventoryWarningSummary","fetchInventoryTotal","inventoryTotalFetchStatus","inventoryTotalSummary","useEffect","intl","useIntl","appName","subtitle","formatMessage","messages","systemInventoryTitle","isFilled","data","total","toLocaleString","dataSize","percentageData","systemInventoryPercentageData","count","Math","floor","linkDescription","systemInventoryDescription","link","iconTooltipText","systemInventoryNotUsingClient","component","variant","href","isInline","message","systemInventoryStale","state","systemInventory","systemInventoryStaleWarning","isSmall","propTypes","PropTypes","func","object","string","any","connect","DashboardStore","dispatch","AppActions"],"mappings":"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","file":"js/19.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".dashboard-card-system-inventory .ins-c-info-icon{padding:0;cursor:default}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemInventoryCard.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemInventoryCard.scss\",\n      function () {\n        content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemInventoryCard.scss\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as AppActions from '../../AppActions';\nimport { connect } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\nimport { NumberDescription } from '../../../../insights-dashboard/src/PresentationalComponents/NumberDescription/NumberDescription';\nimport { IconInline } from '../../PresentationalComponents/IconInline/IconInline';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport './SystemInventoryCard.scss';\n\n/**\n * System inventory card for showing system inventory and status.\n */\nconst SystemInventoryCard = ({\n    fetchInventory, inventoryFetchStatus, inventorySummary,\n    fetchInventoryStale, inventoryStaleFetchStatus, inventoryStaleSummary,\n    fetchInventoryWarning, inventoryWarningFetchStatus, inventoryWarningSummary,\n    fetchInventoryTotal, inventoryTotalFetchStatus, inventoryTotalSummary\n}) => {\n\n    useEffect(() => {\n        fetchInventoryTotal();\n        fetchInventory();\n        fetchInventoryStale();\n        fetchInventoryWarning();\n    }, [fetchInventoryTotal,\n        fetchInventory,\n        fetchInventoryStale,\n        fetchInventoryWarning]\n    );\n\n    const intl = useIntl();\n\n    return <TemplateCard appName='SystemInventory'>\n        <TemplateCardHeader subtitle={ intl.formatMessage(messages.systemInventoryTitle) }/>\n        <TemplateCardBody isFilled={ false }>\n            { inventoryFetchStatus === 'fulfilled' && inventoryTotalFetchStatus === 'fulfilled' &&\n                <NumberDescription\n                    data={ inventorySummary.total.toLocaleString() || 0 }\n                    dataSize=\"lg\"\n                    percentageData={ intl.formatMessage(messages.systemInventoryPercentageData,\n                        { count: Math.floor((inventorySummary.total / inventoryTotalSummary.total) * 100) || 0 }\n                    ) }\n                    linkDescription = { intl.formatMessage(messages.systemInventoryDescription,\n                        { count: inventorySummary.total || 0 }\n                    ) }\n                    link='./insights/inventory'\n                    iconTooltipText = { intl.formatMessage(messages.systemInventoryNotUsingClient,\n                        { count: inventoryTotalSummary.total - inventorySummary.total || 0 }\n                    ) }\n                />\n            }\n            { inventoryStaleFetchStatus === 'fulfilled' &&\n                <Button component=\"a\" variant=\"link\" href='./insights/inventory/?status=stale' isInline>\n                    <IconInline\n                        message={ intl.formatMessage(messages.systemInventoryStale,\n                            { count: inventoryStaleSummary.total || 0 }\n                        ) }\n                        state=\"warning\"\n                        systemInventory=\"true\"\n                    />\n                </Button>\n            }\n            { inventoryWarningFetchStatus === 'fulfilled' &&\n                <Button component=\"a\" variant=\"link\" href='./insights/inventory/?status=stale_warning' isInline>\n                    <IconInline\n                        message={ intl.formatMessage(messages.systemInventoryStaleWarning,\n                            { count: inventoryWarningSummary.total || 0 }\n                        ) }\n                        state=\"critical\"\n                        systemInventory=\"true\"\n                    />\n                </Button>\n            }\n            { inventoryTotalFetchStatus === 'rejected' &&\n                <FailState appName='Inventory' isSmall/>\n            }\n        </TemplateCardBody>\n    </TemplateCard>;\n};\n\nSystemInventoryCard.propTypes = {\n    fetchInventory: PropTypes.func,\n    inventorySummary: PropTypes.object,\n    inventoryFetchStatus: PropTypes.string,\n    fetchInventoryStale: PropTypes.func,\n    inventoryStaleSummary: PropTypes.object,\n    inventoryStaleFetchStatus: PropTypes.string,\n    fetchInventoryWarning: PropTypes.func,\n    inventoryWarningSummary: PropTypes.object,\n    inventoryWarningFetchStatus: PropTypes.string,\n    fetchInventoryTotal: PropTypes.func,\n    inventoryTotalSummary: PropTypes.object,\n    inventoryTotalFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default connect(\n    ({ DashboardStore }) => ({\n        inventorySummary: DashboardStore.inventorySummary,\n        inventoryFetchStatus: DashboardStore.inventoryFetchStatus,\n        inventoryStaleSummary: DashboardStore.inventoryStaleSummary,\n        inventoryStaleFetchStatus: DashboardStore.inventoryStaleFetchStatus,\n        inventoryWarningSummary: DashboardStore.inventoryWarningSummary,\n        inventoryWarningFetchStatus: DashboardStore.inventoryWarningFetchStatus,\n        inventoryTotalSummary: DashboardStore.inventoryTotalSummary,\n        inventoryTotalFetchStatus: DashboardStore.inventoryTotalFetchStatus\n    }),\n    dispatch => ({\n        fetchInventory: () => dispatch(AppActions.fetchInventorySummary()),\n        fetchInventoryStale: () => dispatch(AppActions.fetchInventoryStaleSummary()),\n        fetchInventoryWarning: () => dispatch(AppActions.fetchInventoryWarningSummary()),\n        fetchInventoryTotal: () => dispatch(AppActions.fetchInventoryTotalSummary())\n    })\n)(SystemInventoryCard);\n"],"sourceRoot":""}