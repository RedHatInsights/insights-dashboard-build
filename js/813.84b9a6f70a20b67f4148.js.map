{"version":3,"sources":["webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.scss","webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.js","webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.scss?90f0"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ComplianceCard","fetchCompliance","complianceFetchStatus","complianceSummary","selectedTags","workloads","SID","useEffect","compliance","intl","useIntl","pieChartPadding","bottom","left","right","top","colorScale","chart_color_blue_300","chart_color_blue_200","appName","className","title","formatMessage","messages","supportsGlobalFilter","Array","isArray","data","length","slice","map","policy","index","key","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","attributes","test_result_host_count","compliant_host_count","labels","datum","padding","height","width","global_palette_black_300","Button","component","href","UI_BASE","variant","isInline","name","hasGutter","count","score","toFixed","EmptyStateVariant","headingLevel","size","propTypes","PropTypes","workloadsPropType","routerParams","connect","DashboardStore","dispatch","url","AppActions","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/813.84b9a6f70a20b67f4148.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dashboard .ins-c-compliance__policy-link{white-space:pre-wrap;text-align:left}.ins-c-compliance__empty-state.pf-c-empty-state{padding:0}.ins-c-compliance__empty-state .pf-c-empty-state__secondary{margin-top:var(--pf-global--spacer--md)}.ins-c-compliance__row{display:flex;flex-direction:row;width:100%}.ins-c-compliance__row:not(:first-child),.ins-c-compliance__row:only-of-type{padding-top:var(--pf-global--spacer--lg)}.ins-c-compliance__row-item{max-width:200px;font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item>.pf-l-split .pf-l-split__item{font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item:first-child{width:65px;margin-right:var(--pf-global--spacer--lg)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/SmartComponents/Compliance/ComplianceCard.scss\"],\"names\":[],\"mappings\":\"AAAA,0CAA0C,oBAAoB,CAAC,eAAe,CAAC,gDAAgD,SAAS,CAAC,4DAA4D,uCAAuC,CAAC,uBAAuB,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC,6EAA6E,wCAAwC,CAAC,4BAA4B,eAAe,CAAC,wCAAwC,CAAC,0DAA0D,wCAAwC,CAAC,wCAAwC,UAAU,CAAC,yCAAyC\",\"sourcesContent\":[\".dashboard .ins-c-compliance__policy-link{white-space:pre-wrap;text-align:left}.ins-c-compliance__empty-state.pf-c-empty-state{padding:0}.ins-c-compliance__empty-state .pf-c-empty-state__secondary{margin-top:var(--pf-global--spacer--md)}.ins-c-compliance__row{display:flex;flex-direction:row;width:100%}.ins-c-compliance__row:not(:first-child),.ins-c-compliance__row:only-of-type{padding-top:var(--pf-global--spacer--lg)}.ins-c-compliance__row-item{max-width:200px;font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item>.pf-l-split .pf-l-split__item{font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item:first-child{width:65px;margin-right:var(--pf-global--spacer--lg)}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import './ComplianceCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant\n} from '@patternfly/react-core/dist/esm/components/EmptyState/index';\nimport React, { useEffect } from 'react';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\nimport { chart_color_blue_200, chart_color_blue_300 } from '@patternfly/react-tokens';\nimport { supportsGlobalFilter, workloadsPropType } from '../../Utilities/Common';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport FilterNotSupported from '../../PresentationalComponents/FilterNotSupported';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { PieChart } from '../../ChartTemplates/PieChart/PieChartTemplate';\nimport PropTypes from 'prop-types';\nimport { Split } from '@patternfly/react-core/dist/js/layouts/Split/Split';\nimport { SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/SplitItem';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport { global_palette_black_300 } from '@patternfly/react-tokens/dist/esm/';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nconst ComplianceCard = ({ fetchCompliance, complianceFetchStatus, complianceSummary, selectedTags, workloads, SID }) => {\n\n    useEffect(() => {\n        fetchCompliance();\n    }, [fetchCompliance]);\n\n    const intl = useIntl();\n    const pieChartPadding = { bottom: 0, left: 0, right: 0, top: 0 };\n    const colorScale = [\n        chart_color_blue_300.value,\n        chart_color_blue_200.value\n    ];\n\n    /*\n        * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n        * complianceSummary\n        */\n    const getTopThreePolicies = function (compliance) {\n        const complianceTopThree = compliance.data.length > 1 ? compliance.data.slice(0, 3) :\n            compliance.data.slice();\n\n        return complianceTopThree;\n    };\n\n    return (\n        <TemplateCard appName='Compliance' className='ins-c-card__compliance'\n            { ...complianceFetchStatus !== 'pending' ? {\n                'data-ouia-safe': true\n            } : { 'data-ouia-safe': false } }\n        >\n            <TemplateCardHeader title={ intl.formatMessage(messages.complianceTitle) } />\n            <TemplateCardBody>\n                {supportsGlobalFilter(selectedTags, workloads, SID) ?\n                    <React.Fragment>\n                        {complianceFetchStatus === 'fulfilled' &&\n                            (Array.isArray(complianceSummary.data) &&\n                                (complianceSummary.data.length > 0 ? <React.Fragment>\n                                    {getTopThreePolicies(complianceSummary).map((policy, index) =>\n                                        <div className=\"ins-c-compliance__row\" key={ index }>\n                                            <div className=\"ins-c-compliance__row-item\">\n                                                <PieChart\n                                                    ariaDesc=\"Compliance score\"\n                                                    ariaTitle=\"Pie chart compliance\"\n                                                    constrainToVisibleArea={ true }\n                                                    data={ [\n                                                        {\n                                                            x: 'Compliant',\n                                                            y: policy.attributes.test_result_host_count ? policy.attributes.compliant_host_count : '0'\n                                                        }, {\n                                                            x: 'Non-compliant',\n                                                            y: policy.attributes.test_result_host_count - policy.attributes.compliant_host_count\n                                                        }\n                                                    ] }\n                                                    labels={ ({ datum }) => `${datum.x}: ${datum.y}` }\n                                                    padding={ pieChartPadding }\n                                                    height={ 65 }\n                                                    width={ 65 }\n                                                    colorScale={ policy.attributes.test_result_host_count === 0 ?\n                                                        [global_palette_black_300.value] : colorScale }\n                                                />\n                                            </div>\n                                            <div className=\"ins-c-compliance__row-item\">\n                                                <Button\n                                                    id={ `compliance-link-${index + 1}` }\n                                                    className=\"ins-c-compliance__policy-link\"\n                                                    component=\"a\"\n                                                    href={ `${UI_BASE}/compliance/reports/${policy.id}` }\n                                                    variant=\"link\"\n                                                    isInline\n                                                >\n                                                    {policy.attributes.name}\n                                                </Button>\n                                                <Split hasGutter>\n                                                    <SplitItem>\n                                                        {intl.formatMessage(messages.compliantHostCount,\n                                                            { count: policy.attributes.test_result_host_count }\n                                                        )}\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        {intl.formatMessage(messages.compliantScore,\n                                                            {\n                                                                score: +(policy.attributes.test_result_host_count &&\n                                                                    (100 * (\n                                                                        policy.attributes.compliant_host_count /\n                                                                        policy.attributes.test_result_host_count\n                                                                    ))\n                                                                ).toFixed(1)\n                                                            }\n                                                        )}\n                                                    </SplitItem>\n                                                </Split>\n\n                                            </div>\n                                        </div>\n                                    )}\n                                    <div className=\"ins-c-compliance__row\">\n                                        <div className=\"ins-c-compliance__row-item\">\n                                        </div>\n                                        <div className=\"ins-c-compliance__row-item\">\n                                            <Button\n                                                className=\"ins-c-compliance__policy-link\"\n                                                component=\"a\"\n                                                href={ `${UI_BASE}/compliance/reports/` }\n                                                variant=\"link\"\n                                                isInline\n                                            >\n                                                {complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                                                    complianceSummary.data.length - 3 >= 1 &&\n                                                    `${complianceSummary.data.length - 3} more compliance reports`\n                                                }\n                                            </Button>\n                                        </div>\n                                    </div>\n\n                                </React.Fragment> : (\n                                    <EmptyState className=\"ins-c-compliance__empty-state\" variant={ EmptyStateVariant.full }>\n                                        <Title headingLevel=\"h5\" size=\"md\">\n                                            {intl.formatMessage(messages.complianceEmptyStateTitle)}\n                                        </Title>\n                                        <EmptyStateBody>\n                                            {intl.formatMessage(messages.complianceEmptyStateBody)}\n                                        </EmptyStateBody>\n                                        <EmptyStateSecondaryActions>\n                                            <Button\n                                                variant='link'\n                                                href={ `${UI_BASE}/compliance/reports/` }\n                                                component='a'\n                                            >\n                                                {intl.formatMessage(messages.complianceEmptyStateAction1)}\n                                            </Button>\n                                            <Button\n                                                variant='link'\n                                                component='a'\n                                                href=\"https://www.open-scap.org/getting-started/\"\n                                            >\n                                                {intl.formatMessage(messages.complianceEmptyStateAction2)}\n                                            </Button>\n                                        </EmptyStateSecondaryActions>\n                                    </EmptyState>\n                                ))\n                            )\n                        }\n                        {complianceFetchStatus === 'pending' && (<Loading />)}\n                        {complianceFetchStatus === 'rejected' && <FailState appName='Compliance' />}\n                    </React.Fragment>\n                    : <FilterNotSupported href={ `${UI_BASE}/compliance/` } title={ intl.formatMessage(messages.filterNotApplicable) }\n                        appName={ intl.formatMessage(messages.complianceTitle) } />\n                }\n            </TemplateCardBody>\n        </TemplateCard>\n    );\n};\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.array,\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    complianceSummary: DashboardStore.complianceSummary,\n    complianceFetchStatus: DashboardStore.complianceFetchStatus,\n    selectedTags: DashboardStore.selectedTags,\n    workloads: DashboardStore.workloads,\n    SID: DashboardStore.SID\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ComplianceCard.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ComplianceCard.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}