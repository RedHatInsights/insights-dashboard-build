{"version":3,"sources":["webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.scss","webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.js","webpack://insights-dashboard/./src/SmartComponents/Compliance/ComplianceCard.scss?45f1"],"names":["___CSS_LOADER_EXPORT___","push","module","id","ComplianceCard","fetchCompliance","complianceFetchStatus","complianceSummary","selectedTags","workloads","SID","useEffect","compliance","intl","useIntl","appName","className","title","formatMessage","messages","isExpanded","JSON","parse","localStorage","getItem","isExpandedCallback","setItem","header","body","supportsGlobalFilter","Array","isArray","data","length","isCompact","slice","map","policy","index","key","dataListCells","direction","default","spaceItems","component","href","UI_BASE","variant","isInline","attributes","name","flex","count","test_result_host_count","score","compliant_host_count","toFixed","EmptyStateVariant","headingLevel","size","propTypes","PropTypes","workloadsPropType","routerParams","connect","DashboardStore","dispatch","url","AppActions","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/813.5c3d129ee5ef4ae42408.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dashboard .ins-c-compliance__policy-link{white-space:pre-wrap;text-align:left;margin-top:var(--pf-global--spacer--md)}.dashboard .ins-c-compliance__empty-state.pf-c-empty-state{padding:0}.dashboard .ins-c-compliance__empty-state .pf-c-empty-state__secondary{margin-top:var(--pf-global--spacer--md)}.dashboard .ins-c-compliance__row{display:flex;flex-direction:row;width:100%}.dashboard .ins-c-compliance__row:not(:first-child),.dashboard .ins-c-compliance__row:only-of-type{padding-top:var(--pf-global--spacer--lg)}.dashboard .ins-c-compliance__row-item{max-width:200px;font-size:var(--pf-global--FontSize--sm)}.dashboard .ins-c-compliance__row-item>.pf-l-split .pf-l-split__item{font-size:var(--pf-global--FontSize--sm)}.dashboard .ins-c-compliance__row-item:first-child{width:65px;margin-right:var(--pf-global--spacer--lg)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/SmartComponents/Compliance/ComplianceCard.scss\"],\"names\":[],\"mappings\":\"AAAA,0CAC+B,oBAAoB,CAAC,eAAe,CAAC,uCAAuC,CAD3G,2DAC4J,SAAS,CADrK,uEACkO,uCAAuC,CADzQ,kCACiS,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAD3U,mGACyZ,wCAAwC,CADjc,uCAC8d,eAAe,CAAC,wCAAwC,CADthB,qEACilB,wCAAwC,CADznB,mDACkqB,UAAU,CAAC,yCAAyC\",\"sourcesContent\":[\".dashboard{\\n.ins-c-compliance__policy-link{white-space:pre-wrap;text-align:left;margin-top:var(--pf-global--spacer--md)}.ins-c-compliance__empty-state.pf-c-empty-state{padding:0}.ins-c-compliance__empty-state .pf-c-empty-state__secondary{margin-top:var(--pf-global--spacer--md)}.ins-c-compliance__row{display:flex;flex-direction:row;width:100%}.ins-c-compliance__row:not(:first-child),.ins-c-compliance__row:only-of-type{padding-top:var(--pf-global--spacer--lg)}.ins-c-compliance__row-item{max-width:200px;font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item>.pf-l-split .pf-l-split__item{font-size:var(--pf-global--FontSize--sm)}.ins-c-compliance__row-item:first-child{width:65px;margin-right:var(--pf-global--spacer--lg)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import './ComplianceCard.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts';\nimport React, { useEffect } from 'react';\nimport { TemplateCardActions, TemplateCardBody } from '../../PresentationalComponents/Template/TemplateCard';\nimport { supportsGlobalFilter, workloadsPropType } from '../../Utilities/Common';\n\nimport { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';\nimport FailState from '../../PresentationalComponents/FailState/FailState';\nimport FilterNotSupported from '../../PresentationalComponents/FilterNotSupported';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { useIntl } from 'react-intl';\n\nconst ComplianceCard = ({ fetchCompliance, complianceFetchStatus, complianceSummary, selectedTags, workloads, SID }) => {\n    useEffect(() => {\n        fetchCompliance();\n    }, [fetchCompliance]);\n\n    const intl = useIntl();\n\n    /*\n        * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n        * complianceSummary\n        */\n    const getTopThreePolicies = function (compliance) {\n        const complianceTopThree = compliance.data.length > 1 ? compliance.data.slice(0, 3) :\n            compliance.data.slice();\n\n        return complianceTopThree;\n    };\n\n    return (\n        <ExpandableCardTemplate\n            appName='Compliance'\n            className='ins-c-card__compliance ins-m-toggle-right-on-md'\n            { ...complianceFetchStatus !== 'pending' ? {\n                'data-ouia-safe': true\n            } : { 'data-ouia-safe': false } }\n            title={ intl.formatMessage(messages.complianceTitle) }\n            isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_compliance') || 'true')}\n            isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_compliance', isExpanded)}\n            header={\n                <TemplateCardActions />\n            }\n            body={\n                <TemplateCardBody>\n                    {supportsGlobalFilter(selectedTags, workloads, SID) ?\n                        <React.Fragment>\n                            {complianceFetchStatus === 'fulfilled' &&\n                                (Array.isArray(complianceSummary.data) &&\n                                    (complianceSummary.data.length > 0 ? <React.Fragment>\n                                        <DataList className='ins-m-no-padding ins-m-no-top-border' isCompact>\n                                            {getTopThreePolicies(complianceSummary).map((policy, index) =>\n                                                <DataListItem key={ index }>\n                                                    <DataListItemRow>\n                                                        <DataListItemCells\n                                                            dataListCells={[\n                                                                <DataListCell key={ index }>\n                                                                    <Flex\n                                                                        direction={ { default: 'column' } }\n                                                                        spaceItems={ { default: 'spaceItemsNone' } }\n                                                                    >\n                                                                        <Button\n                                                                            id={ `compliance-link-${index + 1}` }\n                                                                            className='ins-c-compliance__policy-link'\n                                                                            component='a'\n                                                                            href={ `${UI_BASE}/compliance/reports/${policy.id}` }\n                                                                            variant='link'\n                                                                            isInline\n                                                                        >\n                                                                            {policy.attributes.name}\n                                                                        </Button>\n                                                                        <Flex>\n                                                                            <FlexItem flex={ { default: 'flex_1' } }>\n                                                                                <p>description</p>\n                                                                            </FlexItem>\n                                                                            <Flex flex={{ default: 'None' }}>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantHostCount,\n                                                                                        { count: policy.attributes.test_result_host_count }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                                <FlexItem>\n                                                                                    {intl.formatMessage(messages.compliantScore,\n                                                                                        {\n                                                                                            score: +(policy.attributes.test_result_host_count &&\n                                                                                                (100 * (\n                                                                                                    policy.attributes.compliant_host_count /\n                                                                                                    policy.attributes.test_result_host_count\n                                                                                                ))\n                                                                                            ).toFixed(1)\n                                                                                        }\n                                                                                    )}\n                                                                                </FlexItem>\n                                                                            </Flex>\n                                                                        </Flex>\n                                                                    </Flex>\n                                                                </DataListCell>\n                                                            ]}\n                                                        />\n                                                    </DataListItemRow>\n                                                </DataListItem>\n                                            )}\n                                        </DataList>\n                                        <Button\n                                            className='ins-c-compliance__policy-link'\n                                            component='a'\n                                            href={ `${UI_BASE}/compliance/reports/` }\n                                            variant='link'\n                                            isInline\n                                        >\n                                            {complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                                                complianceSummary.data.length - 3 >= 1 &&\n                                                `${complianceSummary.data.length - 3} more compliance reports`\n                                            }\n                                        </Button>\n                                    </React.Fragment> : (\n                                        <EmptyState className='ins-c-compliance__empty-state' variant={ EmptyStateVariant.full }>\n                                            <Title headingLevel='h5' size='md'>\n                                                {intl.formatMessage(messages.complianceEmptyStateTitle)}\n                                            </Title>\n                                            <EmptyStateBody>\n                                                {intl.formatMessage(messages.complianceEmptyStateBody)}\n                                            </EmptyStateBody>\n                                            <EmptyStateSecondaryActions>\n                                                <Button\n                                                    variant='link'\n                                                    href={ `${UI_BASE}/compliance/reports/` }\n                                                    component='a'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction1)}\n                                                </Button>\n                                                <Button\n                                                    variant='link'\n                                                    component='a'\n                                                    href='https://www.open-scap.org/getting-started/'\n                                                >\n                                                    {intl.formatMessage(messages.complianceEmptyStateAction2)}\n                                                </Button>\n                                            </EmptyStateSecondaryActions>\n                                        </EmptyState>\n                                    ))\n                                )\n                            }\n                            {complianceFetchStatus === 'pending' && (<Loading />)}\n                            {complianceFetchStatus === 'rejected' && <FailState appName='Compliance' />}\n                        </React.Fragment>\n                        : <FilterNotSupported href={ `${UI_BASE}/compliance/` } title={ intl.formatMessage(messages.filterNotApplicable) }\n                            appName={ intl.formatMessage(messages.complianceTitle) } />\n                    }\n                </TemplateCardBody>\n            }\n        />\n    );\n};\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string,\n    intl: PropTypes.any,\n    selectedTags: PropTypes.array,\n    workloads: workloadsPropType,\n    SID: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst mapStateToProps = ({ DashboardStore }) => ({\n    complianceSummary: DashboardStore.complianceSummary,\n    complianceFetchStatus: DashboardStore.complianceFetchStatus,\n    selectedTags: DashboardStore.selectedTags,\n    workloads: DashboardStore.workloads,\n    SID: DashboardStore.SID\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ComplianceCard.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ComplianceCard.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}