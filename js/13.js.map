{"version":3,"sources":["webpack:///./src/SmartComponents/Advisor/Constants.js","webpack:///./src/SmartComponents/Advisor/StackChart.js","webpack:///./src/SmartComponents/Advisor/Advisor.js"],"names":["SEVERITY_MAP","critical","important","moderate","low","StackChart","history","data","intl","chartData","name","formatMessage","messages","y","colorScale","global_palette_red_200","value","global_palette_orange_300","global_palette_gold_400","global_palette_gold_300","legendData","map","item","symbol","type","labelComponent","ChartTooltip","text","datum","constrainToVisibleArea","Fragment","Chart","ariaDesc","ariaTitle","padding","left","right","bottom","top","width","legendPosition","height","legendComponent","ChartLegend","events","target","eventHandlers","onClick","mutation","risk","split","toLowerCase","push","onMouseOver","style","Object","assign","cursor","orientation","ChartAxis","axisComponent","ChartStack","horizontal","ChartBar","barWidth","x","label","propTypes","PropTypes","object","any","injectIntl","routerParams","Advisor","recStats","recStatsStatus","advisorFetchStatsRecs","advisorFetchStatsSystems","advisorIncidents","advisorIncidentsStatus","advisorFetchIncidents","useEffect","TemplateCard","appName","title","Loading","className","meta","count","to","incidentsDetected","incidents","total_risk","func","string","systemsStats","systemsStatsStatus","connect","DashboardStore","advisorStatsRecs","advisorStatsRecsStatus","advisorStatsSystems","advisorStatsSystemsStatus","dispatch","url","AppActions"],"mappings":"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","file":"js/13.js","sourcesContent":["export const INCIDENT_URL = `/advisor/recommendations?reports_shown=undefined&impacting=false&offset=0&limit=10&sort=-publish_date&incident=true`;\nexport const NEW_REC_URL = `/advisor/recommendations?reports_shown=undefined&impacting=false&offset=0&limit=10&sort=-publish_date`;\n\nexport const SEVERITY_MAP = {\n    critical: 4,\n    important: 3,\n    moderate: 2,\n    low: 1\n};\n","/* eslint-disable camelcase */\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartStack, ChartTooltip } from '@patternfly/react-charts';\nimport { global_palette_gold_300, global_palette_gold_400, global_palette_orange_300, global_palette_red_200 } from '@patternfly/react-tokens';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { SEVERITY_MAP } from './Constants';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst StackChart = ({ history, data, intl }) => {\n    const chartData = [\n        { name: intl.formatMessage(messages.critical), y: data[SEVERITY_MAP.critical] },\n        { name: intl.formatMessage(messages.important), y: data[SEVERITY_MAP.important] },\n        { name: intl.formatMessage(messages.moderate), y: data[SEVERITY_MAP.moderate] },\n        { name: intl.formatMessage(messages.low), y: data[SEVERITY_MAP.low] }];\n    const colorScale = [\n        global_palette_red_200.value,\n        global_palette_orange_300.value,\n        global_palette_gold_400.value,\n        global_palette_gold_300.value\n    ];\n    const barWidth = 22;\n    const legendData = chartData.map(item => ({ name: `${item.y} ${item.name}`, symbol: { type: null } }));\n    const legendClick = () => [{\n        target: 'labels',\n        mutation: (data) => {\n            const risk = data.datum.name.split(' ')[1].toLowerCase();\n            history.push(`/advisor/recommendations?total_risk=${SEVERITY_MAP[risk]}&reports_shown=true&impacting=true&offset=0&limit=10`);\n        }\n    }];\n    const labelComponent = () => <ChartTooltip text={ ({ datum }) => `${datum.name}: ${datum.y}` } constrainToVisibleArea />;\n\n    return <React.Fragment>\n        <Chart\n            ariaDesc='Advisor recommendations by severity'\n            ariaTitle='Advisor recommendations by severity'\n            padding={ { left: 0, right: 0, bottom: 56, top: 20 } }\n            width={ 500 }\n            legendPosition=\"bottom-left\"\n            height={ 110 }\n            legendComponent={ <ChartLegend\n                data={ legendData }\n                events={ [{\n                    target: 'labels', eventHandlers: {\n                        onClick: legendClick,\n                        onMouseOver: () => {\n                            return [{\n                                mutation: (data) => {\n                                    return {\n                                        style: Object.assign({}, data.style, { cursor: 'pointer' })\n                                    };\n                                }\n                            }];\n                        }\n                    }\n                }] }\n                orientation='horizontal'\n                colorScale={ colorScale }\n            /> }\n        >\n            <ChartAxis axisComponent={ <React.Fragment /> } />\n            <ChartStack horizontal\n                colorScale={ colorScale }>\n                <ChartBar\n                    barWidth={ barWidth } labelComponent={ labelComponent() }\n                    data={ [{ name: chartData[0].name, y: chartData[0].y, x: 1, label: chartData[0].name }] }\n                />\n                <ChartBar\n                    barWidth={ barWidth } labelComponent={ labelComponent() }\n                    data={ [{ name: chartData[1].name, y: chartData[1].y, x: 1, label: chartData[1].name }] }\n                />\n                <ChartBar\n                    barWidth={ barWidth } labelComponent={ labelComponent() }\n                    data={ [{ name: chartData[2].name, y: chartData[2].y, x: 1, label: chartData[2].name }] }\n                />\n                <ChartBar\n                    barWidth={ barWidth } labelComponent={ labelComponent() }\n                    data={ [{ name: chartData[3].name, y: chartData[3].y, x: 1, label: chartData[3].name }] }\n                />\n            </ChartStack>\n        </Chart>\n    </React.Fragment>;\n};\n\nStackChart.propTypes = {\n    history: PropTypes.object,\n    data: PropTypes.object,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(routerParams(StackChart));\n","import * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { INCIDENT_URL } from './Constants';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport StackChart from './StackChart';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\n/**\n * Advisor Card for showing count/severity of rec hits\n */\nconst Advisor = ({ recStats, recStatsStatus, advisorFetchStatsRecs, advisorFetchStatsSystems,\n    advisorIncidents, advisorIncidentsStatus, advisorFetchIncidents, intl }) => {\n\n    useEffect(() => {\n        advisorFetchStatsRecs();\n        advisorFetchStatsSystems();\n        advisorFetchIncidents();\n    }, [advisorFetchIncidents, advisorFetchStatsRecs, advisorFetchStatsSystems]);\n\n    return <TemplateCard appName='Advisor'>\n        <TemplateCardHeader title='Advisor recommendations'/>\n        <TemplateCardBody>\n            {advisorIncidentsStatus !== 'fulfilled' ? <Loading /> :\n                <div className='ins-c-summary'>\n                    <ExclamationCircleIcon className='ins-c-summary__icon ins-c-summary__icon-critical' />\n                    <span className='ins-c-summary__emphasis'>{advisorIncidents.meta.count}</span>\n                    <span className='ins-c-summary__label'>\n                        <Link to={ `${INCIDENT_URL}` }>\n                            {intl.formatMessage(messages.incidentsDetected, { incidents: advisorIncidents.meta.count })}\n                        </Link>\n                    </span>\n                </div>\n            }\n            {recStatsStatus !== 'fulfilled' ? <Loading /> : <StackChart data={ recStats.total_risk } />}\n        </TemplateCardBody>\n    </TemplateCard>;\n};\n\nAdvisor.propTypes = {\n    advisorFetchStatsRecs: PropTypes.func,\n    recStats: PropTypes.object,\n    recStatsStatus: PropTypes.string,\n    advisorFetchStatsSystems: PropTypes.func,\n    systemsStats: PropTypes.object,\n    systemsStatsStatus: PropTypes.string,\n    advisorIncidents: PropTypes.object,\n    advisorIncidentsStatus: PropTypes.string,\n    advisorFetchIncidents: PropTypes.func,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(routerParams(connect(\n    ({ DashboardStore }) => ({\n        recStats: DashboardStore.advisorStatsRecs,\n        recStatsStatus: DashboardStore.advisorStatsRecsStatus,\n        systemsStats: DashboardStore.advisorStatsSystems,\n        systemsStatsStatus: DashboardStore.advisorStatsSystemsStatus,\n        advisorIncidents: DashboardStore.advisorIncidents,\n        advisorIncidentsStatus: DashboardStore.advisorIncidentsStatus\n    }),\n    dispatch => ({\n        advisorFetchStatsRecs: (url) => dispatch(AppActions.advisorFetchStatsRecs(url)),\n        advisorFetchStatsSystems: (url) => dispatch(AppActions.advisorFetchStatsSystems(url)),\n        advisorFetchIncidents: (url) => dispatch(AppActions.advisorFetchIncidents(url))\n    })\n)(Advisor)));\n"],"sourceRoot":""}