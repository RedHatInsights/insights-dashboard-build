{"version":3,"sources":["webpack:///./src/SmartComponents/Advisor/_Advisor.scss","webpack:///./src/SmartComponents/Advisor/_Advisor.scss?b1d1","webpack:///./src/SmartComponents/Advisor/Constants.js","webpack:///./src/SmartComponents/Advisor/StackChart.js","webpack:///./src/SmartComponents/Advisor/Advisor.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","api","content","__esModule","default","options","update","exported","locals","hot","accept","newContent","dispose","SEVERITY_MAP","critical","important","moderate","low","StackChart","data","intl","chartData","name","formatMessage","messages","y","colorScale","global_palette_red_200","value","global_palette_orange_300","global_palette_gold_400","global_palette_gold_300","legendData","map","item","symbol","type","Fragment","Chart","ariaDesc","ariaTitle","padding","left","right","bottom","top","width","height","maxWidth","ChartAxis","axisComponent","ChartStack","horizontal","ChartBar","key","barWidth","labelComponent","ChartTooltip","text","datum","constrainToVisibleArea","x","label","className","ChartLegend","responsive","fontSize","events","target","eventHandlers","onClick","mutation","risk","split","toLowerCase","window","location","href","UI_BASE","onMouseOver","style","Object","assign","cursor","orientation","propTypes","PropTypes","object","any","injectIntl","Advisor","recStats","recStatsStatus","advisorFetchStatsRecs","advisorFetchStatsSystems","advisorIncidents","advisorIncidentsStatus","advisorFetchIncidents","systemsStats","systemsStatsStatus","useEffect","TemplateCard","appName","title","Loading","meta","count","incidentsDetected","incidents","total_risk","recsImpactingSystems","totalRecs","total","systems","func","string","connect","DashboardStore","advisorStatsRecs","advisorStatsRecsStatus","advisorStatsSystems","advisorStatsSystemsStatus","dispatch","url","AppActions"],"mappings":"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","file":"js/13.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".pf-c-chart{top:0}.stackChartLegend{left:-9px;position:relative}a{font-size:small}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Advisor.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\nif (module.hot) {\n  if (!content.locals) {\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Advisor.scss\",\n      function () {\n        var newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Advisor.scss\");\n\n              newContent = newContent.__esModule ? newContent.default : newContent;\n\n              if (typeof newContent === 'string') {\n                newContent = [[module.id, newContent, '']];\n              }\n\n              update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}\n\nmodule.exports = exported;","export const INCIDENT_URL = `/advisor/recommendations?reports_shown=undefined&impacting=false&offset=0&limit=10&sort=-publish_date&incident=true`;\nexport const NEW_REC_URL = `/advisor/recommendations?reports_shown=undefined&impacting=false&offset=0&limit=10&sort=-publish_date`;\n\nexport const SEVERITY_MAP = {\n    critical: 4,\n    important: 3,\n    moderate: 2,\n    low: 1\n};\n","/* eslint-disable camelcase */\nimport './_Advisor.scss';\n\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartStack, ChartTooltip } from '@patternfly/react-charts';\nimport { global_palette_gold_300, global_palette_gold_400, global_palette_orange_300, global_palette_red_200 } from '@patternfly/react-tokens';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { SEVERITY_MAP } from './Constants';\nimport { UI_BASE } from '../../AppConstants';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst StackChart = ({ data, intl }) => {\n    const chartData = [\n        { name: intl.formatMessage(messages.critical), y: data[SEVERITY_MAP.critical] },\n        { name: intl.formatMessage(messages.important), y: data[SEVERITY_MAP.important] },\n        { name: intl.formatMessage(messages.moderate), y: data[SEVERITY_MAP.moderate] },\n        { name: intl.formatMessage(messages.low), y: data[SEVERITY_MAP.low] }];\n    const colorScale = [\n        global_palette_red_200.value,\n        global_palette_orange_300.value,\n        global_palette_gold_400.value,\n        global_palette_gold_300.value\n    ];\n    const barWidth = 22;\n    const legendData = chartData.map(item => ({ name: `${item.y} ${item.name}`, symbol: { type: null } }));\n    const legendClick = () => [{\n        target: 'labels',\n        mutation: (data) => {\n            const risk = data.datum.name.split(' ')[1].toLowerCase();\n            window.location.href =\n                `${UI_BASE}/advisor/recommendations?total_risk=${SEVERITY_MAP[risk]}&reports_shown=true&impacting=true&offset=0&limit=10`;\n        }\n    }];\n    const labelComponent = () => <ChartTooltip text={ ({ datum }) => `${datum.name}: ${datum.y}` } constrainToVisibleArea />;\n\n    return <React.Fragment>\n        <Chart ariaDesc='Advisor recommendations by severity' ariaTitle='Advisor recommendations by severity'\n            padding={ { left: 0, right: 0, bottom: 0, top: 0 } }\n            width={ 600 }\n            height={ 40 }\n            maxWidth={ 600 }>\n            <ChartAxis axisComponent={ <React.Fragment /> } />\n            <ChartStack horizontal\n                colorScale={ colorScale }>\n                {chartData.map(item => <ChartBar key={ item }\n                    barWidth={ barWidth } labelComponent={ labelComponent() }\n                    data={ [{ name: item.name, y: item.y, x: 1, label: item.name }] }\n                />)}\n            </ChartStack>\n        </Chart>\n        <span className='stackChartLegend'>\n            <ChartLegend\n                data={ legendData }\n                responsive={ false }\n                height={ 36 }\n                width={ 600 }\n                fontSize={ 14 }\n                events={ [{\n                    target: 'labels', eventHandlers: {\n                        onClick: legendClick,\n                        onMouseOver: () => {\n                            return [{\n                                mutation: (data) => {\n                                    return {\n                                        style: Object.assign({}, data.style, { cursor: 'pointer' })\n                                    };\n                                }\n                            }];\n                        }\n                    }\n                }] }\n                orientation='horizontal'\n                colorScale={ colorScale } />\n        </span>\n    </React.Fragment>;\n};\n\nStackChart.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(StackChart);\n","import './_Advisor.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport { INCIDENT_URL, NEW_REC_URL } from './Constants';\nimport React, { useEffect } from 'react';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport StackChart from './StackChart';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\n/**\n * Advisor Card for showing count/severity of rec hits\n */\nconst Advisor = ({ recStats, recStatsStatus, advisorFetchStatsRecs, advisorFetchStatsSystems,\n    advisorIncidents, advisorIncidentsStatus, advisorFetchIncidents, systemsStats, systemsStatsStatus, intl }) => {\n\n    useEffect(() => {\n        advisorFetchStatsRecs();\n        advisorFetchStatsSystems();\n        advisorFetchIncidents();\n    }, [advisorFetchIncidents, advisorFetchStatsRecs, advisorFetchStatsSystems]);\n\n    return <TemplateCard appName='Advisor'>\n        <TemplateCardHeader title='Advisor recommendations' />\n        <TemplateCardBody>\n            {advisorIncidentsStatus !== 'fulfilled' ? <Loading /> :\n                <div className='ins-c-summary'>\n                    <ExclamationCircleIcon className='ins-c-summary__icon ins-c-summary__icon-critical' />\n                    <span className='ins-c-summary__emphasis'>{advisorIncidents.meta.count}</span>\n                    <span className='ins-c-summary__label'>\n                        <a href={ `${UI_BASE}${INCIDENT_URL}` }>\n                            {intl.formatMessage(messages.incidentsDetected, { incidents: advisorIncidents.meta.count })}\n                        </a>\n                    </span>\n                </div>\n            }\n            {recStatsStatus !== 'fulfilled' ? <Loading /> : <StackChart data={ recStats.total_risk } />}\n            {systemsStatsStatus !== 'fulfilled' ? null :\n                <React.Fragment>\n                    <a href={ `${UI_BASE}${NEW_REC_URL}` }>\n                        {intl.formatMessage(messages.recsImpactingSystems, { totalRecs: recStats.total, systems: systemsStats.total })}\n                    </a>\n                </React.Fragment>}\n        </TemplateCardBody>\n    </TemplateCard>;\n};\n\nAdvisor.propTypes = {\n    advisorFetchStatsRecs: PropTypes.func,\n    recStats: PropTypes.object,\n    recStatsStatus: PropTypes.string,\n    advisorFetchStatsSystems: PropTypes.func,\n    systemsStats: PropTypes.object,\n    systemsStatsStatus: PropTypes.string,\n    advisorIncidents: PropTypes.object,\n    advisorIncidentsStatus: PropTypes.string,\n    advisorFetchIncidents: PropTypes.func,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(connect(\n    ({ DashboardStore }) => ({\n        recStats: DashboardStore.advisorStatsRecs,\n        recStatsStatus: DashboardStore.advisorStatsRecsStatus,\n        systemsStats: DashboardStore.advisorStatsSystems,\n        systemsStatsStatus: DashboardStore.advisorStatsSystemsStatus,\n        advisorIncidents: DashboardStore.advisorIncidents,\n        advisorIncidentsStatus: DashboardStore.advisorIncidentsStatus\n    }),\n    dispatch => ({\n        advisorFetchStatsRecs: (url) => dispatch(AppActions.advisorFetchStatsRecs(url)),\n        advisorFetchStatsSystems: (url) => dispatch(AppActions.advisorFetchStatsSystems(url)),\n        advisorFetchIncidents: (url) => dispatch(AppActions.advisorFetchIncidents(url))\n    })\n)(Advisor));\n"],"sourceRoot":""}