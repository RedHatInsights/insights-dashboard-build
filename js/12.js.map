{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./src/SmartComponents/Compliance/ComplianceCard.js"],"names":["module","exports","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ComplianceCard","props","this","fetchCompliance","compliance","complianceFetchStatus","complianceSummary","className","size","Array","isArray","data","length","slice","map","element","gutter","id","Math","trunc","attributes","score","label","name","width","height","timeframe","identifier","href","UI_BASE","compliant_host_count","total_host_count","icon","ClipboardCheckIcon","Component","propTypes","PropTypes","func","object","string","routerParams","connect","state","ownProps","DashboardStore","dispatch","url","AppActions"],"mappings":"4EAeAA,EAAOC,QAfP,SAAyBC,EAAKC,EAAKC,GAYjC,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,I,+lBCqBHQ,E,YAEF,WAAYC,GAAO,6CACTA,I,iEAINC,KAAKD,MAAME,oB,+BAQX,IAAoCC,EAL/B,EAeDF,KAAKD,MAFLI,EAbC,EAaDA,sBACAC,EAdC,EAcDA,kBAGJ,OACI,kBAAC,IAAD,KAAMC,UAAU,0BACmB,YAA1BF,EAAsC,CACvC,kBAAkB,GAClB,CAAE,kBAAkB,IAExB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOG,KAAO,MAAd,eAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KAC+B,cAA1BH,GACII,MAAMC,QAAQJ,EAAkBK,QAC5BL,EAAkBK,KAAKC,OAAS,GAzBrBR,EA0BUE,EAzBjBF,EAAWO,KAAKC,OAAS,EAAIR,EAAWO,KAAKE,MAAM,EAAG,GAC3ET,EAAWO,KAAKE,SAwByCC,KAAI,SAAAC,GAAO,OAC5C,kBAAC,IAAD,CAAWC,OAAO,KAAKvB,IAAMsB,EAAQE,IACjC,kBAAC,IAAD,CAAOD,OAAO,KAAKvB,IAAMsB,EAAQE,IAC7B,kBAAC,IAAD,CAAWV,UAAU,sCACjB,yBAAKA,UAAU,mCACVW,KAAKC,MAAiC,IAA3BJ,EAAQK,WAAWC,OADnC,KAEA,kBAAC,QAAD,CAAOC,MAAQP,EAAQK,WAAWG,KAC9B7B,MAAQwB,KAAKC,MAAiC,IAA3BJ,EAAQK,WAAWC,OAAeG,MAAQ,GAAKC,OAAS,GAC3EC,UAAU,KACVC,WAAU,2BAAuBZ,EAAQE,OAEjD,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,uBAAGW,KAAI,WAAOC,IAAP,0BAAyCd,EAAQK,WAAWG,OAEvE,kBAAC,IAAD,KACKR,EAAQK,WAAWU,qBADxB,QAETf,EAAQK,WAAWW,iBAFV,mBASpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAgBC,KAAOC,MACvB,kBAAC,IAAD,kDAKW,YAA1B5B,GAAwC,kBAAC,IAAD,QAGjD,kBAAC,IAAD,KACI,uBAAGuB,KAAI,UAAMC,IAAN,0BAAP,WACuC,cAA1BxB,GAAyCI,MAAMC,QAAQJ,EAAkBK,OAC9EL,EAAkBK,KAAKC,OAAS,EAD3B,WACmCN,EAAkBK,KAAKC,OAD1D,KACsE,IAFnF,6B,GA7ESsB,aAwF7BlC,EAAemC,UAAY,CACvBhC,gBAAiBiC,IAAUC,KAC3B/B,kBAAmB8B,IAAUE,OAC7BjC,sBAAuB+B,IAAUG,QAatBC,cAAaC,mBAVJ,SAACC,EAAOC,GAAR,O,iWAAA,EACpBrC,kBAAmBoC,EAAME,eAAetC,kBACxCD,sBAAuBqC,EAAME,eAAevC,uBACzCsC,MAGoB,SAAAE,GAAQ,MAAK,CACpC1C,gBAAiB,SAAC2C,GAAD,OAASD,EAASE,IAAkCD,QAG7CL,CAG1BzC","file":"js/12.js","sourcesContent":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import * as AppActions from '../../AppActions';\n\nimport {\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport React, { Component } from 'react';\n\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport { Gauge } from '@red-hat-insights/insights-frontend-components';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass ComplianceCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchCompliance();\n    }\n\n    render() {\n        /*\n         * Returns the first two -- if there are at least two entries -- items as a shallow copy of\n         * complianceSummary\n         */\n        const getTopTwoPolicies = function (compliance) {\n            const complianceTopTwo = compliance.data.length > 1 ? compliance.data.slice(0, 2) :\n                compliance.data.slice();\n\n            return complianceTopTwo;\n        };\n\n        const {\n            complianceFetchStatus,\n            complianceSummary\n        } = this.props;\n\n        return (\n            <Card className='ins-c-card__compliance'\n                { ...complianceFetchStatus !== 'pending' ? {\n                    'data-ouia-safe': true\n                } : { 'data-ouia-safe': false } }\n            >\n                <CardHeader>\n                    <Title size={ 'lg' }>Compliance</Title>\n                </CardHeader>\n                <CardBody>\n                    <Stack>\n                        {complianceFetchStatus === 'fulfilled' &&\n                            (Array.isArray(complianceSummary.data) &&\n                                (complianceSummary.data.length > 0 ? (\n                                    getTopTwoPolicies(complianceSummary).map(element =>\n                                        <StackItem gutter='sm' key={ element.id }>\n                                            <Split gutter='md' key={ element.id }>\n                                                <SplitItem className='ins-c-gauge pf-u-text-align-center'>\n                                                    <div className='ins-c-gauge__metrics-percentage'>\n                                                        {Math.trunc(element.attributes.score * 100)}%</div>\n                                                    <Gauge label={ element.attributes.name }\n                                                        value={ Math.trunc(element.attributes.score * 100) } width={ 82 } height={ 82 }\n                                                        timeframe='30'\n                                                        identifier={ `compliance-gauge-${element.id}` } />\n                                                </SplitItem>\n                                                <SplitItem>\n                                                    <Stack>\n                                                        <StackItem>\n                                                            <a href={ `/${UI_BASE}/compliance/policies/` }>{element.attributes.name}</a>\n                                                        </StackItem>\n                                                        <StackItem>\n                                                            {element.attributes.compliant_host_count} of\n                                        &nbsp;{element.attributes.total_host_count} systems</StackItem>\n                                                    </Stack>\n                                                </SplitItem>\n                                            </Split>\n                                        </StackItem>\n                                    )\n                                ) : (\n                                    <EmptyState>\n                                        <EmptyStateIcon icon={ ClipboardCheckIcon } />\n                                        <EmptyStateBody> You have not uploaded any reports yet </EmptyStateBody>\n                                    </EmptyState>\n                                ))\n                            )\n                        }\n                        {complianceFetchStatus === 'pending' && (<Loading />)}\n                    </Stack>\n                </CardBody>\n                <CardFooter>\n                    <a href={ `${UI_BASE}/compliance/policies/` }>\n                        View all{complianceFetchStatus === 'fulfilled' && Array.isArray(complianceSummary.data) &&\n                            complianceSummary.data.length > 1 ? ` ${complianceSummary.data.length} ` : ' '}\n                        compliance policies\n                    </a>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nComplianceCard.propTypes = {\n    fetchCompliance: PropTypes.func,\n    complianceSummary: PropTypes.object,\n    complianceFetchStatus: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    complianceSummary: state.DashboardStore.complianceSummary,\n    complianceFetchStatus: state.DashboardStore.complianceFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCompliance: (url) => dispatch(AppActions.fetchComplianceSummary(url))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ComplianceCard));\n"],"sourceRoot":""}