{"version":3,"sources":["webpack:///./src/SmartComponents/Advisor/Constants.js","webpack:///./src/SmartComponents/Advisor/Advisor.js"],"names":["SEVERITY_MAP","critical","important","moderate","low","Advisor","recStats","recStatsStatus","advisorFetchStatsRecs","advisorFetchStatsSystems","advisorIncidents","advisorIncidentsStatus","advisorFetchIncidents","systemsStats","systemsStatsStatus","intl","useIntl","useState","chartData","setChartData","useEffect","name","formatMessage","messages","y","total_risk","TemplateCard","appName","title","Loading","NumberDescription","data","meta","count","dataSize","layout","linkDescription","incidentsDetected","incidents","link","UI_BASE","StackChartTemplate","ariaDesc","ariaTitle","height","width","maxWidth","legendHeight","legendWidth","legendClick","target","mutation","risk","datum","split","toLowerCase","window","location","href","Button","component","variant","isInline","recsImpactingSystems","totalRecs","total","systems","propTypes","PropTypes","func","object","string","connect","DashboardStore","advisorStatsRecs","advisorStatsRecsStatus","advisorStatsSystems","advisorStatsSystemsStatus","dispatch","url","AppActions"],"mappings":"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","file":"js/12.js","sourcesContent":["export const INCIDENT_URL = `/advisor/recommendations?reports_shown=undefined&impacting=true&offset=0&limit=10&sort=-publish_date&incident=true`;\nexport const NEW_REC_URL = `/advisor/recommendations?reports_shown=undefined&impacting=true&offset=0&limit=10&sort=-publish_date`;\n\nexport const SEVERITY_MAP = {\n    critical: 4,\n    important: 3,\n    moderate: 2,\n    low: 1\n};\n","import * as AppActions from '../../AppActions';\n\nimport { INCIDENT_URL, NEW_REC_URL } from './Constants';\nimport React, { useEffect, useState } from 'react';\nimport { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { NumberDescription } from '../../PresentationalComponents/NumberDescription/NumberDescription';\nimport PropTypes from 'prop-types';\nimport { SEVERITY_MAP } from './Constants';\nimport StackChartTemplate from '../../ChartTemplates/StackChart/StackChartTemplate';\nimport { UI_BASE } from '../../AppConstants';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\n/**\n * Advisor Card for showing count/severity of rec hits\n */\nconst Advisor = ({ recStats, recStatsStatus, advisorFetchStatsRecs, advisorFetchStatsSystems,\n    advisorIncidents, advisorIncidentsStatus, advisorFetchIncidents, systemsStats, systemsStatsStatus }) => {\n\n    const intl = useIntl();\n    const [chartData, setChartData] = useState([]);\n\n    useEffect(() => {\n        advisorFetchStatsRecs();\n        advisorFetchStatsSystems();\n        advisorFetchIncidents();\n    }, [advisorFetchIncidents, advisorFetchStatsRecs, advisorFetchStatsSystems]);\n\n    useEffect(() => {\n        recStatsStatus === 'fulfilled' && setChartData([\n            { name: intl.formatMessage(messages.critical), y: recStats.total_risk[SEVERITY_MAP.critical] },\n            { name: intl.formatMessage(messages.important), y: recStats.total_risk[SEVERITY_MAP.important] },\n            { name: intl.formatMessage(messages.moderate), y: recStats.total_risk[SEVERITY_MAP.moderate] },\n            { name: intl.formatMessage(messages.low), y: recStats.total_risk[SEVERITY_MAP.low] }\n        ]);\n    }, [intl, recStats, recStatsStatus]);\n\n    const legendClick = () => [{\n        target: 'labels',\n        mutation: (data) => {\n            const risk = data.datum.name.split(' ')[1].toLowerCase();\n            window.location.href =\n                `${UI_BASE}/advisor/recommendations?total_risk=${SEVERITY_MAP[risk]}&reports_shown=true&impacting=true&offset=0&limit=10`;\n        }\n    }];\n\n    return <TemplateCard appName='Advisor'>\n        <TemplateCardHeader title='Advisor recommendations' />\n        <TemplateCardBody>\n            {advisorIncidentsStatus !== 'fulfilled' ? <Loading /> :\n                <NumberDescription\n                    data={ advisorIncidents.meta.count }\n                    dataSize=\"md\"\n                    layout=\"horizontal\"\n                    linkDescription={ intl.formatMessage(messages.incidentsDetected, { incidents: advisorIncidents.meta.count }) }\n                    critical={ advisorIncidents.meta.count > 50 ? 'true' : 'false' }\n                    link={ `${UI_BASE}${INCIDENT_URL}` }\n                />\n            }\n            {recStatsStatus !== 'fulfilled' ? <Loading /> :\n                <StackChartTemplate\n                    ariaDesc=\"Advisor recommendations\"\n                    ariaTitle=\"Advisor recommendations chart\"\n                    height={ 40 }\n                    width={ 600 }\n                    maxWidth={ 600 }\n                    legendHeight={ 36 }\n                    legendWidth={ 600 }\n                    data={ chartData }\n                    legendClick={ legendClick }\n                />\n            }\n            {systemsStatsStatus !== 'fulfilled' ? <Loading /> :\n                <Button component=\"a\" href={ `${UI_BASE}${NEW_REC_URL}` } variant=\"link\" isInline>\n                    {intl.formatMessage(messages.recsImpactingSystems, { totalRecs: recStats.total, systems: systemsStats.total })}\n                </Button>}\n        </TemplateCardBody>\n    </TemplateCard>;\n};\n\nAdvisor.propTypes = {\n    advisorFetchStatsRecs: PropTypes.func,\n    recStats: PropTypes.object,\n    recStatsStatus: PropTypes.string,\n    advisorFetchStatsSystems: PropTypes.func,\n    systemsStats: PropTypes.object,\n    systemsStatsStatus: PropTypes.string,\n    advisorIncidents: PropTypes.object,\n    advisorIncidentsStatus: PropTypes.string,\n    advisorFetchIncidents: PropTypes.func\n};\n\nexport default connect(\n    ({ DashboardStore }) => ({\n        recStats: DashboardStore.advisorStatsRecs,\n        recStatsStatus: DashboardStore.advisorStatsRecsStatus,\n        systemsStats: DashboardStore.advisorStatsSystems,\n        systemsStatsStatus: DashboardStore.advisorStatsSystemsStatus,\n        advisorIncidents: DashboardStore.advisorIncidents,\n        advisorIncidentsStatus: DashboardStore.advisorIncidentsStatus\n    }),\n    dispatch => ({\n        advisorFetchStatsRecs: (url) => dispatch(AppActions.advisorFetchStatsRecs(url)),\n        advisorFetchStatsSystems: (url) => dispatch(AppActions.advisorFetchStatsSystems(url)),\n        advisorFetchIncidents: (url) => dispatch(AppActions.advisorFetchIncidents(url))\n    })\n)(Advisor);\n"],"sourceRoot":""}